
3.FreeRTOS_STM32F407VG_AM2302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  08011b88  08011b88  00021b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122c4  080122c4  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080122c4  080122c4  000222c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122cc  080122cc  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122cc  080122cc  000222cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122d0  080122d0  000222d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080122d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030354  2**0
                  CONTENTS
 10 .bss          0000dc0c  20000358  20000358  00030358  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000df64  2000df64  00030358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c5f2  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005553  00000000  00000000  0005c976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db0  00000000  00000000  00061ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bc0  00000000  00000000  00063c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009062  00000000  00000000  00065840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002564c  00000000  00000000  0006e8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc508  00000000  00000000  00093eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001703f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008fd8  00000000  00000000  0017044c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011b6c 	.word	0x08011b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	08011b6c 	.word	0x08011b6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bme280_init>:
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 f9ef 	bl	8002334 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d133      	bne.n	8000fca <bme280_init+0x8a>
 8000f62:	e028      	b.n	8000fb6 <bme280_init+0x76>
 8000f64:	f107 010d 	add.w	r1, r7, #13
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	; 0xd0
 8000f6e:	f000 f832 	bl	8000fd6 <bme280_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <bme280_init+0x68>
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d111      	bne.n	8000fa8 <bme280_init+0x68>
 8000f84:	7b7a      	ldrb	r2, [r7, #13]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f976 	bl	800127c <bme280_soft_reset>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <bme280_init+0x7e>
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 f83f 	bl	8002020 <get_calib_data>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e00a      	b.n	8000fbe <bme280_init+0x7e>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	4798      	blx	r3
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1d3      	bne.n	8000f64 <bme280_init+0x24>
 8000fbc:	e000      	b.n	8000fc0 <bme280_init+0x80>
 8000fbe:	bf00      	nop
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <bme280_init+0x8a>
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <bme280_get_regs>:
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	81bb      	strh	r3, [r7, #12]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 f9a3 	bl	8002334 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <bme280_get_regs+0x54>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d003      	beq.n	800100a <bme280_get_regs+0x34>
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685c      	ldr	r4, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7858      	ldrb	r0, [r3, #1]
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <bme280_get_regs+0x54>
 8001026:	23fc      	movs	r3, #252	; 0xfc
 8001028:	75fb      	strb	r3, [r7, #23]
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bme280_set_regs>:
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d901      	bls.n	8001050 <bme280_set_regs+0x1a>
 800104c:	230a      	movs	r3, #10
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f001 f96f 	bl	8002334 <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800105c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001060:	2b00      	cmp	r3, #0
 8001062:	d154      	bne.n	800110e <bme280_set_regs+0xd8>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d051      	beq.n	800110e <bme280_set_regs+0xd8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04e      	beq.n	800110e <bme280_set_regs+0xd8>
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d047      	beq.n	8001106 <bme280_set_regs+0xd0>
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	753b      	strb	r3, [r7, #20]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d01a      	beq.n	80010ba <bme280_set_regs+0x84>
 8001084:	2300      	movs	r3, #0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800108a:	e011      	b.n	80010b0 <bme280_set_regs+0x7a>
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e8      	bcc.n	800108c <bme280_set_regs+0x56>
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d90b      	bls.n	80010d8 <bme280_set_regs+0xa2>
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 ffee 	bl	80020aa <interleave_reg_addr>
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010d6:	e001      	b.n	80010dc <bme280_set_regs+0xa6>
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689c      	ldr	r4, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7858      	ldrb	r0, [r3, #1]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7819      	ldrb	r1, [r3, #0]
 80010e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ea:	f107 0214 	add.w	r2, r7, #20
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <bme280_set_regs+0xe0>
 80010fe:	23fc      	movs	r3, #252	; 0xfc
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001104:	e007      	b.n	8001116 <bme280_set_regs+0xe0>
 8001106:	23fd      	movs	r3, #253	; 0xfd
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800110c:	e003      	b.n	8001116 <bme280_set_regs+0xe0>
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001114:	e000      	b.n	8001118 <bme280_set_regs+0xe2>
 8001116:	bf00      	nop
 8001118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800111c:	4618      	mov	r0, r3
 800111e:	3734      	adds	r7, #52	; 0x34
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <bme280_set_sensor_settings>:
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f001 f8ff 	bl	8002334 <null_ptr_check>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d13f      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f874 	bl	8001236 <bme280_get_sensor_mode>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <bme280_set_sensor_settings+0x46>
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <bme280_set_sensor_settings+0x46>
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 fb4e 	bl	8001802 <put_device_to_sleep>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d127      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2007      	movs	r0, #7
 8001178:	f001 f8c0 	bl	80022fc <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x72>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f98a 	bl	80014a6 <set_osr_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4619      	mov	r1, r3
 80011a2:	2018      	movs	r0, #24
 80011a4:	f001 f8aa 	bl	80022fc <are_settings_changed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <bme280_set_sensor_settings+0x9e>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa11 	bl	80015e0 <set_filter_standby_settings>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bme280_set_sensor_mode>:
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f001 f8aa 	bl	8002334 <null_ptr_check>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11e      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
 80011ec:	f107 030e 	add.w	r3, r7, #14
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f81f 	bl	8001236 <bme280_get_sensor_mode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <bme280_set_sensor_mode+0x46>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <bme280_set_sensor_mode+0x46>
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 faf9 	bl	8001802 <put_device_to_sleep>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fabb 	bl	800179c <write_power_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bme280_get_sensor_mode>:
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f001 f877 	bl	8002334 <null_ptr_check>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10e      	bne.n	8001270 <bme280_get_sensor_mode+0x3a>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff febc 	bl	8000fd6 <bme280_get_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <bme280_soft_reset>:
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	23e0      	movs	r3, #224	; 0xe0
 8001286:	73bb      	strb	r3, [r7, #14]
 8001288:	23b6      	movs	r3, #182	; 0xb6
 800128a:	737b      	strb	r3, [r7, #13]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f851 	bl	8002334 <null_ptr_check>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <bme280_soft_reset+0x3e>
 800129e:	f107 010d 	add.w	r1, r7, #13
 80012a2:	f107 000e 	add.w	r0, r7, #14
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f7ff fec4 	bl	8001036 <bme280_set_regs>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2002      	movs	r0, #2
 80012b8:	4798      	blx	r3
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <bme280_get_sensor_data>:
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b08a      	sub	sp, #40	; 0x28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f823 	bl	8002334 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d124      	bne.n	8001346 <bme280_get_sensor_data+0x80>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d021      	beq.n	8001346 <bme280_get_sensor_data+0x80>
 8001302:	f107 011c 	add.w	r1, r7, #28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	20f7      	movs	r0, #247	; 0xf7
 800130c:	f7ff fe63 	bl	8000fd6 <bme280_get_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <bme280_get_sensor_data+0x86>
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f815 	bl	8001358 <bme280_parse_sensor_data>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3310      	adds	r3, #16
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	7bf8      	ldrb	r0, [r7, #15]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	f000 f853 	bl	80013e4 <bme280_compensate_data>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001344:	e002      	b.n	800134c <bme280_get_sensor_data+0x86>
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800134c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <bme280_parse_sensor_data>:
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b2db      	uxtb	r3, r3
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	031b      	lsls	r3, r3, #12
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3306      	adds	r3, #6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3307      	adds	r3, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <bme280_compensate_data>:
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04b      	beq.n	8001496 <bme280_compensate_data+0xb2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d048      	beq.n	8001496 <bme280_compensate_data+0xb2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d045      	beq.n	8001496 <bme280_compensate_data+0xb2>
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <bme280_compensate_data+0x70>
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 fa2b 	bl	800189c <compensate_temperature>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	eef0 7a60 	vmov.f32	s15, s1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed83 7b02 	vstr	d7, [r3, #8]
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <bme280_compensate_data+0x90>
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 faed 	bl	8001a40 <compensate_pressure>
 8001466:	eeb0 7a40 	vmov.f32	s14, s0
 800146a:	eef0 7a60 	vmov.f32	s15, s1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed83 7b00 	vstr	d7, [r3]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <bme280_compensate_data+0xb6>
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fcad 	bl	8001de0 <compensate_humidity>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b04 	vstr	d7, [r3, #16]
 8001494:	e001      	b.n	800149a <bme280_compensate_data+0xb6>
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	75fb      	strb	r3, [r7, #23]
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <set_osr_settings>:
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	2301      	movs	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <set_osr_settings+0x28>
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 f815 	bl	80014f4 <set_osr_humidity_settings>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <set_osr_settings+0x42>
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f842 	bl	8001568 <set_osr_press_temp_settings>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]
 80014e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <set_osr_humidity_settings>:
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	23f2      	movs	r3, #242	; 0xf2
 8001500:	733b      	strb	r3, [r7, #12]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73bb      	strb	r3, [r7, #14]
 800150e:	f107 010e 	add.w	r1, r7, #14
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	f7ff fd8c 	bl	8001036 <bme280_set_regs>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <set_osr_humidity_settings+0x68>
 800152a:	23f4      	movs	r3, #244	; 0xf4
 800152c:	733b      	strb	r3, [r7, #12]
 800152e:	7b38      	ldrb	r0, [r7, #12]
 8001530:	f107 010d 	add.w	r1, r7, #13
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	f7ff fd4d 	bl	8000fd6 <bme280_get_regs>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <set_osr_humidity_settings+0x68>
 8001548:	f107 010d 	add.w	r1, r7, #13
 800154c:	f107 000c 	add.w	r0, r7, #12
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	f7ff fd6f 	bl	8001036 <bme280_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <set_osr_press_temp_settings>:
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	23f4      	movs	r3, #244	; 0xf4
 8001578:	75bb      	strb	r3, [r7, #22]
 800157a:	7db8      	ldrb	r0, [r7, #22]
 800157c:	f107 0115 	add.w	r1, r7, #21
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff fd27 	bl	8000fd6 <bme280_get_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]
 800158c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11f      	bne.n	80015d4 <set_osr_press_temp_settings+0x6c>
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <set_osr_press_temp_settings+0x42>
 800159e:	f107 0315 	add.w	r3, r7, #21
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f88e 	bl	80016c6 <fill_osr_press_settings>
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <set_osr_press_temp_settings+0x58>
 80015b4:	f107 0315 	add.w	r3, r7, #21
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8a0 	bl	8001700 <fill_osr_temp_settings>
 80015c0:	f107 0115 	add.w	r1, r7, #21
 80015c4:	f107 0016 	add.w	r0, r7, #22
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd33 	bl	8001036 <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]
 80015d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_filter_standby_settings>:
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	23f5      	movs	r3, #245	; 0xf5
 80015f0:	75bb      	strb	r3, [r7, #22]
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fceb 	bl	8000fd6 <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_filter_standby_settings+0x6c>
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_filter_standby_settings+0x42>
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f81b 	bl	8001658 <fill_filter_settings>
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_filter_standby_settings+0x58>
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f82d 	bl	8001692 <fill_standby_settings>
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fcf7 	bl	8001036 <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <fill_filter_settings>:
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 031c 	bic.w	r3, r3, #28
 800166c:	b25a      	sxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 031c 	and.w	r3, r3, #28
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <fill_standby_settings>:
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <fill_osr_press_settings>:
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f023 031c 	bic.w	r3, r3, #28
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <fill_osr_temp_settings>:
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <parse_device_settings>:
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	b2da      	uxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	709a      	strb	r2, [r3, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	109b      	asrs	r3, r3, #2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	705a      	strb	r2, [r3, #1]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3303      	adds	r3, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	109b      	asrs	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	70da      	strb	r2, [r3, #3]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2da      	uxtb	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	711a      	strb	r2, [r3, #4]
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <write_power_mode>:
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	23f4      	movs	r3, #244	; 0xf4
 80017aa:	73bb      	strb	r3, [r7, #14]
 80017ac:	7bb8      	ldrb	r0, [r7, #14]
 80017ae:	f107 010d 	add.w	r1, r7, #13
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f7ff fc0e 	bl	8000fd6 <bme280_get_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d117      	bne.n	80017f6 <write_power_mode+0x5a>
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	737b      	strb	r3, [r7, #13]
 80017e2:	f107 010d 	add.w	r1, r7, #13
 80017e6:	f107 000e 	add.w	r0, r7, #14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f7ff fc22 	bl	8001036 <bme280_set_regs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <put_device_to_sleep>:
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	f107 0110 	add.w	r1, r7, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fbdf 	bl	8000fd6 <bme280_get_regs>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <put_device_to_sleep+0x54>
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <parse_device_settings>
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd21 	bl	800127c <bme280_soft_reset>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <put_device_to_sleep+0x54>
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f808 	bl	8001862 <reload_device_settings>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
 8001856:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <reload_device_settings>:
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	201f      	movs	r0, #31
 8001872:	f7ff fe18 	bl	80014a6 <set_osr_settings>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <reload_device_settings+0x2e>
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	201f      	movs	r0, #31
 8001888:	f7ff feaa 	bl	80015e0 <set_filter_standby_settings>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <compensate_temperature>:
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <compensate_temperature+0x18c>)
 80018ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <compensate_temperature+0x190>)
 80018b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe20 	bl	8000504 <__aeabi_ui2d>
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <compensate_temperature+0x194>)
 80018ca:	f7fe ffbf 	bl	800084c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe12 	bl	8000504 <__aeabi_ui2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <compensate_temperature+0x198>)
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fcc9 	bl	8000288 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe0d 	bl	8000524 <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001912:	f7fe fe71 	bl	80005f8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdee 	bl	8000504 <__aeabi_ui2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001930:	f7fe ff8c 	bl	800084c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fddf 	bl	8000504 <__aeabi_ui2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <compensate_temperature+0x19c>)
 800194c:	f7fe ff7e 	bl	800084c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd0 	bl	8000524 <__aeabi_i2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fe34 	bl	80005f8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800199c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a0:	f7fe fc74 	bl	800028c <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8d4 	bl	8000b58 <__aeabi_d2iz>
 80019b0:	4602      	mov	r2, r0
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <compensate_temperature+0x1a0>)
 80019d0:	f7fe ff3c 	bl	800084c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e4:	f7ff f87a 	bl	8000adc <__aeabi_dcmplt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <compensate_temperature+0x15c>
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019f6:	e00c      	b.n	8001a12 <compensate_temperature+0x176>
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a00:	f7ff f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <compensate_temperature+0x176>
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	c0440000 	.word	0xc0440000
 8001a2c:	40554000 	.word	0x40554000
 8001a30:	40d00000 	.word	0x40d00000
 8001a34:	40900000 	.word	0x40900000
 8001a38:	40c00000 	.word	0x40c00000
 8001a3c:	40b40000 	.word	0x40b40000

08001a40 <compensate_pressure>:
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001db0 <compensate_pressure+0x370>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a54:	a3d8      	add	r3, pc, #864	; (adr r3, 8001db8 <compensate_pressure+0x378>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4bc1      	ldr	r3, [pc, #772]	; (8001d88 <compensate_pressure+0x348>)
 8001a82:	f7fe fc01 	bl	8000288 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a96:	f7fe fdaf 	bl	80005f8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4bb1      	ldr	r3, [pc, #708]	; (8001d8c <compensate_pressure+0x34c>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd22 	bl	8000524 <__aeabi_i2d>
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f7fe fbca 	bl	800028c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b00:	f7fe fbc4 	bl	800028c <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <compensate_pressure+0x350>)
 8001b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcfb 	bl	8000524 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <compensate_pressure+0x354>)
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <compensate_pressure+0x358>)
 8001b7e:	f7fe fe65 	bl	800084c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	f7fe fb6f 	bl	800028c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <compensate_pressure+0x358>)
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <compensate_pressure+0x34c>)
 8001bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bd2:	f7fe fe3b 	bl	800084c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <compensate_pressure+0x35c>)
 8001be4:	f7fe fb52 	bl	800028c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc85 	bl	8000504 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fcf9 	bl	80005f8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1a:	f7fe ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80cd 	bne.w	8001dc0 <compensate_pressure+0x380>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc6a 	bl	8000504 <__aeabi_ui2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <compensate_pressure+0x360>)
 8001c3a:	f7fe fb25 	bl	8000288 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <compensate_pressure+0x364>)
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	a345      	add	r3, pc, #276	; (adr r3, 8001d80 <compensate_pressure+0x340>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c9a:	f7fe fcad 	bl	80005f8 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <compensate_pressure+0x368>)
 8001cbc:	f7fe fdc6 	bl	800084c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_i2d>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <compensate_pressure+0x34c>)
 8001cea:	f7fe fdaf 	bl	800084c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc07 	bl	8000524 <__aeabi_i2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fab5 	bl	800028c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <compensate_pressure+0x36c>)
 8001d30:	f7fe fd8c 	bl	800084c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d3c:	f7fe faa6 	bl	800028c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d50:	f7fe fec4 	bl	8000adc <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <compensate_pressure+0x324>
 8001d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d62:	e031      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d6c:	f7fe fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <compensate_pressure+0x388>
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7e:	e023      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40b86a00 	.word	0x40b86a00
 8001d88:	40ef4000 	.word	0x40ef4000
 8001d8c:	40e00000 	.word	0x40e00000
 8001d90:	40100000 	.word	0x40100000
 8001d94:	40f00000 	.word	0x40f00000
 8001d98:	41200000 	.word	0x41200000
 8001d9c:	3ff00000 	.word	0x3ff00000
 8001da0:	41300000 	.word	0x41300000
 8001da4:	40b00000 	.word	0x40b00000
 8001da8:	41e00000 	.word	0x41e00000
 8001dac:	40300000 	.word	0x40300000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40dd4c00 	.word	0x40dd4c00
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40fadb00 	.word	0x40fadb00
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dcc:	ec43 2b17 	vmov	d7, r2, r3
 8001dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd4:	eef0 0a67 	vmov.f32	s1, s15
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	bf00      	nop

08001de0 <compensate_humidity>:
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <compensate_humidity+0x220>)
 8001dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <compensate_humidity+0x224>)
 8001e10:	f7fe fa3a 	bl	8000288 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <compensate_humidity+0x228>)
 8001e2e:	f7fe fbe3 	bl	80005f8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	461d      	mov	r5, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <compensate_humidity+0x22c>)
 8001e4c:	f7fe fcfe 	bl	800084c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa10 	bl	800028c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb43 	bl	8000504 <__aeabi_ui2d>
 8001e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <compensate_humidity+0x230>)
 8001ea0:	f7fe fcd4 	bl	800084c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb27 	bl	8000504 <__aeabi_ui2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <compensate_humidity+0x234>)
 8001ebc:	f7fe fcc6 	bl	800084c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	f7fe fb94 	bl	80005f8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <compensate_humidity+0x238>)
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb17 	bl	8000524 <__aeabi_i2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <compensate_humidity+0x234>)
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <compensate_humidity+0x238>)
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <compensate_humidity+0x23c>)
 8001f8e:	f7fe fc5d 	bl	800084c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <compensate_humidity+0x238>)
 8001f9c:	f7fe f974 	bl	8000288 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa8:	f7fe fb26 	bl	80005f8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fbc:	f7fe fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <compensate_humidity+0x1f0>
 8001fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fce:	e00c      	b.n	8001fea <compensate_humidity+0x20a>
 8001fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd8:	f7fe fd80 	bl	8000adc <__aeabi_dcmplt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <compensate_humidity+0x20a>
 8001fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40590000 	.word	0x40590000
 8002004:	40f2c000 	.word	0x40f2c000
 8002008:	40500000 	.word	0x40500000
 800200c:	40d00000 	.word	0x40d00000
 8002010:	40f00000 	.word	0x40f00000
 8002014:	41900000 	.word	0x41900000
 8002018:	3ff00000 	.word	0x3ff00000
 800201c:	41200000 	.word	0x41200000

08002020 <get_calib_data>:
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	2388      	movs	r3, #136	; 0x88
 800202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	829a      	strh	r2, [r3, #20]
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	221a      	movs	r2, #26
 8002050:	f7fe ffc1 	bl	8000fd6 <bme280_get_regs>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800205a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <get_calib_data+0x7e>
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f84a 	bl	8002102 <parse_temp_press_calib_data>
 800206e:	23e1      	movs	r3, #225	; 0xe1
 8002070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002074:	f107 010c 	add.w	r1, r7, #12
 8002078:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2207      	movs	r2, #7
 8002080:	f7fe ffa9 	bl	8000fd6 <bme280_get_regs>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800208a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <get_calib_data+0x7e>
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f8e1 	bl	8002260 <parse_humidity_calib_data>
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <interleave_reg_addr>:
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	70fb      	strb	r3, [r7, #3]
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
 80020bc:	e016      	b.n	80020ec <interleave_reg_addr+0x42>
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	441a      	add	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	440b      	add	r3, r1
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	441a      	add	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3301      	adds	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e4      	bcc.n	80020be <interleave_reg_addr+0x14>
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <parse_temp_press_calib_data>:
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3310      	adds	r3, #16
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	805a      	strh	r2, [r3, #2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3305      	adds	r3, #5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21a      	sxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	809a      	strh	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3307      	adds	r3, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	80da      	strh	r2, [r3, #6]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3309      	adds	r3, #9
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	811a      	strh	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330b      	adds	r3, #11
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	330a      	adds	r3, #10
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	815a      	strh	r2, [r3, #10]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330d      	adds	r3, #13
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330c      	adds	r3, #12
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	819a      	strh	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330f      	adds	r3, #15
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330e      	adds	r3, #14
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21a      	sxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	81da      	strh	r2, [r3, #14]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3311      	adds	r3, #17
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3310      	adds	r3, #16
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	821a      	strh	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3313      	adds	r3, #19
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3312      	adds	r3, #18
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21a      	sxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	825a      	strh	r2, [r3, #18]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3315      	adds	r3, #21
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3314      	adds	r3, #20
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21a      	sxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	829a      	strh	r2, [r3, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3317      	adds	r3, #23
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3316      	adds	r3, #22
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	82da      	strh	r2, [r3, #22]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e5a      	ldrb	r2, [r3, #25]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	761a      	strb	r2, [r3, #24]
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <parse_humidity_calib_data>:
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3310      	adds	r3, #16
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	835a      	strh	r2, [r3, #26]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789a      	ldrb	r2, [r3, #2]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	771a      	strb	r2, [r3, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	b29b      	uxth	r3, r3
 800229e:	827b      	strh	r3, [r7, #18]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	823b      	strh	r3, [r7, #16]
 80022ae:	8a7a      	ldrh	r2, [r7, #18]
 80022b0:	8a3b      	ldrh	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	83da      	strh	r2, [r3, #30]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3305      	adds	r3, #5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	81fb      	strh	r3, [r7, #14]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	81bb      	strh	r3, [r7, #12]
 80022d6:	89fa      	ldrh	r2, [r7, #14]
 80022d8:	89bb      	ldrh	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21a      	sxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	841a      	strh	r2, [r3, #32]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3306      	adds	r3, #6
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <are_settings_changed>:
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <are_settings_changed+0x26>
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e001      	b.n	8002326 <are_settings_changed+0x2a>
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <null_ptr_check>:
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <null_ptr_check+0x26>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <null_ptr_check+0x26>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <null_ptr_check+0x26>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <null_ptr_check+0x2c>
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e001      	b.n	8002364 <null_ptr_check+0x30>
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af02      	add	r7, sp, #8
 800237a:	603a      	str	r2, [r7, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
 8002382:	460b      	mov	r3, r1
 8002384:	71bb      	strb	r3, [r7, #6]
 8002386:	4613      	mov	r3, r2
 8002388:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	b29b      	uxth	r3, r3
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	b299      	uxth	r1, r3
 8002392:	1dba      	adds	r2, r7, #6
 8002394:	230a      	movs	r3, #10
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	4811      	ldr	r0, [pc, #68]	; (80023e0 <user_i2c_read+0x6c>)
 800239c:	f001 ffe8 	bl	8004370 <HAL_I2C_Master_Transmit>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <user_i2c_read+0x38>
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023aa:	e014      	b.n	80023d6 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	b299      	uxth	r1, r3
 80023ba:	88bb      	ldrh	r3, [r7, #4]
 80023bc:	220a      	movs	r2, #10
 80023be:	9200      	str	r2, [sp, #0]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4807      	ldr	r0, [pc, #28]	; (80023e0 <user_i2c_read+0x6c>)
 80023c4:	f002 f8d2 	bl	800456c <HAL_I2C_Master_Receive>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <user_i2c_read+0x60>
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d2:	e000      	b.n	80023d6 <user_i2c_read+0x62>

  return 0;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000547c 	.word	0x2000547c

080023e4 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 fbbf 	bl	8003b70 <HAL_Delay>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	603a      	str	r2, [r7, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	460b      	mov	r3, r1
 800240c:	71bb      	strb	r3, [r7, #6]
 800240e:	4613      	mov	r3, r2
 8002410:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8002412:	88bb      	ldrh	r3, [r7, #4]
 8002414:	3301      	adds	r3, #1
 8002416:	4618      	mov	r0, r3
 8002418:	f00c fd3a 	bl	800ee90 <malloc>
 800241c:	4603      	mov	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002420:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3301      	adds	r3, #1
 800242c:	88ba      	ldrh	r2, [r7, #4]
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f00c fd3d 	bl	800eeb0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	b29b      	uxth	r3, r3
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	b299      	uxth	r1, r3
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	3301      	adds	r3, #1
 8002442:	b29b      	uxth	r3, r3
 8002444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002448:	9200      	str	r2, [sp, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4808      	ldr	r0, [pc, #32]	; (8002470 <user_i2c_write+0x74>)
 800244e:	f001 ff8f 	bl	8004370 <HAL_I2C_Master_Transmit>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <user_i2c_write+0x62>
 8002458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245c:	e003      	b.n	8002466 <user_i2c_write+0x6a>

  free(buf);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f00c fd1e 	bl	800eea0 <free>
  return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000547c 	.word	0x2000547c

08002474 <delay_us>:
//
//}


bool delay_us(uint16_t us)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <delay_us+0x50>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <delay_us+0x54>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <delay_us+0x58>)
 8002496:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8002498:	480a      	ldr	r0, [pc, #40]	; (80024c4 <delay_us+0x50>)
 800249a:	f004 ff41 	bl	8007320 <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 800249e:	bf00      	nop
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <delay_us+0x58>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1fb      	bne.n	80024a0 <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <delay_us+0x50>)
 80024aa:	f004 ffa9 	bl	8007400 <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <delay_us+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
	int s = 99;
 80024b4:	2363      	movs	r3, #99	; 0x63
 80024b6:	60fb      	str	r3, [r7, #12]
	return true;
 80024b8:	2301      	movs	r3, #1
//	{
//
//	}
//	//HAL_TIM_Base_Stop_IT(&htim10);
//	return true;
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20006540 	.word	0x20006540
 80024c8:	cccccccd 	.word	0xcccccccd
 80024cc:	20000760 	.word	0x20000760

080024d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d4:	f001 fb0a 	bl	8003aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d8:	f000 f87a 	bl	80025d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024dc:	f000 f9cc 	bl	8002878 <MX_GPIO_Init>
  MX_TIM3_Init();
 80024e0:	f000 f95a 	bl	8002798 <MX_TIM3_Init>
  MX_I2C3_Init();
 80024e4:	f000 f8de 	bl	80026a4 <MX_I2C3_Init>
  MX_TIM2_Init();
 80024e8:	f000 f90a 	bl	8002700 <MX_TIM2_Init>
  MX_TIM10_Init();
 80024ec:	f000 f9a2 	bl	8002834 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 80024f0:	4821      	ldr	r0, [pc, #132]	; (8002578 <main+0xa8>)
 80024f2:	f004 ff15 	bl	8007320 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim10);
 80024f6:	4821      	ldr	r0, [pc, #132]	; (800257c <main+0xac>)
 80024f8:	f004 ff12 	bl	8007320 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024fc:	f008 fbbe 	bl	800ac7c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <main+0xb0>)
 8002502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002506:	200a      	movs	r0, #10
 8002508:	f008 fcaf 	bl	800ae6a <osMessageQueueNew>
 800250c:	4603      	mov	r3, r0
 800250e:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <main+0xb4>)
 8002510:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002512:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <main+0xb8>)
 8002514:	2100      	movs	r1, #0
 8002516:	481d      	ldr	r0, [pc, #116]	; (800258c <main+0xbc>)
 8002518:	f008 fbfa 	bl	800ad10 <osThreadNew>
 800251c:	4603      	mov	r3, r0
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <main+0xc0>)
 8002520:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <main+0xc4>)
 8002524:	2100      	movs	r1, #0
 8002526:	481c      	ldr	r0, [pc, #112]	; (8002598 <main+0xc8>)
 8002528:	f008 fbf2 	bl	800ad10 <osThreadNew>
 800252c:	4603      	mov	r3, r0
 800252e:	4a1b      	ldr	r2, [pc, #108]	; (800259c <main+0xcc>)
 8002530:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <main+0xd0>)
 8002534:	2100      	movs	r1, #0
 8002536:	481b      	ldr	r0, [pc, #108]	; (80025a4 <main+0xd4>)
 8002538:	f008 fbea 	bl	800ad10 <osThreadNew>
 800253c:	4603      	mov	r3, r0
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <main+0xd8>)
 8002540:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8002542:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <main+0xdc>)
 8002544:	2100      	movs	r1, #0
 8002546:	481a      	ldr	r0, [pc, #104]	; (80025b0 <main+0xe0>)
 8002548:	f008 fbe2 	bl	800ad10 <osThreadNew>
 800254c:	4603      	mov	r3, r0
 800254e:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <main+0xe4>)
 8002550:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <main+0xe8>)
 8002554:	2100      	movs	r1, #0
 8002556:	4819      	ldr	r0, [pc, #100]	; (80025bc <main+0xec>)
 8002558:	f008 fbda 	bl	800ad10 <osThreadNew>
 800255c:	4603      	mov	r3, r0
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <main+0xf0>)
 8002560:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <main+0xf4>)
 8002564:	2100      	movs	r1, #0
 8002566:	4818      	ldr	r0, [pc, #96]	; (80025c8 <main+0xf8>)
 8002568:	f008 fbd2 	bl	800ad10 <osThreadNew>
 800256c:	4603      	mov	r3, r0
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <main+0xfc>)
 8002570:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002572:	f008 fba7 	bl	800acc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002576:	e7fe      	b.n	8002576 <main+0xa6>
 8002578:	2000a10c 	.word	0x2000a10c
 800257c:	20006540 	.word	0x20006540
 8002580:	08011e88 	.word	0x08011e88
 8002584:	20007708 	.word	0x20007708
 8002588:	08011db0 	.word	0x08011db0
 800258c:	08002b01 	.word	0x08002b01
 8002590:	20005438 	.word	0x20005438
 8002594:	08011dd4 	.word	0x08011dd4
 8002598:	08002b15 	.word	0x08002b15
 800259c:	20006520 	.word	0x20006520
 80025a0:	08011df8 	.word	0x08011df8
 80025a4:	08002b49 	.word	0x08002b49
 80025a8:	2000b420 	.word	0x2000b420
 80025ac:	08011e1c 	.word	0x08011e1c
 80025b0:	08002db9 	.word	0x08002db9
 80025b4:	2000a154 	.word	0x2000a154
 80025b8:	08011e40 	.word	0x08011e40
 80025bc:	08002e15 	.word	0x08002e15
 80025c0:	2000c5ec 	.word	0x2000c5ec
 80025c4:	08011e64 	.word	0x08011e64
 80025c8:	0800318d 	.word	0x0800318d
 80025cc:	2000b41c 	.word	0x2000b41c

080025d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b094      	sub	sp, #80	; 0x50
 80025d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d6:	f107 0320 	add.w	r3, r7, #32
 80025da:	2230      	movs	r2, #48	; 0x30
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f00c fc74 	bl	800eecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <SystemClock_Config+0xcc>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4a27      	ldr	r2, [pc, #156]	; (800269c <SystemClock_Config+0xcc>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002602:	6413      	str	r3, [r2, #64]	; 0x40
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <SystemClock_Config+0xcc>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	2300      	movs	r3, #0
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <SystemClock_Config+0xd0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <SystemClock_Config+0xd0>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <SystemClock_Config+0xd0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800262c:	2301      	movs	r3, #1
 800262e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002636:	2302      	movs	r3, #2
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800263a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800263e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002640:	2308      	movs	r3, #8
 8002642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002644:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800264a:	2302      	movs	r3, #2
 800264c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800264e:	2307      	movs	r3, #7
 8002650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002652:	f107 0320 	add.w	r3, r7, #32
 8002656:	4618      	mov	r0, r3
 8002658:	f004 f96c 	bl	8006934 <HAL_RCC_OscConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002662:	f000 ffa7 	bl	80035b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002666:	230f      	movs	r3, #15
 8002668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266a:	2302      	movs	r3, #2
 800266c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	2105      	movs	r1, #5
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fbcd 	bl	8006e24 <HAL_RCC_ClockConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002690:	f000 ff90 	bl	80035b4 <Error_Handler>
  }
}
 8002694:	bf00      	nop
 8002696:	3750      	adds	r7, #80	; 0x50
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	40007000 	.word	0x40007000

080026a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026aa:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <MX_I2C3_Init+0x54>)
 80026ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <MX_I2C3_Init+0x58>)
 80026b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <MX_I2C3_Init+0x50>)
 80026e2:	f001 fd01 	bl	80040e8 <HAL_I2C_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80026ec:	f000 ff62 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	2000547c 	.word	0x2000547c
 80026f8:	40005c00 	.word	0x40005c00
 80026fc:	000186a0 	.word	0x000186a0

08002700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	463b      	mov	r3, r7
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <MX_TIM2_Init+0x94>)
 800271e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <MX_TIM2_Init+0x94>)
 8002726:	220a      	movs	r2, #10
 8002728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <MX_TIM2_Init+0x94>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <MX_TIM2_Init+0x94>)
 8002732:	220a      	movs	r2, #10
 8002734:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <MX_TIM2_Init+0x94>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_TIM2_Init+0x94>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002742:	4814      	ldr	r0, [pc, #80]	; (8002794 <MX_TIM2_Init+0x94>)
 8002744:	f004 fd9c 	bl	8007280 <HAL_TIM_Base_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800274e:	f000 ff31 	bl	80035b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002758:	f107 0308 	add.w	r3, r7, #8
 800275c:	4619      	mov	r1, r3
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <MX_TIM2_Init+0x94>)
 8002760:	f004 ff85 	bl	800766e <HAL_TIM_ConfigClockSource>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800276a:	f000 ff23 	bl	80035b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002776:	463b      	mov	r3, r7
 8002778:	4619      	mov	r1, r3
 800277a:	4806      	ldr	r0, [pc, #24]	; (8002794 <MX_TIM2_Init+0x94>)
 800277c:	f005 f9a0 	bl	8007ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002786:	f000 ff15 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2000b4e4 	.word	0x2000b4e4

08002798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	463b      	mov	r3, r7
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <MX_TIM3_Init+0x94>)
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <MX_TIM3_Init+0x98>)
 80027b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <MX_TIM3_Init+0x94>)
 80027bc:	f240 3247 	movw	r2, #839	; 0x347
 80027c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <MX_TIM3_Init+0x94>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <MX_TIM3_Init+0x94>)
 80027ca:	220a      	movs	r2, #10
 80027cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <MX_TIM3_Init+0x94>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027d4:	4b15      	ldr	r3, [pc, #84]	; (800282c <MX_TIM3_Init+0x94>)
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027da:	4814      	ldr	r0, [pc, #80]	; (800282c <MX_TIM3_Init+0x94>)
 80027dc:	f004 fd50 	bl	8007280 <HAL_TIM_Base_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80027e6:	f000 fee5 	bl	80035b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	4619      	mov	r1, r3
 80027f6:	480d      	ldr	r0, [pc, #52]	; (800282c <MX_TIM3_Init+0x94>)
 80027f8:	f004 ff39 	bl	800766e <HAL_TIM_ConfigClockSource>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002802:	f000 fed7 	bl	80035b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800280e:	463b      	mov	r3, r7
 8002810:	4619      	mov	r1, r3
 8002812:	4806      	ldr	r0, [pc, #24]	; (800282c <MX_TIM3_Init+0x94>)
 8002814:	f005 f954 	bl	8007ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800281e:	f000 fec9 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000a10c 	.word	0x2000a10c
 8002830:	40000400 	.word	0x40000400

08002834 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <MX_TIM10_Init+0x3c>)
 800283a:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <MX_TIM10_Init+0x40>)
 800283c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <MX_TIM10_Init+0x3c>)
 8002840:	22a7      	movs	r2, #167	; 0xa7
 8002842:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <MX_TIM10_Init+0x3c>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <MX_TIM10_Init+0x3c>)
 800284c:	2209      	movs	r2, #9
 800284e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <MX_TIM10_Init+0x3c>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <MX_TIM10_Init+0x3c>)
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800285c:	4804      	ldr	r0, [pc, #16]	; (8002870 <MX_TIM10_Init+0x3c>)
 800285e:	f004 fd0f 	bl	8007280 <HAL_TIM_Base_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002868:	f000 fea4 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20006540 	.word	0x20006540
 8002874:	40014400 	.word	0x40014400

08002878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	; 0x30
 800287c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	4b95      	ldr	r3, [pc, #596]	; (8002ae8 <MX_GPIO_Init+0x270>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a94      	ldr	r2, [pc, #592]	; (8002ae8 <MX_GPIO_Init+0x270>)
 8002898:	f043 0310 	orr.w	r3, r3, #16
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b92      	ldr	r3, [pc, #584]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	4b8e      	ldr	r3, [pc, #568]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a8d      	ldr	r2, [pc, #564]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b8b      	ldr	r3, [pc, #556]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	4b87      	ldr	r3, [pc, #540]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a86      	ldr	r2, [pc, #536]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b84      	ldr	r3, [pc, #528]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b80      	ldr	r3, [pc, #512]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a7f      	ldr	r2, [pc, #508]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <MX_GPIO_Init+0x270>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	4b79      	ldr	r3, [pc, #484]	; (8002ae8 <MX_GPIO_Init+0x270>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a78      	ldr	r2, [pc, #480]	; (8002ae8 <MX_GPIO_Init+0x270>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <MX_GPIO_Init+0x270>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	4b72      	ldr	r3, [pc, #456]	; (8002ae8 <MX_GPIO_Init+0x270>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a71      	ldr	r2, [pc, #452]	; (8002ae8 <MX_GPIO_Init+0x270>)
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b6f      	ldr	r3, [pc, #444]	; (8002ae8 <MX_GPIO_Init+0x270>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	2108      	movs	r1, #8
 800293a:	486c      	ldr	r0, [pc, #432]	; (8002aec <MX_GPIO_Init+0x274>)
 800293c:	f001 fbba 	bl	80040b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002940:	2201      	movs	r2, #1
 8002942:	2101      	movs	r1, #1
 8002944:	486a      	ldr	r0, [pc, #424]	; (8002af0 <MX_GPIO_Init+0x278>)
 8002946:	f001 fbb5 	bl	80040b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AM2302_GPIO_Port, AM2302_Pin, GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	2102      	movs	r1, #2
 800294e:	4868      	ldr	r0, [pc, #416]	; (8002af0 <MX_GPIO_Init+0x278>)
 8002950:	f001 fbb0 	bl	80040b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002954:	2200      	movs	r2, #0
 8002956:	f24f 0110 	movw	r1, #61456	; 0xf010
 800295a:	4866      	ldr	r0, [pc, #408]	; (8002af4 <MX_GPIO_Init+0x27c>)
 800295c:	f001 fbaa 	bl	80040b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002960:	2308      	movs	r3, #8
 8002962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	2301      	movs	r3, #1
 8002966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002970:	f107 031c 	add.w	r3, r7, #28
 8002974:	4619      	mov	r1, r3
 8002976:	485d      	ldr	r0, [pc, #372]	; (8002aec <MX_GPIO_Init+0x274>)
 8002978:	f001 fa00 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 800297c:	2303      	movs	r3, #3
 800297e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002980:	2301      	movs	r3, #1
 8002982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4619      	mov	r1, r3
 8002992:	4857      	ldr	r0, [pc, #348]	; (8002af0 <MX_GPIO_Init+0x278>)
 8002994:	f001 f9f2 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002998:	2308      	movs	r3, #8
 800299a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029a8:	2305      	movs	r3, #5
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	484f      	ldr	r0, [pc, #316]	; (8002af0 <MX_GPIO_Init+0x278>)
 80029b4:	f001 f9e2 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029b8:	2301      	movs	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80029c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	4619      	mov	r1, r3
 80029cc:	484a      	ldr	r0, [pc, #296]	; (8002af8 <MX_GPIO_Init+0x280>)
 80029ce:	f001 f9d5 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80029d2:	2310      	movs	r3, #16
 80029d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029e2:	2306      	movs	r3, #6
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	4842      	ldr	r0, [pc, #264]	; (8002af8 <MX_GPIO_Init+0x280>)
 80029ee:	f001 f9c5 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80029f2:	23e0      	movs	r3, #224	; 0xe0
 80029f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a02:	2305      	movs	r3, #5
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 031c 	add.w	r3, r7, #28
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	483a      	ldr	r0, [pc, #232]	; (8002af8 <MX_GPIO_Init+0x280>)
 8002a0e:	f001 f9b5 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a12:	2304      	movs	r3, #4
 8002a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	4835      	ldr	r0, [pc, #212]	; (8002afc <MX_GPIO_Init+0x284>)
 8002a26:	f001 f9a9 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a3c:	2305      	movs	r3, #5
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	482d      	ldr	r0, [pc, #180]	; (8002afc <MX_GPIO_Init+0x284>)
 8002a48:	f001 f998 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002a4c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002a50:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5e:	f107 031c 	add.w	r3, r7, #28
 8002a62:	4619      	mov	r1, r3
 8002a64:	4823      	ldr	r0, [pc, #140]	; (8002af4 <MX_GPIO_Init+0x27c>)
 8002a66:	f001 f989 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002a6a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a7c:	2306      	movs	r3, #6
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	481a      	ldr	r0, [pc, #104]	; (8002af0 <MX_GPIO_Init+0x278>)
 8002a88:	f001 f978 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4815      	ldr	r0, [pc, #84]	; (8002af4 <MX_GPIO_Init+0x27c>)
 8002aa0:	f001 f96c 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002aa4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aaa:	2312      	movs	r3, #18
 8002aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	480e      	ldr	r0, [pc, #56]	; (8002afc <MX_GPIO_Init+0x284>)
 8002ac2:	f001 f95b 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002aca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002ad4:	f107 031c 	add.w	r3, r7, #28
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4804      	ldr	r0, [pc, #16]	; (8002aec <MX_GPIO_Init+0x274>)
 8002adc:	f001 f94e 	bl	8003d7c <HAL_GPIO_Init>

}
 8002ae0:	bf00      	nop
 8002ae2:	3730      	adds	r7, #48	; 0x30
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40020800 	.word	0x40020800
 8002af4:	40020c00 	.word	0x40020c00
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400

08002b00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002b08:	f00b fb5c 	bl	800e1c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f008 f991 	bl	800ae34 <osDelay>
 8002b12:	e7fb      	b.n	8002b0c <StartDefaultTask+0xc>

08002b14 <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Blue_LED_Blink */
  /* Infinite loop */
	static uint8_t i = 1;
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b22:	4808      	ldr	r0, [pc, #32]	; (8002b44 <Start_Blue_LED_Blink+0x30>)
 8002b24:	f001 fac6 	bl	80040b4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b28:	2064      	movs	r0, #100	; 0x64
 8002b2a:	f008 f983 	bl	800ae34 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b34:	4803      	ldr	r0, [pc, #12]	; (8002b44 <Start_Blue_LED_Blink+0x30>)
 8002b36:	f001 fabd 	bl	80040b4 <HAL_GPIO_WritePin>
		osDelay(900);
 8002b3a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002b3e:	f008 f979 	bl	800ae34 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8002b42:	e7eb      	b.n	8002b1c <Start_Blue_LED_Blink+0x8>
 8002b44:	40020c00 	.word	0x40020c00

08002b48 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8002b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4a:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8002b54:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b58:	f008 f96c 	bl	800ae34 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8002b5c:	4a8d      	ldr	r2, [pc, #564]	; (8002d94 <Start_Show_Resources+0x24c>)
 8002b5e:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4611      	mov	r1, r2
 8002b66:	8019      	strh	r1, [r3, #0]
 8002b68:	3302      	adds	r3, #2
 8002b6a:	0c12      	lsrs	r2, r2, #16
 8002b6c:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8002b6e:	232d      	movs	r3, #45	; 0x2d
 8002b70:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8002b7a:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8002b84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f00c f99c 	bl	800eecc <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8002b94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fb19 	bl	80001d0 <strlen>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a7b      	ldr	r2, [pc, #492]	; (8002d98 <Start_Show_Resources+0x250>)
 8002baa:	461d      	mov	r5, r3
 8002bac:	4614      	mov	r4, r2
 8002bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb0:	6028      	str	r0, [r5, #0]
 8002bb2:	6069      	str	r1, [r5, #4]
 8002bb4:	60aa      	str	r2, [r5, #8]
 8002bb6:	60eb      	str	r3, [r5, #12]
 8002bb8:	cc03      	ldmia	r4!, {r0, r1}
 8002bba:	6128      	str	r0, [r5, #16]
 8002bbc:	6169      	str	r1, [r5, #20]
 8002bbe:	7823      	ldrb	r3, [r4, #0]
 8002bc0:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8002bc2:	f00b fa37 	bl	800e034 <xPortGetFreeHeapSize>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b74      	ldr	r3, [pc, #464]	; (8002d9c <Start_Show_Resources+0x254>)
 8002bcc:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8002bce:	4b73      	ldr	r3, [pc, #460]	; (8002d9c <Start_Show_Resources+0x254>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f00c f953 	bl	800ee84 <itoa>
	  strcat(msg.Buf, buff);
 8002bde:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002be2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f00c ff68 	bl	800fabe <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8002bee:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8002bf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f00c ff60 	bl	800fabe <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8002bfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fae4 	bl	80001d0 <strlen>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c10:	4413      	add	r3, r2
 8002c12:	4a63      	ldr	r2, [pc, #396]	; (8002da0 <Start_Show_Resources+0x258>)
 8002c14:	4618      	mov	r0, r3
 8002c16:	4611      	mov	r1, r2
 8002c18:	2341      	movs	r3, #65	; 0x41
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f00c f948 	bl	800eeb0 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002c20:	4860      	ldr	r0, [pc, #384]	; (8002da4 <Start_Show_Resources+0x25c>)
 8002c22:	f00a f9cb 	bl	800cfbc <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8002c2c:	e004      	b.n	8002c38 <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8002c2e:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002c32:	3301      	adds	r3, #1
 8002c34:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8002c38:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002c3c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002c40:	5cd3      	ldrb	r3, [r2, r3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f3      	bne.n	8002c2e <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002c52:	e011      	b.n	8002c78 <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002c54:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8002c58:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002c5c:	4413      	add	r3, r2
 8002c5e:	4951      	ldr	r1, [pc, #324]	; (8002da4 <Start_Show_Resources+0x25c>)
 8002c60:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8002c64:	440a      	add	r2, r1
 8002c66:	7811      	ldrb	r1, [r2, #0]
 8002c68:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002c6c:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002c6e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002c72:	3301      	adds	r3, #1
 8002c74:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002c78:	4a4a      	ldr	r2, [pc, #296]	; (8002da4 <Start_Show_Resources+0x25c>)
 8002c7a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e6      	bne.n	8002c54 <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8002c86:	4b48      	ldr	r3, [pc, #288]	; (8002da8 <Start_Show_Resources+0x260>)
 8002c88:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8002c8c:	461d      	mov	r5, r3
 8002c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c96:	c403      	stmia	r4!, {r0, r1}
 8002c98:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	4a43      	ldr	r2, [pc, #268]	; (8002dac <Start_Show_Resources+0x264>)
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	4615      	mov	r5, r2
 8002ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cb4:	c407      	stmia	r4!, {r0, r1, r2}
 8002cb6:	8023      	strh	r3, [r4, #0]
 8002cb8:	3402      	adds	r4, #2
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8002cbe:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8002cc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f00c fef8 	bl	800fabe <strcat>
	  strcat(msg.Buf, str_head_2);
 8002cce:	f107 020c 	add.w	r2, r7, #12
 8002cd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f00c fef0 	bl	800fabe <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002cde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	482f      	ldr	r0, [pc, #188]	; (8002da4 <Start_Show_Resources+0x25c>)
 8002ce6:	f00c f8f1 	bl	800eecc <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8002cea:	482e      	ldr	r0, [pc, #184]	; (8002da4 <Start_Show_Resources+0x25c>)
 8002cec:	f00a f9fc 	bl	800d0e8 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8002cf0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3357      	adds	r3, #87	; 0x57
 8002d00:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002d0a:	e011      	b.n	8002d30 <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002d0c:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8002d10:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002d14:	4413      	add	r3, r2
 8002d16:	4923      	ldr	r1, [pc, #140]	; (8002da4 <Start_Show_Resources+0x25c>)
 8002d18:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8002d1c:	440a      	add	r2, r1
 8002d1e:	7811      	ldrb	r1, [r2, #0]
 8002d20:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d24:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002d26:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <Start_Show_Resources+0x25c>)
 8002d32:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002d36:	4413      	add	r3, r2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e6      	bne.n	8002d0c <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8002d3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fa44 	bl	80001d0 <strlen>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d50:	4413      	add	r3, r2
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <Start_Show_Resources+0x268>)
 8002d54:	4614      	mov	r4, r2
 8002d56:	469c      	mov	ip, r3
 8002d58:	f104 0e20 	add.w	lr, r4, #32
 8002d5c:	4665      	mov	r5, ip
 8002d5e:	4626      	mov	r6, r4
 8002d60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d62:	6028      	str	r0, [r5, #0]
 8002d64:	6069      	str	r1, [r5, #4]
 8002d66:	60aa      	str	r2, [r5, #8]
 8002d68:	60eb      	str	r3, [r5, #12]
 8002d6a:	3410      	adds	r4, #16
 8002d6c:	f10c 0c10 	add.w	ip, ip, #16
 8002d70:	4574      	cmp	r4, lr
 8002d72:	d1f3      	bne.n	8002d5c <Start_Show_Resources+0x214>
 8002d74:	4665      	mov	r5, ip
 8002d76:	4623      	mov	r3, r4
 8002d78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d7a:	6028      	str	r0, [r5, #0]
 8002d7c:	6069      	str	r1, [r5, #4]
 8002d7e:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <Start_Show_Resources+0x26c>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f008 f8df 	bl	800af50 <osMessageQueuePut>
  {
 8002d92:	e6df      	b.n	8002b54 <Start_Show_Resources+0xc>
 8002d94:	08011c68 	.word	0x08011c68
 8002d98:	08011bdc 	.word	0x08011bdc
 8002d9c:	2000075c 	.word	0x2000075c
 8002da0:	08011bf8 	.word	0x08011bf8
 8002da4:	20000374 	.word	0x20000374
 8002da8:	08011c6c 	.word	0x08011c6c
 8002dac:	08011c88 	.word	0x08011c88
 8002db0:	08011c3c 	.word	0x08011c3c
 8002db4:	20007708 	.word	0x20007708

08002db8 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <Start_UART_Task+0x58>)
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	f107 010c 	add.w	r1, r7, #12
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f008 f91d 	bl	800b010 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002ddc:	e004      	b.n	8002de8 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8002dde:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002de2:	3301      	adds	r3, #1
 8002de4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002de8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002dec:	f107 020c 	add.w	r2, r7, #12
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f3      	bne.n	8002dde <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8002df6:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8002dfa:	f107 030c 	add.w	r3, r7, #12
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f00b fa9d 	bl	800e340 <CDC_Transmit_FS>
    osDelay(1);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f008 f814 	bl	800ae34 <osDelay>
  {
 8002e0c:	e7da      	b.n	8002dc4 <Start_UART_Task+0xc>
 8002e0e:	bf00      	nop
 8002e10:	20007708 	.word	0x20007708

08002e14 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8002e1a:	af04      	add	r7, sp, #16
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	6018      	str	r0, [r3, #0]
  /* Infinite loop */

	QUEUE_t msg;												// Make a queue
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	uint16_t addres_device = 0x76;  		 	// BME280
 8002e26:	2376      	movs	r3, #118	; 0x76
 8002e28:	f8a7 345c 	strh.w	r3, [r7, #1116]	; 0x45c
	uint16_t id_addr = 0xD0;
 8002e2c:	23d0      	movs	r3, #208	; 0xd0
 8002e2e:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
	uint8_t id = 96;							// in hex form
 8002e32:	2360      	movs	r3, #96	; 0x60
 8002e34:	f887 3459 	strb.w	r3, [r7, #1113]	; 0x459
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8002e38:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8002e40:	f8b7 345c 	ldrh.w	r3, [r7, #1116]	; 0x45c
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	b299      	uxth	r1, r3
 8002e48:	f8b7 245a 	ldrh.w	r2, [r7, #1114]	; 0x45a
 8002e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e50:	9302      	str	r3, [sp, #8]
 8002e52:	2301      	movs	r3, #1
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	48bb      	ldr	r0, [pc, #748]	; (800314c <Start_bme280+0x338>)
 8002e60:	f001 fdaa 	bl	80049b8 <HAL_I2C_Mem_Read>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002e6a:	4bb9      	ldr	r3, [pc, #740]	; (8003150 <Start_bme280+0x33c>)
 8002e6c:	2276      	movs	r2, #118	; 0x76
 8002e6e:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8002e70:	4bb7      	ldr	r3, [pc, #732]	; (8003150 <Start_bme280+0x33c>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8002e76:	4bb6      	ldr	r3, [pc, #728]	; (8003150 <Start_bme280+0x33c>)
 8002e78:	4ab6      	ldr	r2, [pc, #728]	; (8003154 <Start_bme280+0x340>)
 8002e7a:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8002e7c:	4bb4      	ldr	r3, [pc, #720]	; (8003150 <Start_bme280+0x33c>)
 8002e7e:	4ab6      	ldr	r2, [pc, #728]	; (8003158 <Start_bme280+0x344>)
 8002e80:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8002e82:	4bb3      	ldr	r3, [pc, #716]	; (8003150 <Start_bme280+0x33c>)
 8002e84:	4ab5      	ldr	r2, [pc, #724]	; (800315c <Start_bme280+0x348>)
 8002e86:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8002e88:	48b1      	ldr	r0, [pc, #708]	; (8003150 <Start_bme280+0x33c>)
 8002e8a:	f7fe f859 	bl	8000f40 <bme280_init>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	4bb3      	ldr	r3, [pc, #716]	; (8003160 <Start_bme280+0x34c>)
 8002e94:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002e96:	4bae      	ldr	r3, [pc, #696]	; (8003150 <Start_bme280+0x33c>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002e9e:	4bac      	ldr	r3, [pc, #688]	; (8003150 <Start_bme280+0x33c>)
 8002ea0:	2205      	movs	r2, #5
 8002ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002ea6:	4baa      	ldr	r3, [pc, #680]	; (8003150 <Start_bme280+0x33c>)
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002eae:	4ba8      	ldr	r3, [pc, #672]	; (8003150 <Start_bme280+0x33c>)
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8002eb6:	49a6      	ldr	r1, [pc, #664]	; (8003150 <Start_bme280+0x33c>)
 8002eb8:	200f      	movs	r0, #15
 8002eba:	f7fe f933 	bl	8001124 <bme280_set_sensor_settings>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4ba7      	ldr	r3, [pc, #668]	; (8003160 <Start_bme280+0x34c>)
 8002ec4:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002ec6:	49a2      	ldr	r1, [pc, #648]	; (8003150 <Start_bme280+0x33c>)
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f7fe f980 	bl	80011ce <bme280_set_sensor_mode>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4ba3      	ldr	r3, [pc, #652]	; (8003160 <Start_bme280+0x34c>)
 8002ed4:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8002ed6:	4b9e      	ldr	r3, [pc, #632]	; (8003150 <Start_bme280+0x33c>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2028      	movs	r0, #40	; 0x28
 8002edc:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 8002ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ee2:	f007 ffa7 	bl	800ae34 <osDelay>

	  char str_t_h_and_p[50] = {0};
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	222e      	movs	r2, #46	; 0x2e
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f00b ffe9 	bl	800eecc <memset>
	  char str_thp_buffer[12] = {0};
 8002efa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	3304      	adds	r3, #4
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]

	  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8002f0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00b ffd9 	bl	800eecc <memset>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 8002f1a:	4a8d      	ldr	r2, [pc, #564]	; (8003150 <Start_bme280+0x33c>)
 8002f1c:	4991      	ldr	r1, [pc, #580]	; (8003164 <Start_bme280+0x350>)
 8002f1e:	2007      	movs	r0, #7
 8002f20:	f7fe f9d1 	bl	80012c6 <bme280_get_sensor_data>
 8002f24:	4603      	mov	r3, r0
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b8d      	ldr	r3, [pc, #564]	; (8003160 <Start_bme280+0x34c>)
 8002f2a:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8002f2c:	4b8c      	ldr	r3, [pc, #560]	; (8003160 <Start_bme280+0x34c>)
 8002f2e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 80e5 	bne.w	8003102 <Start_bme280+0x2ee>
	  {
	  		// Save data variables
	  		float BME280_temperature = comp_data.temperature;
 8002f38:	4b8a      	ldr	r3, [pc, #552]	; (8003164 <Start_bme280+0x350>)
 8002f3a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7fd fe31 	bl	8000ba8 <__aeabi_d2f>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8002f4c:	6013      	str	r3, [r2, #0]
	  		float BME280_humidity = comp_data.humidity;
 8002f4e:	4b85      	ldr	r3, [pc, #532]	; (8003164 <Start_bme280+0x350>)
 8002f50:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fe26 	bl	8000ba8 <__aeabi_d2f>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002f62:	6013      	str	r3, [r2, #0]
	  		float BME280_preasure = comp_data.pressure;
 8002f64:	4b7f      	ldr	r3, [pc, #508]	; (8003164 <Start_bme280+0x350>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f7fd fe1b 	bl	8000ba8 <__aeabi_d2f>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8002f78:	6013      	str	r3, [r2, #0]

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_h_and_p, "BEE280: \n\r");
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd f926 	bl	80001d0 <strlen>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4976      	ldr	r1, [pc, #472]	; (8003168 <Start_bme280+0x354>)
 8002f90:	461a      	mov	r2, r3
 8002f92:	460b      	mov	r3, r1
 8002f94:	cb03      	ldmia	r3!, {r0, r1}
 8002f96:	6010      	str	r0, [r2, #0]
 8002f98:	6051      	str	r1, [r2, #4]
 8002f9a:	8819      	ldrh	r1, [r3, #0]
 8002f9c:	789b      	ldrb	r3, [r3, #2]
 8002f9e:	8111      	strh	r1, [r2, #8]
 8002fa0:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_h_and_p, "T: ");
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd f912 	bl	80001d0 <strlen>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f107 0308 	add.w	r3, r7, #8
 8002fb4:	4413      	add	r3, r2
 8002fb6:	4a6d      	ldr	r2, [pc, #436]	; (800316c <Start_bme280+0x358>)
 8002fb8:	6810      	ldr	r0, [r2, #0]
 8002fba:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_temperature);
 8002fbc:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	f7fd fac1 	bl	8000548 <__aeabi_f2d>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002fce:	4968      	ldr	r1, [pc, #416]	; (8003170 <Start_bme280+0x35c>)
 8002fd0:	f00c fd12 	bl	800f9f8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8002fd4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002fd8:	f107 0308 	add.w	r3, r7, #8
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00c fd6d 	bl	800fabe <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd f8f1 	bl	80001d0 <strlen>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f107 0308 	add.w	r3, r7, #8
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a5e      	ldr	r2, [pc, #376]	; (8003174 <Start_bme280+0x360>)
 8002ffa:	6810      	ldr	r0, [r2, #0]
 8002ffc:	6018      	str	r0, [r3, #0]
 8002ffe:	7912      	ldrb	r2, [r2, #4]
 8003000:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 8003002:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003006:	220c      	movs	r2, #12
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f00b ff5e 	bl	800eecc <memset>
	  		strcat(str_t_h_and_p, "H: ");
 8003010:	f107 0308 	add.w	r3, r7, #8
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd f8db 	bl	80001d0 <strlen>
 800301a:	4603      	mov	r3, r0
 800301c:	461a      	mov	r2, r3
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4413      	add	r3, r2
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <Start_bme280+0x364>)
 8003026:	6810      	ldr	r0, [r2, #0]
 8003028:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_humidity);
 800302a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	f7fd fa8a 	bl	8000548 <__aeabi_f2d>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800303c:	494c      	ldr	r1, [pc, #304]	; (8003170 <Start_bme280+0x35c>)
 800303e:	f00c fcdb 	bl	800f9f8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003042:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f00c fd36 	bl	800fabe <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd f8ba 	bl	80001d0 <strlen>
 800305c:	4603      	mov	r3, r0
 800305e:	461a      	mov	r2, r3
 8003060:	f107 0308 	add.w	r3, r7, #8
 8003064:	4413      	add	r3, r2
 8003066:	4a43      	ldr	r2, [pc, #268]	; (8003174 <Start_bme280+0x360>)
 8003068:	6810      	ldr	r0, [r2, #0]
 800306a:	6018      	str	r0, [r3, #0]
 800306c:	7912      	ldrb	r2, [r2, #4]
 800306e:	711a      	strb	r2, [r3, #4]

	  		// Write PRERASURE
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 8003070:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003074:	220c      	movs	r2, #12
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f00b ff27 	bl	800eecc <memset>
	  		strcat(str_t_h_and_p, "P: ");
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd f8a4 	bl	80001d0 <strlen>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	f107 0308 	add.w	r3, r7, #8
 8003090:	4413      	add	r3, r2
 8003092:	4a3a      	ldr	r2, [pc, #232]	; (800317c <Start_bme280+0x368>)
 8003094:	6810      	ldr	r0, [r2, #0]
 8003096:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_preasure);
 8003098:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	f7fd fa53 	bl	8000548 <__aeabi_f2d>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80030aa:	4931      	ldr	r1, [pc, #196]	; (8003170 <Start_bme280+0x35c>)
 80030ac:	f00c fca4 	bl	800f9f8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 80030b0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f00c fcff 	bl	800fabe <strcat>
	  		strcat(str_t_h_and_p, " mm\n\r\0");
 80030c0:	f107 0308 	add.w	r3, r7, #8
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd f883 	bl	80001d0 <strlen>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	4413      	add	r3, r2
 80030d4:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <Start_bme280+0x36c>)
 80030d6:	6810      	ldr	r0, [r2, #0]
 80030d8:	6018      	str	r0, [r3, #0]
 80030da:	8892      	ldrh	r2, [r2, #4]
 80030dc:	809a      	strh	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
 80030de:	f107 0208 	add.w	r2, r7, #8
 80030e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f00c fce8 	bl	800fabe <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <Start_bme280+0x370>)
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030fa:	2200      	movs	r2, #0
 80030fc:	f007 ff28 	bl	800af50 <osMessageQueuePut>
 8003100:	e6ed      	b.n	8002ede <Start_bme280+0xca>

	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!! BME280 didn't found\n\r");
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f862 	bl	80001d0 <strlen>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	4413      	add	r3, r2
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <Start_bme280+0x374>)
 8003118:	461d      	mov	r5, r3
 800311a:	4614      	mov	r4, r2
 800311c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311e:	6028      	str	r0, [r5, #0]
 8003120:	6069      	str	r1, [r5, #4]
 8003122:	60aa      	str	r2, [r5, #8]
 8003124:	60eb      	str	r3, [r5, #12]
 8003126:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003128:	6128      	str	r0, [r5, #16]
 800312a:	6169      	str	r1, [r5, #20]
 800312c:	61aa      	str	r2, [r5, #24]
 800312e:	8823      	ldrh	r3, [r4, #0]
 8003130:	78a2      	ldrb	r2, [r4, #2]
 8003132:	83ab      	strh	r3, [r5, #28]
 8003134:	4613      	mov	r3, r2
 8003136:	77ab      	strb	r3, [r5, #30]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <Start_bme280+0x370>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003144:	2200      	movs	r2, #0
 8003146:	f007 ff03 	bl	800af50 <osMessageQueuePut>
  {
 800314a:	e6c8      	b.n	8002ede <Start_bme280+0xca>
 800314c:	2000547c 	.word	0x2000547c
 8003150:	2000543c 	.word	0x2000543c
 8003154:	08002375 	.word	0x08002375
 8003158:	080023fd 	.word	0x080023fd
 800315c:	080023e5 	.word	0x080023e5
 8003160:	20006524 	.word	0x20006524
 8003164:	20006528 	.word	0x20006528
 8003168:	08011cc8 	.word	0x08011cc8
 800316c:	08011cd4 	.word	0x08011cd4
 8003170:	08011cd8 	.word	0x08011cd8
 8003174:	08011cdc 	.word	0x08011cdc
 8003178:	08011ce4 	.word	0x08011ce4
 800317c:	08011ce8 	.word	0x08011ce8
 8003180:	08011cec 	.word	0x08011cec
 8003184:	20007708 	.word	0x20007708
 8003188:	08011cf4 	.word	0x08011cf4

0800318c <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8003192:	af00      	add	r7, sp, #0
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003198:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800319c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f00b fe92 	bl	800eecc <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 80031a8:	4b48      	ldr	r3, [pc, #288]	; (80032cc <Start_AM2302+0x140>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a47      	ldr	r2, [pc, #284]	; (80032cc <Start_AM2302+0x140>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 80031b4:	4b45      	ldr	r3, [pc, #276]	; (80032cc <Start_AM2302+0x140>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a44      	ldr	r2, [pc, #272]	; (80032cc <Start_AM2302+0x140>)
 80031ba:	f023 0302 	bic.w	r3, r3, #2
 80031be:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 80031c0:	4b42      	ldr	r3, [pc, #264]	; (80032cc <Start_AM2302+0x140>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a41      	ldr	r2, [pc, #260]	; (80032cc <Start_AM2302+0x140>)
 80031c6:	f043 0302 	orr.w	r3, r3, #2
 80031ca:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <Start_AM2302+0x140>)
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	4a3e      	ldr	r2, [pc, #248]	; (80032cc <Start_AM2302+0x140>)
 80031d2:	f083 0302 	eor.w	r3, r3, #2
 80031d6:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 80031d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031dc:	f007 fe2a 	bl	800ae34 <osDelay>

  for(;;)
  {
	  osDelay(3000);			// Measure every 3 seconds
 80031e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80031e4:	f007 fe26 	bl	800ae34 <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	int j = 0;   							// Counter bytes
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	  	int i = 0;								// Counter bits
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 80031fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8003202:	4b32      	ldr	r3, [pc, #200]	; (80032cc <Start_AM2302+0x140>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a31      	ldr	r2, [pc, #196]	; (80032cc <Start_AM2302+0x140>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <Start_AM2302+0x140>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a2e      	ldr	r2, [pc, #184]	; (80032cc <Start_AM2302+0x140>)
 8003214:	f023 0302 	bic.w	r3, r3, #2
 8003218:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <Start_AM2302+0x140>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <Start_AM2302+0x140>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <Start_AM2302+0x140>)
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	4a28      	ldr	r2, [pc, #160]	; (80032cc <Start_AM2302+0x140>)
 800322c:	f023 0302 	bic.w	r3, r3, #2
 8003230:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 8003232:	2012      	movs	r0, #18
 8003234:	f007 fdfe 	bl	800ae34 <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <Start_AM2302+0x140>)
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <Start_AM2302+0x140>)
 800323e:	f083 0302 	eor.w	r3, r3, #2
 8003242:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 8003244:	2028      	movs	r0, #40	; 0x28
 8003246:	f7ff f915 	bl	8002474 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <Start_AM2302+0x140>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <Start_AM2302+0x140>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <Start_AM2302+0x140>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <Start_AM2302+0x140>)
 800325c:	f023 0304 	bic.w	r3, r3, #4
 8003260:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <Start_AM2302+0x140>)
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 800326e:	2300      	movs	r3, #0
 8003270:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8003274:	e002      	b.n	800327c <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}

	  	delay_us(80);
 800327c:	2050      	movs	r0, #80	; 0x50
 800327e:	f7ff f8f9 	bl	8002474 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <Start_AM2302+0x140>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 800328e:	2300      	movs	r3, #0
 8003290:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8003294:	e002      	b.n	800329c <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}
	  	delay_us(80);
 800329c:	2050      	movs	r0, #80	; 0x50
 800329e:	f7ff f8e9 	bl	8002474 <delay_us>

	  	if(get_data_status == true)
 80032a2:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d09a      	beq.n	80031e0 <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80032b0:	e050      	b.n	8003354 <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 80032b2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80032b6:	f1c3 0304 	rsb	r3, r3, #4
 80032ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032be:	2100      	movs	r1, #0
 80032c0:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80032c8:	e038      	b.n	800333c <Start_AM2302+0x1b0>
 80032ca:	bf00      	nop
 80032cc:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 80032d0:	bf00      	nop
 80032d2:	4b95      	ldr	r3, [pc, #596]	; (8003528 <Start_AM2302+0x39c>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f9      	beq.n	80032d2 <Start_AM2302+0x146>
	  				delay_us(30);
 80032de:	201e      	movs	r0, #30
 80032e0:	f7ff f8c8 	bl	8002474 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 80032e4:	4b90      	ldr	r3, [pc, #576]	; (8003528 <Start_AM2302+0x39c>)
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d019      	beq.n	8003324 <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 80032f0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80032f4:	f1c3 0304 	rsb	r3, r3, #4
 80032f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032fc:	5cd3      	ldrb	r3, [r2, r3]
 80032fe:	b25a      	sxtb	r2, r3
 8003300:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003304:	f1c3 0307 	rsb	r3, r3, #7
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	b25b      	sxtb	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b25a      	sxtb	r2, r3
 8003314:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003318:	f1c3 0304 	rsb	r3, r3, #4
 800331c:	b2d1      	uxtb	r1, r2
 800331e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003322:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 8003324:	bf00      	nop
 8003326:	4b80      	ldr	r3, [pc, #512]	; (8003528 <Start_AM2302+0x39c>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f9      	bne.n	8003326 <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8003332:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003336:	3301      	adds	r3, #1
 8003338:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800333c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003340:	2b07      	cmp	r3, #7
 8003342:	ddc5      	ble.n	80032d0 <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 8003344:	2301      	movs	r3, #1
 8003346:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 800334a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800334e:	3301      	adds	r3, #1
 8003350:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8003354:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003358:	2b04      	cmp	r3, #4
 800335a:	ddaa      	ble.n	80032b2 <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 800335c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003360:	3301      	adds	r3, #1
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003370:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003378:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800337c:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 8003380:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003384:	3301      	adds	r3, #1
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b21b      	sxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	da13      	bge.n	80033b6 <Start_AM2302+0x22a>
 800338e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	f7fd f8d8 	bl	8000548 <__aeabi_f2d>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	f7fd fc02 	bl	8000ba8 <__aeabi_d2f>
 80033a4:	4603      	mov	r3, r0
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef1 7a67 	vneg.f32	s15, s15
 80033ae:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80033b2:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 80033b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033ba:	3303      	adds	r3, #3
 80033bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80033cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d0:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80033d4:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[50] = {0};
 80033d8:	f107 0308 	add.w	r3, r7, #8
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	3304      	adds	r3, #4
 80033e2:	222e      	movs	r2, #46	; 0x2e
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f00b fd70 	bl	800eecc <memset>
	  		char str_t_and_h_buffer[12] = {0};
 80033ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 80033fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f00b fd60 	bl	800eecc <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "AM2302: \n\r");
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	4618      	mov	r0, r3
 8003412:	f7fc fedd 	bl	80001d0 <strlen>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	f107 0308 	add.w	r3, r7, #8
 800341e:	4413      	add	r3, r2
 8003420:	4942      	ldr	r1, [pc, #264]	; (800352c <Start_AM2302+0x3a0>)
 8003422:	461a      	mov	r2, r3
 8003424:	460b      	mov	r3, r1
 8003426:	cb03      	ldmia	r3!, {r0, r1}
 8003428:	6010      	str	r0, [r2, #0]
 800342a:	6051      	str	r1, [r2, #4]
 800342c:	8819      	ldrh	r1, [r3, #0]
 800342e:	789b      	ldrb	r3, [r3, #2]
 8003430:	8111      	strh	r1, [r2, #8]
 8003432:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_and_h, "T: ");
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	4618      	mov	r0, r3
 800343a:	f7fc fec9 	bl	80001d0 <strlen>
 800343e:	4603      	mov	r3, r0
 8003440:	461a      	mov	r2, r3
 8003442:	f107 0308 	add.w	r3, r7, #8
 8003446:	4413      	add	r3, r2
 8003448:	4a39      	ldr	r2, [pc, #228]	; (8003530 <Start_AM2302+0x3a4>)
 800344a:	6810      	ldr	r0, [r2, #0]
 800344c:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 800344e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	f7fd f878 	bl	8000548 <__aeabi_f2d>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003460:	4934      	ldr	r1, [pc, #208]	; (8003534 <Start_AM2302+0x3a8>)
 8003462:	f00c fac9 	bl	800f9f8 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8003466:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800346a:	f107 0308 	add.w	r3, r7, #8
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f00c fb24 	bl	800fabe <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 8003476:	f107 0308 	add.w	r3, r7, #8
 800347a:	4618      	mov	r0, r3
 800347c:	f7fc fea8 	bl	80001d0 <strlen>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	4413      	add	r3, r2
 800348a:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <Start_AM2302+0x3ac>)
 800348c:	6810      	ldr	r0, [r2, #0]
 800348e:	6018      	str	r0, [r3, #0]
 8003490:	7912      	ldrb	r2, [r2, #4]
 8003492:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 8003494:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003498:	220c      	movs	r2, #12
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f00b fd15 	bl	800eecc <memset>

	  		strcat(str_t_and_h, "H: ");
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fc fe92 	bl	80001d0 <strlen>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	f107 0308 	add.w	r3, r7, #8
 80034b4:	4413      	add	r3, r2
 80034b6:	4a21      	ldr	r2, [pc, #132]	; (800353c <Start_AM2302+0x3b0>)
 80034b8:	6810      	ldr	r0, [r2, #0]
 80034ba:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 80034bc:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	f7fd f841 	bl	8000548 <__aeabi_f2d>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034ce:	4919      	ldr	r1, [pc, #100]	; (8003534 <Start_AM2302+0x3a8>)
 80034d0:	f00c fa92 	bl	800f9f8 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80034d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f00c faed 	bl	800fabe <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fc fe71 	bl	80001d0 <strlen>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461a      	mov	r2, r3
 80034f2:	f107 0308 	add.w	r3, r7, #8
 80034f6:	4413      	add	r3, r2
 80034f8:	4a11      	ldr	r2, [pc, #68]	; (8003540 <Start_AM2302+0x3b4>)
 80034fa:	6810      	ldr	r0, [r2, #0]
 80034fc:	6018      	str	r0, [r3, #0]
 80034fe:	7912      	ldrb	r2, [r2, #4]
 8003500:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 8003502:	f107 0208 	add.w	r2, r7, #8
 8003506:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f00c fad6 	bl	800fabe <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <Start_AM2302+0x3b8>)
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800351a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800351e:	2200      	movs	r2, #0
 8003520:	f007 fd16 	bl	800af50 <osMessageQueuePut>
  {
 8003524:	e65c      	b.n	80031e0 <Start_AM2302+0x54>
 8003526:	bf00      	nop
 8003528:	40020800 	.word	0x40020800
 800352c:	08011d14 	.word	0x08011d14
 8003530:	08011cd4 	.word	0x08011cd4
 8003534:	08011cd8 	.word	0x08011cd8
 8003538:	08011cdc 	.word	0x08011cdc
 800353c:	08011ce4 	.word	0x08011ce4
 8003540:	08011d20 	.word	0x08011d20
 8003544:	20007708 	.word	0x20007708

08003548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10c      	bne.n	8003574 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 800355a:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3b01      	subs	r3, #1
 8003568:	4a0e      	ldr	r2, [pc, #56]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	e002      	b.n	8003574 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else		// For avoid overflow variable
		{
			tim_val = 0;
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
		}


	}

	if(htim->Instance == TIM3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d104      	bne.n	8003588 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003586:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 8003592:	f000 facd 	bl	8003b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40014400 	.word	0x40014400
 80035a4:	20000760 	.word	0x20000760
 80035a8:	40000400 	.word	0x40000400
 80035ac:	2000b418 	.word	0x2000b418
 80035b0:	40010000 	.word	0x40010000

080035b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035b8:	b672      	cpsid	i
}
 80035ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035bc:	e7fe      	b.n	80035bc <Error_Handler+0x8>
	...

080035c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_MspInit+0x54>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a11      	ldr	r2, [pc, #68]	; (8003614 <HAL_MspInit+0x54>)
 80035d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_MspInit+0x54>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_MspInit+0x54>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <HAL_MspInit+0x54>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_MspInit+0x54>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	210f      	movs	r1, #15
 8003602:	f06f 0001 	mvn.w	r0, #1
 8003606:	f000 fb8f 	bl	8003d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <HAL_I2C_MspInit+0xc4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d14b      	bne.n	80036d2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a20      	ldr	r2, [pc, #128]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003678:	2312      	movs	r3, #18
 800367a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003684:	2304      	movs	r3, #4
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4619      	mov	r1, r3
 800368e:	4815      	ldr	r0, [pc, #84]	; (80036e4 <HAL_I2C_MspInit+0xcc>)
 8003690:	f000 fb74 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800369a:	2312      	movs	r3, #18
 800369c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a2:	2303      	movs	r3, #3
 80036a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036a6:	2304      	movs	r3, #4
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036aa:	f107 0314 	add.w	r3, r7, #20
 80036ae:	4619      	mov	r1, r3
 80036b0:	480d      	ldr	r0, [pc, #52]	; (80036e8 <HAL_I2C_MspInit+0xd0>)
 80036b2:	f000 fb63 	bl	8003d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 80036c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_I2C_MspInit+0xc8>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80036d2:	bf00      	nop
 80036d4:	3728      	adds	r7, #40	; 0x28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40005c00 	.word	0x40005c00
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020000 	.word	0x40020000

080036ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d116      	bne.n	800372c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6413      	str	r3, [r2, #64]	; 0x40
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	2105      	movs	r1, #5
 800371e:	201c      	movs	r0, #28
 8003720:	f000 fb02 	bl	8003d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003724:	201c      	movs	r0, #28
 8003726:	f000 fb1b 	bl	8003d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800372a:	e036      	b.n	800379a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_TIM_Base_MspInit+0xbc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d116      	bne.n	8003764 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2105      	movs	r1, #5
 8003756:	201d      	movs	r0, #29
 8003758:	f000 fae6 	bl	8003d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800375c:	201d      	movs	r0, #29
 800375e:	f000 faff 	bl	8003d60 <HAL_NVIC_EnableIRQ>
}
 8003762:	e01a      	b.n	800379a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a10      	ldr	r2, [pc, #64]	; (80037ac <HAL_TIM_Base_MspInit+0xc0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d115      	bne.n	800379a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	6453      	str	r3, [r2, #68]	; 0x44
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_TIM_Base_MspInit+0xb8>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2105      	movs	r1, #5
 800378e:	2019      	movs	r0, #25
 8003790:	f000 faca 	bl	8003d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003794:	2019      	movs	r0, #25
 8003796:	f000 fae3 	bl	8003d60 <HAL_NVIC_EnableIRQ>
}
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40014400 	.word	0x40014400

080037b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	2019      	movs	r0, #25
 80037c6:	f000 faaf 	bl	8003d28 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037ca:	2019      	movs	r0, #25
 80037cc:	f000 fac8 	bl	8003d60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <HAL_InitTick+0xa4>)
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_InitTick+0xa4>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6453      	str	r3, [r2, #68]	; 0x44
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_InitTick+0xa4>)
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037ec:	f107 0210 	add.w	r2, r7, #16
 80037f0:	f107 0314 	add.w	r3, r7, #20
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f003 fd10 	bl	800721c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80037fc:	f003 fcfa 	bl	80071f4 <HAL_RCC_GetPCLK2Freq>
 8003800:	4603      	mov	r3, r0
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	4a13      	ldr	r2, [pc, #76]	; (8003858 <HAL_InitTick+0xa8>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	3b01      	subs	r3, #1
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_InitTick+0xac>)
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <HAL_InitTick+0xb0>)
 8003818:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_InitTick+0xac>)
 800381c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003820:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003822:	4a0e      	ldr	r2, [pc, #56]	; (800385c <HAL_InitTick+0xac>)
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <HAL_InitTick+0xac>)
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_InitTick+0xac>)
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003834:	4809      	ldr	r0, [pc, #36]	; (800385c <HAL_InitTick+0xac>)
 8003836:	f003 fd23 	bl	8007280 <HAL_TIM_Base_Init>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003840:	4806      	ldr	r0, [pc, #24]	; (800385c <HAL_InitTick+0xac>)
 8003842:	f003 fd6d 	bl	8007320 <HAL_TIM_Base_Start_IT>
 8003846:	4603      	mov	r3, r0
 8003848:	e000      	b.n	800384c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
}
 800384c:	4618      	mov	r0, r3
 800384e:	3730      	adds	r7, #48	; 0x30
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	431bde83 	.word	0x431bde83
 800385c:	2000c5f0 	.word	0x2000c5f0
 8003860:	40010000 	.word	0x40010000

08003864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <NMI_Handler+0x4>

0800386a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <HardFault_Handler+0x4>

08003870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <MemManage_Handler+0x4>

08003876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800387a:	e7fe      	b.n	800387a <BusFault_Handler+0x4>

0800387c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003880:	e7fe      	b.n	8003880 <UsageFault_Handler+0x4>

08003882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003894:	4803      	ldr	r0, [pc, #12]	; (80038a4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003896:	f003 fde2 	bl	800745e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800389a:	4803      	ldr	r0, [pc, #12]	; (80038a8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800389c:	f003 fddf 	bl	800745e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	2000c5f0 	.word	0x2000c5f0
 80038a8:	20006540 	.word	0x20006540

080038ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038b0:	4802      	ldr	r0, [pc, #8]	; (80038bc <TIM2_IRQHandler+0x10>)
 80038b2:	f003 fdd4 	bl	800745e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2000b4e4 	.word	0x2000b4e4

080038c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038c4:	4802      	ldr	r0, [pc, #8]	; (80038d0 <TIM3_IRQHandler+0x10>)
 80038c6:	f003 fdca 	bl	800745e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000a10c 	.word	0x2000a10c

080038d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80038d8:	4802      	ldr	r0, [pc, #8]	; (80038e4 <OTG_FS_IRQHandler+0x10>)
 80038da:	f001 fff8 	bl	80058ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000db4c 	.word	0x2000db4c

080038e8 <_getpid>:
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	2301      	movs	r3, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_kill>:
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	f00b f987 	bl	800ec14 <__errno>
 8003906:	4603      	mov	r3, r0
 8003908:	2216      	movs	r2, #22
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_exit>:
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ffe7 	bl	80038f8 <_kill>
 800392a:	e7fe      	b.n	800392a <_exit+0x12>

0800392c <_read>:
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e00a      	b.n	8003954 <_read+0x28>
 800393e:	f3af 8000 	nop.w
 8003942:	4601      	mov	r1, r0
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	60ba      	str	r2, [r7, #8]
 800394a:	b2ca      	uxtb	r2, r1
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	3301      	adds	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	dbf0      	blt.n	800393e <_read+0x12>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <_write>:
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e009      	b.n	800398c <_write+0x26>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	60ba      	str	r2, [r7, #8]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f3af 8000 	nop.w
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	dbf1      	blt.n	8003978 <_write+0x12>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_close>:
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <_fstat>:
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	2300      	movs	r3, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <_isatty>:
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	2301      	movs	r3, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_lseek>:
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	2300      	movs	r3, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <_sbrk>:
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <_sbrk+0x5c>)
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <_sbrk+0x60>)
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <_sbrk+0x64>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <_sbrk+0x22>
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <_sbrk+0x64>)
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <_sbrk+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <_sbrk+0x64>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d207      	bcs.n	8003a48 <_sbrk+0x40>
 8003a38:	f00b f8ec 	bl	800ec14 <__errno>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	220c      	movs	r2, #12
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a46:	e009      	b.n	8003a5c <_sbrk+0x54>
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <_sbrk+0x64>)
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20020000 	.word	0x20020000
 8003a68:	00000400 	.word	0x00000400
 8003a6c:	20000764 	.word	0x20000764
 8003a70:	2000df68 	.word	0x2000df68

08003a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <SystemInit+0x20>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <SystemInit+0x20>)
 8003a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <Reset_Handler>:
 8003a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ad0 <LoopFillZerobss+0x12>
 8003a9c:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <LoopFillZerobss+0x16>)
 8003a9e:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <LoopFillZerobss+0x1a>)
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <LoopFillZerobss+0x1e>)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e002      	b.n	8003aac <LoopCopyDataInit>

08003aa6 <CopyDataInit>:
 8003aa6:	58d4      	ldr	r4, [r2, r3]
 8003aa8:	50c4      	str	r4, [r0, r3]
 8003aaa:	3304      	adds	r3, #4

08003aac <LoopCopyDataInit>:
 8003aac:	18c4      	adds	r4, r0, r3
 8003aae:	428c      	cmp	r4, r1
 8003ab0:	d3f9      	bcc.n	8003aa6 <CopyDataInit>
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <LoopFillZerobss+0x22>)
 8003ab4:	4c0b      	ldr	r4, [pc, #44]	; (8003ae4 <LoopFillZerobss+0x26>)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e001      	b.n	8003abe <LoopFillZerobss>

08003aba <FillZerobss>:
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	3204      	adds	r2, #4

08003abe <LoopFillZerobss>:
 8003abe:	42a2      	cmp	r2, r4
 8003ac0:	d3fb      	bcc.n	8003aba <FillZerobss>
 8003ac2:	f7ff ffd7 	bl	8003a74 <SystemInit>
 8003ac6:	f00b f9a1 	bl	800ee0c <__libc_init_array>
 8003aca:	f7fe fd01 	bl	80024d0 <main>
 8003ace:	4770      	bx	lr
 8003ad0:	20020000 	.word	0x20020000
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000354 	.word	0x20000354
 8003adc:	080122d4 	.word	0x080122d4
 8003ae0:	20000358 	.word	0x20000358
 8003ae4:	2000df64 	.word	0x2000df64

08003ae8 <ADC_IRQHandler>:
 8003ae8:	e7fe      	b.n	8003ae8 <ADC_IRQHandler>
	...

08003aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <HAL_Init+0x40>)
 8003af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_Init+0x40>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <HAL_Init+0x40>)
 8003b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_Init+0x40>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_Init+0x40>)
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b14:	2003      	movs	r0, #3
 8003b16:	f000 f8fc 	bl	8003d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b1a:	2005      	movs	r0, #5
 8003b1c:	f7ff fe48 	bl	80037b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b20:	f7ff fd4e 	bl	80035c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00

08003b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_IncTick+0x20>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_IncTick+0x24>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_IncTick+0x24>)
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000008 	.word	0x20000008
 8003b54:	2000c638 	.word	0x2000c638

08003b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_GetTick+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	2000c638 	.word	0x2000c638

08003b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff ffee 	bl	8003b58 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b88:	d005      	beq.n	8003b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_Delay+0x44>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b96:	bf00      	nop
 8003b98:	f7ff ffde 	bl	8003b58 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d8f7      	bhi.n	8003b98 <HAL_Delay+0x28>
  {
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000008 	.word	0x20000008

08003bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bea:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	60d3      	str	r3, [r2, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <__NVIC_GetPriorityGrouping+0x18>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f003 0307 	and.w	r3, r3, #7
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	db0b      	blt.n	8003c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	f003 021f 	and.w	r2, r3, #31
 8003c34:	4907      	ldr	r1, [pc, #28]	; (8003c54 <__NVIC_EnableIRQ+0x38>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000e100 	.word	0xe000e100

08003c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6039      	str	r1, [r7, #0]
 8003c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db0a      	blt.n	8003c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	490c      	ldr	r1, [pc, #48]	; (8003ca4 <__NVIC_SetPriority+0x4c>)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	0112      	lsls	r2, r2, #4
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c80:	e00a      	b.n	8003c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4908      	ldr	r1, [pc, #32]	; (8003ca8 <__NVIC_SetPriority+0x50>)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	3b04      	subs	r3, #4
 8003c90:	0112      	lsls	r2, r2, #4
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	440b      	add	r3, r1
 8003c96:	761a      	strb	r2, [r3, #24]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f1c3 0307 	rsb	r3, r3, #7
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	bf28      	it	cs
 8003cca:	2304      	movcs	r3, #4
 8003ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d902      	bls.n	8003cdc <NVIC_EncodePriority+0x30>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3b03      	subs	r3, #3
 8003cda:	e000      	b.n	8003cde <NVIC_EncodePriority+0x32>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	401a      	ands	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43d9      	mvns	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	4313      	orrs	r3, r2
         );
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	; 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ff4c 	bl	8003bb8 <__NVIC_SetPriorityGrouping>
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3a:	f7ff ff61 	bl	8003c00 <__NVIC_GetPriorityGrouping>
 8003d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	6978      	ldr	r0, [r7, #20]
 8003d46:	f7ff ffb1 	bl	8003cac <NVIC_EncodePriority>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff80 	bl	8003c58 <__NVIC_SetPriority>
}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff54 	bl	8003c1c <__NVIC_EnableIRQ>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e16b      	b.n	8004070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	f040 815a 	bne.w	800406a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d005      	beq.n	8003dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d130      	bne.n	8003e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	2203      	movs	r2, #3
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e04:	2201      	movs	r2, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 0201 	and.w	r2, r3, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d017      	beq.n	8003e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d123      	bne.n	8003ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	08da      	lsrs	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3208      	adds	r2, #8
 8003e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	220f      	movs	r2, #15
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	08da      	lsrs	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3208      	adds	r2, #8
 8003eba:	69b9      	ldr	r1, [r7, #24]
 8003ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0203 	and.w	r2, r3, #3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80b4 	beq.w	800406a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b60      	ldr	r3, [pc, #384]	; (8004088 <HAL_GPIO_Init+0x30c>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	4a5f      	ldr	r2, [pc, #380]	; (8004088 <HAL_GPIO_Init+0x30c>)
 8003f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f10:	6453      	str	r3, [r2, #68]	; 0x44
 8003f12:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <HAL_GPIO_Init+0x30c>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f1e:	4a5b      	ldr	r2, [pc, #364]	; (800408c <HAL_GPIO_Init+0x310>)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	3302      	adds	r3, #2
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	220f      	movs	r2, #15
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_GPIO_Init+0x314>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d02b      	beq.n	8003fa2 <HAL_GPIO_Init+0x226>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a51      	ldr	r2, [pc, #324]	; (8004094 <HAL_GPIO_Init+0x318>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d025      	beq.n	8003f9e <HAL_GPIO_Init+0x222>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a50      	ldr	r2, [pc, #320]	; (8004098 <HAL_GPIO_Init+0x31c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01f      	beq.n	8003f9a <HAL_GPIO_Init+0x21e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4f      	ldr	r2, [pc, #316]	; (800409c <HAL_GPIO_Init+0x320>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d019      	beq.n	8003f96 <HAL_GPIO_Init+0x21a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a4e      	ldr	r2, [pc, #312]	; (80040a0 <HAL_GPIO_Init+0x324>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_GPIO_Init+0x216>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a4d      	ldr	r2, [pc, #308]	; (80040a4 <HAL_GPIO_Init+0x328>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00d      	beq.n	8003f8e <HAL_GPIO_Init+0x212>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a4c      	ldr	r2, [pc, #304]	; (80040a8 <HAL_GPIO_Init+0x32c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <HAL_GPIO_Init+0x20e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4b      	ldr	r2, [pc, #300]	; (80040ac <HAL_GPIO_Init+0x330>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d101      	bne.n	8003f86 <HAL_GPIO_Init+0x20a>
 8003f82:	2307      	movs	r3, #7
 8003f84:	e00e      	b.n	8003fa4 <HAL_GPIO_Init+0x228>
 8003f86:	2308      	movs	r3, #8
 8003f88:	e00c      	b.n	8003fa4 <HAL_GPIO_Init+0x228>
 8003f8a:	2306      	movs	r3, #6
 8003f8c:	e00a      	b.n	8003fa4 <HAL_GPIO_Init+0x228>
 8003f8e:	2305      	movs	r3, #5
 8003f90:	e008      	b.n	8003fa4 <HAL_GPIO_Init+0x228>
 8003f92:	2304      	movs	r3, #4
 8003f94:	e006      	b.n	8003fa4 <HAL_GPIO_Init+0x228>
 8003f96:	2303      	movs	r3, #3
 8003f98:	e004      	b.n	8003fa4 <HAL_GPIO_Init+0x228>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e002      	b.n	8003fa4 <HAL_GPIO_Init+0x228>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <HAL_GPIO_Init+0x228>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	f002 0203 	and.w	r2, r2, #3
 8003faa:	0092      	lsls	r2, r2, #2
 8003fac:	4093      	lsls	r3, r2
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb4:	4935      	ldr	r1, [pc, #212]	; (800408c <HAL_GPIO_Init+0x310>)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	3302      	adds	r3, #2
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe6:	4a32      	ldr	r2, [pc, #200]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fec:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800403a:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <HAL_GPIO_Init+0x334>)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004064:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3301      	adds	r3, #1
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b0f      	cmp	r3, #15
 8004074:	f67f ae90 	bls.w	8003d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	3724      	adds	r7, #36	; 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800
 800408c:	40013800 	.word	0x40013800
 8004090:	40020000 	.word	0x40020000
 8004094:	40020400 	.word	0x40020400
 8004098:	40020800 	.word	0x40020800
 800409c:	40020c00 	.word	0x40020c00
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40021400 	.word	0x40021400
 80040a8:	40021800 	.word	0x40021800
 80040ac:	40021c00 	.word	0x40021c00
 80040b0:	40013c00 	.word	0x40013c00

080040b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
 80040c0:	4613      	mov	r3, r2
 80040c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040c4:	787b      	ldrb	r3, [r7, #1]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040d0:	e003      	b.n	80040da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040d2:	887b      	ldrh	r3, [r7, #2]
 80040d4:	041a      	lsls	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	619a      	str	r2, [r3, #24]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e12b      	b.n	8004352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff fa82 	bl	8003618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800414a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800414c:	f003 f83e 	bl	80071cc <HAL_RCC_GetPCLK1Freq>
 8004150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a81      	ldr	r2, [pc, #516]	; (800435c <HAL_I2C_Init+0x274>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d807      	bhi.n	800416c <HAL_I2C_Init+0x84>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a80      	ldr	r2, [pc, #512]	; (8004360 <HAL_I2C_Init+0x278>)
 8004160:	4293      	cmp	r3, r2
 8004162:	bf94      	ite	ls
 8004164:	2301      	movls	r3, #1
 8004166:	2300      	movhi	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e006      	b.n	800417a <HAL_I2C_Init+0x92>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a7d      	ldr	r2, [pc, #500]	; (8004364 <HAL_I2C_Init+0x27c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0e7      	b.n	8004352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a78      	ldr	r2, [pc, #480]	; (8004368 <HAL_I2C_Init+0x280>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0c9b      	lsrs	r3, r3, #18
 800418c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a6a      	ldr	r2, [pc, #424]	; (800435c <HAL_I2C_Init+0x274>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d802      	bhi.n	80041bc <HAL_I2C_Init+0xd4>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3301      	adds	r3, #1
 80041ba:	e009      	b.n	80041d0 <HAL_I2C_Init+0xe8>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_I2C_Init+0x284>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	3301      	adds	r3, #1
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	495c      	ldr	r1, [pc, #368]	; (800435c <HAL_I2C_Init+0x274>)
 80041ec:	428b      	cmp	r3, r1
 80041ee:	d819      	bhi.n	8004224 <HAL_I2C_Init+0x13c>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e59      	subs	r1, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004204:	400b      	ands	r3, r1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_I2C_Init+0x138>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e59      	subs	r1, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fbb1 f3f3 	udiv	r3, r1, r3
 8004218:	3301      	adds	r3, #1
 800421a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421e:	e051      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 8004220:	2304      	movs	r3, #4
 8004222:	e04f      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <HAL_I2C_Init+0x168>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	440b      	add	r3, r1
 800423a:	fbb0 f3f3 	udiv	r3, r0, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf0c      	ite	eq
 8004248:	2301      	moveq	r3, #1
 800424a:	2300      	movne	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e012      	b.n	8004276 <HAL_I2C_Init+0x18e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	0099      	lsls	r1, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	fbb0 f3f3 	udiv	r3, r0, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Init+0x196>
 800427a:	2301      	movs	r3, #1
 800427c:	e022      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <HAL_I2C_Init+0x1bc>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1e58      	subs	r0, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	440b      	add	r3, r1
 8004294:	fbb0 f3f3 	udiv	r3, r0, r3
 8004298:	3301      	adds	r3, #1
 800429a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a2:	e00f      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	6809      	ldr	r1, [r1, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6911      	ldr	r1, [r2, #16]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	000186a0 	.word	0x000186a0
 8004360:	001e847f 	.word	0x001e847f
 8004364:	003d08ff 	.word	0x003d08ff
 8004368:	431bde83 	.word	0x431bde83
 800436c:	10624dd3 	.word	0x10624dd3

08004370 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	460b      	mov	r3, r1
 800437e:	817b      	strh	r3, [r7, #10]
 8004380:	4613      	mov	r3, r2
 8004382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7ff fbe8 	bl	8003b58 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 80e0 	bne.w	8004558 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2319      	movs	r3, #25
 800439e:	2201      	movs	r2, #1
 80043a0:	4970      	ldr	r1, [pc, #448]	; (8004564 <HAL_I2C_Master_Transmit+0x1f4>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 ff66 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
 80043b0:	e0d3      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_I2C_Master_Transmit+0x50>
 80043bc:	2302      	movs	r3, #2
 80043be:	e0cc      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d007      	beq.n	80043e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2221      	movs	r2, #33	; 0x21
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2210      	movs	r2, #16
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	893a      	ldrh	r2, [r7, #8]
 8004416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a50      	ldr	r2, [pc, #320]	; (8004568 <HAL_I2C_Master_Transmit+0x1f8>)
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004428:	8979      	ldrh	r1, [r7, #10]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fce8 	bl	8004e04 <I2C_MasterRequestWrite>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e08d      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004454:	e066      	b.n	8004524 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 ffe0 	bl	8005420 <I2C_WaitOnTXEFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b04      	cmp	r3, #4
 800446c:	d107      	bne.n	800447e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06b      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d11b      	bne.n	80044f8 <HAL_I2C_Master_Transmit+0x188>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d017      	beq.n	80044f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	6a39      	ldr	r1, [r7, #32]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 ffd0 	bl	80054a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b04      	cmp	r3, #4
 800450e:	d107      	bne.n	8004520 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e01a      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d194      	bne.n	8004456 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	00100002 	.word	0x00100002
 8004568:	ffff0000 	.word	0xffff0000

0800456c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	; 0x30
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	461a      	mov	r2, r3
 8004578:	460b      	mov	r3, r1
 800457a:	817b      	strh	r3, [r7, #10]
 800457c:	4613      	mov	r3, r2
 800457e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004580:	f7ff faea 	bl	8003b58 <HAL_GetTick>
 8004584:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b20      	cmp	r3, #32
 8004590:	f040 820b 	bne.w	80049aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2319      	movs	r3, #25
 800459a:	2201      	movs	r2, #1
 800459c:	497c      	ldr	r1, [pc, #496]	; (8004790 <HAL_I2C_Master_Receive+0x224>)
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fe68 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
 80045ac:	e1fe      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_I2C_Master_Receive+0x50>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e1f7      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d007      	beq.n	80045e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2222      	movs	r2, #34	; 0x22
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2210      	movs	r2, #16
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	893a      	ldrh	r2, [r7, #8]
 8004612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a5c      	ldr	r2, [pc, #368]	; (8004794 <HAL_I2C_Master_Receive+0x228>)
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004624:	8979      	ldrh	r1, [r7, #10]
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fc6c 	bl	8004f08 <I2C_MasterRequestRead>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1b8      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d113      	bne.n	800466a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004642:	2300      	movs	r3, #0
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	623b      	str	r3, [r7, #32]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e18c      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	2b01      	cmp	r3, #1
 8004670:	d11b      	bne.n	80046aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e16c      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d11b      	bne.n	80046ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	e14c      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004710:	e138      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004716:	2b03      	cmp	r3, #3
 8004718:	f200 80f1 	bhi.w	80048fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b01      	cmp	r3, #1
 8004722:	d123      	bne.n	800476c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fefb 	bl	8005524 <I2C_WaitOnRXNEFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e139      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800476a:	e10b      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b02      	cmp	r3, #2
 8004772:	d14e      	bne.n	8004812 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	2200      	movs	r2, #0
 800477c:	4906      	ldr	r1, [pc, #24]	; (8004798 <HAL_I2C_Master_Receive+0x22c>)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fd78 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e10e      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
 800478e:	bf00      	nop
 8004790:	00100002 	.word	0x00100002
 8004794:	ffff0000 	.word	0xffff0000
 8004798:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004810:	e0b8      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2200      	movs	r2, #0
 800481a:	4966      	ldr	r1, [pc, #408]	; (80049b4 <HAL_I2C_Master_Receive+0x448>)
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fd29 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0bf      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	2200      	movs	r2, #0
 8004876:	494f      	ldr	r1, [pc, #316]	; (80049b4 <HAL_I2C_Master_Receive+0x448>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fcfb 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e091      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048fc:	e042      	b.n	8004984 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fe0e 	bl	8005524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e04c      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b04      	cmp	r3, #4
 8004950:	d118      	bne.n	8004984 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f aec2 	bne.w	8004712 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e000      	b.n	80049ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3728      	adds	r7, #40	; 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	00010004 	.word	0x00010004

080049b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08c      	sub	sp, #48	; 0x30
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	817b      	strh	r3, [r7, #10]
 80049ca:	460b      	mov	r3, r1
 80049cc:	813b      	strh	r3, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d2:	f7ff f8c1 	bl	8003b58 <HAL_GetTick>
 80049d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	f040 8208 	bne.w	8004df6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	2319      	movs	r3, #25
 80049ec:	2201      	movs	r2, #1
 80049ee:	497b      	ldr	r1, [pc, #492]	; (8004bdc <HAL_I2C_Mem_Read+0x224>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fc3f 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
 80049fe:	e1fb      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_I2C_Mem_Read+0x56>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e1f4      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d007      	beq.n	8004a34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2222      	movs	r2, #34	; 0x22
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a5b      	ldr	r2, [pc, #364]	; (8004be0 <HAL_I2C_Mem_Read+0x228>)
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a76:	88f8      	ldrh	r0, [r7, #6]
 8004a78:	893a      	ldrh	r2, [r7, #8]
 8004a7a:	8979      	ldrh	r1, [r7, #10]
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4603      	mov	r3, r0
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fb0c 	bl	80050a4 <I2C_RequestMemoryRead>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e1b0      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d113      	bne.n	8004ac6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e184      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d11b      	bne.n	8004b06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e164      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d11b      	bne.n	8004b46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	e144      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b5c:	e138      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	f200 80f1 	bhi.w	8004d4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d123      	bne.n	8004bb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fcd5 	bl	8005524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e139      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bb6:	e10b      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d14e      	bne.n	8004c5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	4906      	ldr	r1, [pc, #24]	; (8004be4 <HAL_I2C_Mem_Read+0x22c>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fb52 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e10e      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
 8004bda:	bf00      	nop
 8004bdc:	00100002 	.word	0x00100002
 8004be0:	ffff0000 	.word	0xffff0000
 8004be4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c5c:	e0b8      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	2200      	movs	r2, #0
 8004c66:	4966      	ldr	r1, [pc, #408]	; (8004e00 <HAL_I2C_Mem_Read+0x448>)
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fb03 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0bf      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	494f      	ldr	r1, [pc, #316]	; (8004e00 <HAL_I2C_Mem_Read+0x448>)
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fad5 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e091      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d48:	e042      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fbe8 	bl	8005524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e04c      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d118      	bne.n	8004dd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f47f aec2 	bne.w	8004b5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
  }
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3728      	adds	r7, #40	; 0x28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	00010004 	.word	0x00010004

08004e04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	460b      	mov	r3, r1
 8004e12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d006      	beq.n	8004e2e <I2C_MasterRequestWrite+0x2a>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d003      	beq.n	8004e2e <I2C_MasterRequestWrite+0x2a>
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e2c:	d108      	bne.n	8004e40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e00b      	b.n	8004e58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	2b12      	cmp	r3, #18
 8004e46:	d107      	bne.n	8004e58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fa05 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00d      	beq.n	8004e8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7e:	d103      	bne.n	8004e88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e035      	b.n	8004ef8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e94:	d108      	bne.n	8004ea8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e96:	897b      	ldrh	r3, [r7, #10]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ea4:	611a      	str	r2, [r3, #16]
 8004ea6:	e01b      	b.n	8004ee0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ea8:	897b      	ldrh	r3, [r7, #10]
 8004eaa:	11db      	asrs	r3, r3, #7
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f003 0306 	and.w	r3, r3, #6
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f063 030f 	orn	r3, r3, #15
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	490e      	ldr	r1, [pc, #56]	; (8004f00 <I2C_MasterRequestWrite+0xfc>)
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fa2b 	bl	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e010      	b.n	8004ef8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4907      	ldr	r1, [pc, #28]	; (8004f04 <I2C_MasterRequestWrite+0x100>)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fa1b 	bl	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	00010008 	.word	0x00010008
 8004f04:	00010002 	.word	0x00010002

08004f08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	460b      	mov	r3, r1
 8004f16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d006      	beq.n	8004f42 <I2C_MasterRequestRead+0x3a>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d003      	beq.n	8004f42 <I2C_MasterRequestRead+0x3a>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f40:	d108      	bne.n	8004f54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e00b      	b.n	8004f6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2b11      	cmp	r3, #17
 8004f5a:	d107      	bne.n	8004f6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f97b 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f92:	d103      	bne.n	8004f9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e079      	b.n	8005094 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa8:	d108      	bne.n	8004fbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	e05f      	b.n	800507c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fbc:	897b      	ldrh	r3, [r7, #10]
 8004fbe:	11db      	asrs	r3, r3, #7
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f003 0306 	and.w	r3, r3, #6
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f063 030f 	orn	r3, r3, #15
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4930      	ldr	r1, [pc, #192]	; (800509c <I2C_MasterRequestRead+0x194>)
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f9a1 	bl	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e054      	b.n	8005094 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fea:	897b      	ldrh	r3, [r7, #10]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4929      	ldr	r1, [pc, #164]	; (80050a0 <I2C_MasterRequestRead+0x198>)
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f991 	bl	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e044      	b.n	8005094 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800502e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f919 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	d103      	bne.n	8005060 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800505e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e017      	b.n	8005094 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005064:	897b      	ldrh	r3, [r7, #10]
 8005066:	11db      	asrs	r3, r3, #7
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f003 0306 	and.w	r3, r3, #6
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f063 030e 	orn	r3, r3, #14
 8005074:	b2da      	uxtb	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4907      	ldr	r1, [pc, #28]	; (80050a0 <I2C_MasterRequestRead+0x198>)
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f94d 	bl	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	00010008 	.word	0x00010008
 80050a0:	00010002 	.word	0x00010002

080050a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	461a      	mov	r2, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	817b      	strh	r3, [r7, #10]
 80050b6:	460b      	mov	r3, r1
 80050b8:	813b      	strh	r3, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f8c2 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005104:	d103      	bne.n	800510e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e0aa      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005112:	897b      	ldrh	r3, [r7, #10]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005120:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	4952      	ldr	r1, [pc, #328]	; (8005270 <I2C_RequestMemoryRead+0x1cc>)
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f8fa 	bl	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e097      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	6a39      	ldr	r1, [r7, #32]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f964 	bl	8005420 <I2C_WaitOnTXEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b04      	cmp	r3, #4
 8005164:	d107      	bne.n	8005176 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005174:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e076      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005180:	893b      	ldrh	r3, [r7, #8]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]
 800518a:	e021      	b.n	80051d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800518c:	893b      	ldrh	r3, [r7, #8]
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	b29b      	uxth	r3, r3
 8005192:	b2da      	uxtb	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	6a39      	ldr	r1, [r7, #32]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f93e 	bl	8005420 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d107      	bne.n	80051c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e050      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c6:	893b      	ldrh	r3, [r7, #8]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d2:	6a39      	ldr	r1, [r7, #32]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f923 	bl	8005420 <I2C_WaitOnTXEFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d107      	bne.n	80051f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e035      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	2200      	movs	r2, #0
 8005214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f82b 	bl	8005274 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005232:	d103      	bne.n	800523c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e013      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005240:	897b      	ldrh	r3, [r7, #10]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	4906      	ldr	r1, [pc, #24]	; (8005270 <I2C_RequestMemoryRead+0x1cc>)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f863 	bl	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	00010002 	.word	0x00010002

08005274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005284:	e025      	b.n	80052d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528c:	d021      	beq.n	80052d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fe fc63 	bl	8003b58 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d116      	bne.n	80052d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e023      	b.n	800531a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10d      	bne.n	80052f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	43da      	mvns	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	e00c      	b.n	8005312 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	43da      	mvns	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4013      	ands	r3, r2
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	429a      	cmp	r2, r3
 8005316:	d0b6      	beq.n	8005286 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005330:	e051      	b.n	80053d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005340:	d123      	bne.n	800538a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005350:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800535a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f043 0204 	orr.w	r2, r3, #4
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e046      	b.n	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005390:	d021      	beq.n	80053d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005392:	f7fe fbe1 	bl	8003b58 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d116      	bne.n	80053d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e020      	b.n	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10c      	bne.n	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	43da      	mvns	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4013      	ands	r3, r2
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	e00b      	b.n	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	43da      	mvns	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4013      	ands	r3, r2
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d18d      	bne.n	8005332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800542c:	e02d      	b.n	800548a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f8ce 	bl	80055d0 <I2C_IsAcknowledgeFailed>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e02d      	b.n	800549a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005444:	d021      	beq.n	800548a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7fe fb87 	bl	8003b58 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d116      	bne.n	800548a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f043 0220 	orr.w	r2, r3, #32
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e007      	b.n	800549a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005494:	2b80      	cmp	r3, #128	; 0x80
 8005496:	d1ca      	bne.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ae:	e02d      	b.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f88d 	bl	80055d0 <I2C_IsAcknowledgeFailed>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e02d      	b.n	800551c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c6:	d021      	beq.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fe fb46 	bl	8003b58 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d116      	bne.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e007      	b.n	800551c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b04      	cmp	r3, #4
 8005518:	d1ca      	bne.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005530:	e042      	b.n	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b10      	cmp	r3, #16
 800553e:	d119      	bne.n	8005574 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0210 	mvn.w	r2, #16
 8005548:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e029      	b.n	80055c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005574:	f7fe faf0 	bl	8003b58 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	d302      	bcc.n	800558a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d116      	bne.n	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f043 0220 	orr.w	r2, r3, #32
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e007      	b.n	80055c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d1b5      	bne.n	8005532 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e6:	d11b      	bne.n	8005620 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	f043 0204 	orr.w	r2, r3, #4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800562e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005630:	b08f      	sub	sp, #60	; 0x3c
 8005632:	af0a      	add	r7, sp, #40	; 0x28
 8005634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e10f      	b.n	8005860 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f008 ffb8 	bl	800e5d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2203      	movs	r2, #3
 8005664:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f002 fbc3 	bl	8007e0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	603b      	str	r3, [r7, #0]
 800568a:	687e      	ldr	r6, [r7, #4]
 800568c:	466d      	mov	r5, sp
 800568e:	f106 0410 	add.w	r4, r6, #16
 8005692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800569a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800569e:	e885 0003 	stmia.w	r5, {r0, r1}
 80056a2:	1d33      	adds	r3, r6, #4
 80056a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056a6:	6838      	ldr	r0, [r7, #0]
 80056a8:	f002 fa9a 	bl	8007be0 <USB_CoreInit>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e0d0      	b.n	8005860 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2100      	movs	r1, #0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f002 fbb1 	bl	8007e2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
 80056ce:	e04a      	b.n	8005766 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056d0:	7bfa      	ldrb	r2, [r7, #15]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	333d      	adds	r3, #61	; 0x3d
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	333c      	adds	r3, #60	; 0x3c
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	b298      	uxth	r0, r3
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	3342      	adds	r3, #66	; 0x42
 800570c:	4602      	mov	r2, r0
 800570e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005710:	7bfa      	ldrb	r2, [r7, #15]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	333f      	adds	r3, #63	; 0x3f
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005724:	7bfa      	ldrb	r2, [r7, #15]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	3344      	adds	r3, #68	; 0x44
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	3348      	adds	r3, #72	; 0x48
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3350      	adds	r3, #80	; 0x50
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	3301      	adds	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d3af      	bcc.n	80056d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	73fb      	strb	r3, [r7, #15]
 8005774:	e044      	b.n	8005800 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057b8:	7bfa      	ldrb	r2, [r7, #15]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057ce:	7bfa      	ldrb	r2, [r7, #15]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057e4:	7bfa      	ldrb	r2, [r7, #15]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	1a9b      	subs	r3, r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	3301      	adds	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
 8005800:	7bfa      	ldrb	r2, [r7, #15]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	429a      	cmp	r2, r3
 8005808:	d3b5      	bcc.n	8005776 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	687e      	ldr	r6, [r7, #4]
 8005812:	466d      	mov	r5, sp
 8005814:	f106 0410 	add.w	r4, r6, #16
 8005818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800581a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800581c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800581e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005820:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005824:	e885 0003 	stmia.w	r5, {r0, r1}
 8005828:	1d33      	adds	r3, r6, #4
 800582a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800582c:	6838      	ldr	r0, [r7, #0]
 800582e:	f002 fb49 	bl	8007ec4 <USB_DevInit>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e00d      	b.n	8005860 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f003 fbc5 	bl	8008fe8 <USB_DevDisconnect>

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005868 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_PCD_Start+0x1c>
 8005880:	2302      	movs	r3, #2
 8005882:	e020      	b.n	80058c6 <HAL_PCD_Start+0x5e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	2b01      	cmp	r3, #1
 8005892:	d109      	bne.n	80058a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005898:	2b01      	cmp	r3, #1
 800589a:	d005      	beq.n	80058a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f002 fa9b 	bl	8007de8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f003 fb75 	bl	8008fa6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058ce:	b590      	push	{r4, r7, lr}
 80058d0:	b08d      	sub	sp, #52	; 0x34
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f003 fc33 	bl	8009150 <USB_GetMode>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f040 839d 	bne.w	800602c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f003 fb97 	bl	800902a <USB_ReadInterrupts>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 8393 	beq.w	800602a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fb8e 	bl	800902a <USB_ReadInterrupts>
 800590e:	4603      	mov	r3, r0
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b02      	cmp	r3, #2
 8005916:	d107      	bne.n	8005928 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f002 0202 	and.w	r2, r2, #2
 8005926:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f003 fb7c 	bl	800902a <USB_ReadInterrupts>
 8005932:	4603      	mov	r3, r0
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b10      	cmp	r3, #16
 800593a:	d161      	bne.n	8005a00 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0210 	bic.w	r2, r2, #16
 800594a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4413      	add	r3, r2
 8005968:	3304      	adds	r3, #4
 800596a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	0c5b      	lsrs	r3, r3, #17
 8005970:	f003 030f 	and.w	r3, r3, #15
 8005974:	2b02      	cmp	r3, #2
 8005976:	d124      	bne.n	80059c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d035      	beq.n	80059f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800598e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005992:	b29b      	uxth	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	6a38      	ldr	r0, [r7, #32]
 8005998:	f003 f9b3 	bl	8008d02 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	091b      	lsrs	r3, r3, #4
 80059a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059a8:	441a      	add	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ba:	441a      	add	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	619a      	str	r2, [r3, #24]
 80059c0:	e016      	b.n	80059f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	0c5b      	lsrs	r3, r3, #17
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	2b06      	cmp	r3, #6
 80059cc:	d110      	bne.n	80059f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059d4:	2208      	movs	r2, #8
 80059d6:	4619      	mov	r1, r3
 80059d8:	6a38      	ldr	r0, [r7, #32]
 80059da:	f003 f992 	bl	8008d02 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ea:	441a      	add	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0210 	orr.w	r2, r2, #16
 80059fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f003 fb10 	bl	800902a <USB_ReadInterrupts>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a14:	d16e      	bne.n	8005af4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f003 fb16 	bl	8009050 <USB_ReadDevAllOutEpInterrupt>
 8005a24:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005a26:	e062      	b.n	8005aee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d057      	beq.n	8005ae2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f003 fb3b 	bl	80090b8 <USB_ReadDevOutEPInterrupt>
 8005a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fdb0 	bl	80065c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2308      	movs	r3, #8
 8005a82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 feaa 	bl	80067e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d008      	beq.n	8005aa8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	461a      	mov	r2, r3
 8005adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ae0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d199      	bne.n	8005a28 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f003 fa96 	bl	800902a <USB_ReadInterrupts>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b08:	f040 80c0 	bne.w	8005c8c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f003 fab7 	bl	8009084 <USB_ReadDevAllInEpInterrupt>
 8005b16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005b1c:	e0b2      	b.n	8005c84 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80a7 	beq.w	8005c78 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	4611      	mov	r1, r2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f003 fadd 	bl	80090f4 <USB_ReadDevInEPInterrupt>
 8005b3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d057      	beq.n	8005bf6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	69f9      	ldr	r1, [r7, #28]
 8005b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b66:	4013      	ands	r3, r2
 8005b68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	461a      	mov	r2, r3
 8005b78:	2301      	movs	r3, #1
 8005b7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d132      	bne.n	8005bea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	3348      	adds	r3, #72	; 0x48
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4403      	add	r3, r0
 8005ba4:	3344      	adds	r3, #68	; 0x44
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4419      	add	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bae:	4613      	mov	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4403      	add	r3, r0
 8005bb8:	3348      	adds	r3, #72	; 0x48
 8005bba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d113      	bne.n	8005bea <HAL_PCD_IRQHandler+0x31c>
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3350      	adds	r3, #80	; 0x50
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d108      	bne.n	8005bea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005be2:	461a      	mov	r2, r3
 8005be4:	2101      	movs	r1, #1
 8005be6:	f003 fae5 	bl	80091b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f008 fd7c 	bl	800e6ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2308      	movs	r3, #8
 8005c10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2310      	movs	r3, #16
 8005c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	461a      	mov	r2, r3
 8005c46:	2340      	movs	r3, #64	; 0x40
 8005c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	2302      	movs	r3, #2
 8005c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fc1b 	bl	80064ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f47f af49 	bne.w	8005b1e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f003 f9ca 	bl	800902a <USB_ReadInterrupts>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca0:	d122      	bne.n	8005ce8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d108      	bne.n	8005cd2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fe26 	bl	800691c <HAL_PCDEx_LPM_Callback>
 8005cd0:	e002      	b.n	8005cd8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f008 fd82 	bl	800e7dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f003 f99c 	bl	800902a <USB_ReadInterrupts>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfc:	d112      	bne.n	8005d24 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d102      	bne.n	8005d14 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f008 fd3e 	bl	800e790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005d22:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f003 f97e 	bl	800902a <USB_ReadInterrupts>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d38:	f040 80c7 	bne.w	8005eca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
 8005d4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2110      	movs	r1, #16
 8005d56:	4618      	mov	r0, r3
 8005d58:	f002 fa18 	bl	800818c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d60:	e056      	b.n	8005e10 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d86:	0151      	lsls	r1, r2, #5
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	440a      	add	r2, r1
 8005d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d94:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d3a3      	bcc.n	8005d62 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d016      	beq.n	8005e64 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e46:	f043 030b 	orr.w	r3, r3, #11
 8005e4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5c:	f043 030b 	orr.w	r3, r3, #11
 8005e60:	6453      	str	r3, [r2, #68]	; 0x44
 8005e62:	e015      	b.n	8005e90 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005e7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8a:	f043 030b 	orr.w	r3, r3, #11
 8005e8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ea2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f003 f97d 	bl	80091b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f003 f8ab 	bl	800902a <USB_ReadInterrupts>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ede:	d124      	bne.n	8005f2a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f003 f941 	bl	800916c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f002 f9a9 	bl	8008246 <USB_GetDevSpeed>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681c      	ldr	r4, [r3, #0]
 8005f00:	f001 f958 	bl	80071b4 <HAL_RCC_GetHCLKFreq>
 8005f04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f001 fec8 	bl	8007ca4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f008 fc12 	bl	800e73e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f003 f87b 	bl	800902a <USB_ReadInterrupts>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d10a      	bne.n	8005f54 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f008 fbef 	bl	800e722 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f002 0208 	and.w	r2, r2, #8
 8005f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f003 f866 	bl	800902a <USB_ReadInterrupts>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f68:	d10f      	bne.n	8005f8a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f008 fc51 	bl	800e81c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f003 f84b 	bl	800902a <USB_ReadInterrupts>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f9e:	d10f      	bne.n	8005fc0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f008 fc24 	bl	800e7f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f003 f830 	bl	800902a <USB_ReadInterrupts>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d10a      	bne.n	8005fec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f008 fc32 	bl	800e840 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f003 f81a 	bl	800902a <USB_ReadInterrupts>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d115      	bne.n	800602c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f008 fc22 	bl	800e85c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	e000      	b.n	800602c <HAL_PCD_IRQHandler+0x75e>
      return;
 800602a:	bf00      	nop
    }
  }
}
 800602c:	3734      	adds	r7, #52	; 0x34
 800602e:	46bd      	mov	sp, r7
 8006030:	bd90      	pop	{r4, r7, pc}

08006032 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	460b      	mov	r3, r1
 800603c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_PCD_SetAddress+0x1a>
 8006048:	2302      	movs	r3, #2
 800604a:	e013      	b.n	8006074 <HAL_PCD_SetAddress+0x42>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f002 ff78 	bl	8008f5a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	4608      	mov	r0, r1
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	4603      	mov	r3, r0
 800608c:	70fb      	strb	r3, [r7, #3]
 800608e:	460b      	mov	r3, r1
 8006090:	803b      	strh	r3, [r7, #0]
 8006092:	4613      	mov	r3, r2
 8006094:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800609a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da0f      	bge.n	80060c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	f003 020f 	and.w	r2, r3, #15
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	3338      	adds	r3, #56	; 0x38
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4413      	add	r3, r2
 80060b6:	3304      	adds	r3, #4
 80060b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	705a      	strb	r2, [r3, #1]
 80060c0:	e00f      	b.n	80060e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	f003 020f 	and.w	r2, r3, #15
 80060c8:	4613      	mov	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4413      	add	r3, r2
 80060d8:	3304      	adds	r3, #4
 80060da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060ee:	883a      	ldrh	r2, [r7, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	78ba      	ldrb	r2, [r7, #2]
 80060f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800610c:	78bb      	ldrb	r3, [r7, #2]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d102      	bne.n	8006118 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_PCD_EP_Open+0xaa>
 8006122:	2302      	movs	r3, #2
 8006124:	e00e      	b.n	8006144 <HAL_PCD_EP_Open+0xc8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	4618      	mov	r0, r3
 8006136:	f002 f8ab 	bl	8008290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006142:	7afb      	ldrb	r3, [r7, #11]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800615c:	2b00      	cmp	r3, #0
 800615e:	da0f      	bge.n	8006180 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	f003 020f 	and.w	r2, r3, #15
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	3338      	adds	r3, #56	; 0x38
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	3304      	adds	r3, #4
 8006176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	705a      	strb	r2, [r3, #1]
 800617e:	e00f      	b.n	80061a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	f003 020f 	and.w	r2, r3, #15
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	3304      	adds	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_PCD_EP_Close+0x6e>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e00e      	b.n	80061d8 <HAL_PCD_EP_Close+0x8c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f002 f8e9 	bl	80083a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	460b      	mov	r3, r1
 80061ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061f0:	7afb      	ldrb	r3, [r7, #11]
 80061f2:	f003 020f 	and.w	r2, r3, #15
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	3304      	adds	r3, #4
 8006208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2200      	movs	r2, #0
 800621a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2200      	movs	r2, #0
 8006220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006222:	7afb      	ldrb	r3, [r7, #11]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	b2da      	uxtb	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d102      	bne.n	800623c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	f002 fbc4 	bl	80089e0 <USB_EP0StartXfer>
 8006258:	e008      	b.n	800626c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	f002 f976 	bl	8008558 <USB_EPStartXfer>
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006298:	681b      	ldr	r3, [r3, #0]
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	460b      	mov	r3, r1
 80062b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	f003 020f 	and.w	r2, r3, #15
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	3338      	adds	r3, #56	; 0x38
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	3304      	adds	r3, #4
 80062cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2201      	movs	r2, #1
 80062e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d102      	bne.n	8006300 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	f002 fb62 	bl	80089e0 <USB_EP0StartXfer>
 800631c:	e008      	b.n	8006330 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	6979      	ldr	r1, [r7, #20]
 800632c:	f002 f914 	bl	8008558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	f003 020f 	and.w	r2, r3, #15
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d901      	bls.n	8006358 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e050      	b.n	80063fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800635c:	2b00      	cmp	r3, #0
 800635e:	da0f      	bge.n	8006380 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	f003 020f 	and.w	r2, r3, #15
 8006366:	4613      	mov	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	3338      	adds	r3, #56	; 0x38
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	4413      	add	r3, r2
 8006374:	3304      	adds	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	705a      	strb	r2, [r3, #1]
 800637e:	e00d      	b.n	800639c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	4613      	mov	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	1a9b      	subs	r3, r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	3304      	adds	r3, #4
 8006394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_PCD_EP_SetStall+0x82>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e01e      	b.n	80063fa <HAL_PCD_EP_SetStall+0xc0>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f002 fcf1 	bl	8008db2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	b2d9      	uxtb	r1, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063ea:	461a      	mov	r2, r3
 80063ec:	f002 fee2 	bl	80091b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	f003 020f 	and.w	r2, r3, #15
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	d901      	bls.n	8006420 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e042      	b.n	80064a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006424:	2b00      	cmp	r3, #0
 8006426:	da0f      	bge.n	8006448 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	4613      	mov	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	3338      	adds	r3, #56	; 0x38
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	3304      	adds	r3, #4
 800643e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	705a      	strb	r2, [r3, #1]
 8006446:	e00f      	b.n	8006468 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	f003 020f 	and.w	r2, r3, #15
 800644e:	4613      	mov	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	3304      	adds	r3, #4
 8006460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_PCD_EP_ClrStall+0x86>
 8006484:	2302      	movs	r3, #2
 8006486:	e00e      	b.n	80064a6 <HAL_PCD_EP_ClrStall+0xa4>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68f9      	ldr	r1, [r7, #12]
 8006496:	4618      	mov	r0, r3
 8006498:	f002 fcf9 	bl	8008e8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b08a      	sub	sp, #40	; 0x28
 80064b2:	af02      	add	r7, sp, #8
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	3338      	adds	r3, #56	; 0x38
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4413      	add	r3, r2
 80064d2:	3304      	adds	r3, #4
 80064d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d901      	bls.n	80064e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e06c      	b.n	80065c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	695a      	ldr	r2, [r3, #20]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d902      	bls.n	8006502 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	3303      	adds	r3, #3
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800650a:	e02b      	b.n	8006564 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	695a      	ldr	r2, [r3, #20]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	429a      	cmp	r2, r3
 8006520:	d902      	bls.n	8006528 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	3303      	adds	r3, #3
 800652c:	089b      	lsrs	r3, r3, #2
 800652e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68d9      	ldr	r1, [r3, #12]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006540:	b2db      	uxtb	r3, r3
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	4603      	mov	r3, r0
 8006546:	6978      	ldr	r0, [r7, #20]
 8006548:	f002 fb9d 	bl	8008c86 <USB_WritePacket>

    ep->xfer_buff  += len;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	441a      	add	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	699a      	ldr	r2, [r3, #24]
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	441a      	add	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	b29b      	uxth	r3, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	429a      	cmp	r2, r3
 8006578:	d809      	bhi.n	800658e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006582:	429a      	cmp	r2, r3
 8006584:	d203      	bcs.n	800658e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1be      	bne.n	800650c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	429a      	cmp	r2, r3
 8006598:	d811      	bhi.n	80065be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	2201      	movs	r2, #1
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	6939      	ldr	r1, [r7, #16]
 80065b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ba:	4013      	ands	r3, r2
 80065bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	333c      	adds	r3, #60	; 0x3c
 80065e0:	3304      	adds	r3, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	f040 80a0 	bne.w	8006740 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d015      	beq.n	8006636 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a72      	ldr	r2, [pc, #456]	; (80067d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800660e:	4293      	cmp	r3, r2
 8006610:	f240 80dd 	bls.w	80067ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80d7 	beq.w	80067ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	461a      	mov	r2, r3
 800662e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006632:	6093      	str	r3, [r2, #8]
 8006634:	e0cb      	b.n	80067ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	d009      	beq.n	8006654 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	461a      	mov	r2, r3
 800664e:	2320      	movs	r3, #32
 8006650:	6093      	str	r3, [r2, #8]
 8006652:	e0bc      	b.n	80067ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 80b7 	bne.w	80067ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a5d      	ldr	r2, [pc, #372]	; (80067d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d90f      	bls.n	8006688 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	461a      	mov	r2, r3
 8006680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006684:	6093      	str	r3, [r2, #8]
 8006686:	e0a2      	b.n	80067ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800669a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	0159      	lsls	r1, r3, #5
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	440b      	add	r3, r1
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80066ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4403      	add	r3, r0
 80066be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80066c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066d6:	6819      	ldr	r1, [r3, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4403      	add	r3, r0
 80066e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4419      	add	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4403      	add	r3, r0
 80066fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006700:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d114      	bne.n	8006732 <PCD_EP_OutXfrComplete_int+0x16a>
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d108      	bne.n	8006732 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800672a:	461a      	mov	r2, r3
 800672c:	2101      	movs	r1, #1
 800672e:	f002 fd41 	bl	80091b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f007 ffbd 	bl	800e6b8 <HAL_PCD_DataOutStageCallback>
 800673e:	e046      	b.n	80067ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a26      	ldr	r2, [pc, #152]	; (80067dc <PCD_EP_OutXfrComplete_int+0x214>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d124      	bne.n	8006792 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	461a      	mov	r2, r3
 8006760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006764:	6093      	str	r3, [r2, #8]
 8006766:	e032      	b.n	80067ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	461a      	mov	r2, r3
 8006780:	2320      	movs	r3, #32
 8006782:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f007 ff94 	bl	800e6b8 <HAL_PCD_DataOutStageCallback>
 8006790:	e01d      	b.n	80067ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d114      	bne.n	80067c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d108      	bne.n	80067c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067ba:	461a      	mov	r2, r3
 80067bc:	2100      	movs	r1, #0
 80067be:	f002 fcf9 	bl	80091b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f007 ff75 	bl	800e6b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	4f54300a 	.word	0x4f54300a
 80067dc:	4f54310a 	.word	0x4f54310a

080067e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	333c      	adds	r3, #60	; 0x3c
 80067f8:	3304      	adds	r3, #4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4a15      	ldr	r2, [pc, #84]	; (8006868 <PCD_EP_OutSetupPacket_int+0x88>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d90e      	bls.n	8006834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800681c:	2b00      	cmp	r3, #0
 800681e:	d009      	beq.n	8006834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682c:	461a      	mov	r2, r3
 800682e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f007 ff2d 	bl	800e694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <PCD_EP_OutSetupPacket_int+0x88>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d90c      	bls.n	800685c <PCD_EP_OutSetupPacket_int+0x7c>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d108      	bne.n	800685c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006854:	461a      	mov	r2, r3
 8006856:	2101      	movs	r1, #1
 8006858:	f002 fcac 	bl	80091b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	4f54300a 	.word	0x4f54300a

0800686c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
 8006878:	4613      	mov	r3, r2
 800687a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d107      	bne.n	800689a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800688a:	883b      	ldrh	r3, [r7, #0]
 800688c:	0419      	lsls	r1, r3, #16
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	430a      	orrs	r2, r1
 8006896:	629a      	str	r2, [r3, #40]	; 0x28
 8006898:	e028      	b.n	80068ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	4413      	add	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068a8:	2300      	movs	r3, #0
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	e00d      	b.n	80068ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	3340      	adds	r3, #64	; 0x40
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	4413      	add	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	3301      	adds	r3, #1
 80068c8:	73fb      	strb	r3, [r7, #15]
 80068ca:	7bfa      	ldrb	r2, [r7, #15]
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d3ec      	bcc.n	80068ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068d4:	883b      	ldrh	r3, [r7, #0]
 80068d6:	0418      	lsls	r0, r3, #16
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6819      	ldr	r1, [r3, #0]
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	3b01      	subs	r3, #1
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	4302      	orrs	r2, r0
 80068e4:	3340      	adds	r3, #64	; 0x40
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	887a      	ldrh	r2, [r7, #2]
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e264      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d075      	beq.n	8006a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006952:	4ba3      	ldr	r3, [pc, #652]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	2b04      	cmp	r3, #4
 800695c:	d00c      	beq.n	8006978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800695e:	4ba0      	ldr	r3, [pc, #640]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006966:	2b08      	cmp	r3, #8
 8006968:	d112      	bne.n	8006990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800696a:	4b9d      	ldr	r3, [pc, #628]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006976:	d10b      	bne.n	8006990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006978:	4b99      	ldr	r3, [pc, #612]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d05b      	beq.n	8006a3c <HAL_RCC_OscConfig+0x108>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d157      	bne.n	8006a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e23f      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006998:	d106      	bne.n	80069a8 <HAL_RCC_OscConfig+0x74>
 800699a:	4b91      	ldr	r3, [pc, #580]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a90      	ldr	r2, [pc, #576]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e01d      	b.n	80069e4 <HAL_RCC_OscConfig+0xb0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x98>
 80069b2:	4b8b      	ldr	r3, [pc, #556]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a8a      	ldr	r2, [pc, #552]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4b88      	ldr	r3, [pc, #544]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a87      	ldr	r2, [pc, #540]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e00b      	b.n	80069e4 <HAL_RCC_OscConfig+0xb0>
 80069cc:	4b84      	ldr	r3, [pc, #528]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a83      	ldr	r2, [pc, #524]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	4b81      	ldr	r3, [pc, #516]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a80      	ldr	r2, [pc, #512]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 80069de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d013      	beq.n	8006a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ec:	f7fd f8b4 	bl	8003b58 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069f4:	f7fd f8b0 	bl	8003b58 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b64      	cmp	r3, #100	; 0x64
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e204      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a06:	4b76      	ldr	r3, [pc, #472]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0xc0>
 8006a12:	e014      	b.n	8006a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a14:	f7fd f8a0 	bl	8003b58 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a1c:	f7fd f89c 	bl	8003b58 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b64      	cmp	r3, #100	; 0x64
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e1f0      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a2e:	4b6c      	ldr	r3, [pc, #432]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0xe8>
 8006a3a:	e000      	b.n	8006a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d063      	beq.n	8006b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a4a:	4b65      	ldr	r3, [pc, #404]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 030c 	and.w	r3, r3, #12
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a56:	4b62      	ldr	r3, [pc, #392]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d11c      	bne.n	8006a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a62:	4b5f      	ldr	r3, [pc, #380]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d116      	bne.n	8006a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a6e:	4b5c      	ldr	r3, [pc, #368]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <HAL_RCC_OscConfig+0x152>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d001      	beq.n	8006a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e1c4      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a86:	4b56      	ldr	r3, [pc, #344]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4952      	ldr	r1, [pc, #328]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9a:	e03a      	b.n	8006b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d020      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aa4:	4b4f      	ldr	r3, [pc, #316]	; (8006be4 <HAL_RCC_OscConfig+0x2b0>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aaa:	f7fd f855 	bl	8003b58 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab2:	f7fd f851 	bl	8003b58 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e1a5      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac4:	4b46      	ldr	r3, [pc, #280]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f0      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad0:	4b43      	ldr	r3, [pc, #268]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	4940      	ldr	r1, [pc, #256]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	600b      	str	r3, [r1, #0]
 8006ae4:	e015      	b.n	8006b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ae6:	4b3f      	ldr	r3, [pc, #252]	; (8006be4 <HAL_RCC_OscConfig+0x2b0>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aec:	f7fd f834 	bl	8003b58 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af4:	f7fd f830 	bl	8003b58 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e184      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b06:	4b36      	ldr	r3, [pc, #216]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f0      	bne.n	8006af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d030      	beq.n	8006b80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d016      	beq.n	8006b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b26:	4b30      	ldr	r3, [pc, #192]	; (8006be8 <HAL_RCC_OscConfig+0x2b4>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2c:	f7fd f814 	bl	8003b58 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b34:	f7fd f810 	bl	8003b58 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e164      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b46:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f0      	beq.n	8006b34 <HAL_RCC_OscConfig+0x200>
 8006b52:	e015      	b.n	8006b80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b54:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <HAL_RCC_OscConfig+0x2b4>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5a:	f7fc fffd 	bl	8003b58 <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b62:	f7fc fff9 	bl	8003b58 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e14d      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f0      	bne.n	8006b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80a0 	beq.w	8006cce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10f      	bne.n	8006bbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	4a0e      	ldr	r2, [pc, #56]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bac:	6413      	str	r3, [r2, #64]	; 0x40
 8006bae:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb6:	60bb      	str	r3, [r7, #8]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <HAL_RCC_OscConfig+0x2b8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d121      	bne.n	8006c0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bca:	4b08      	ldr	r3, [pc, #32]	; (8006bec <HAL_RCC_OscConfig+0x2b8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a07      	ldr	r2, [pc, #28]	; (8006bec <HAL_RCC_OscConfig+0x2b8>)
 8006bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bd6:	f7fc ffbf 	bl	8003b58 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bdc:	e011      	b.n	8006c02 <HAL_RCC_OscConfig+0x2ce>
 8006bde:	bf00      	nop
 8006be0:	40023800 	.word	0x40023800
 8006be4:	42470000 	.word	0x42470000
 8006be8:	42470e80 	.word	0x42470e80
 8006bec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf0:	f7fc ffb2 	bl	8003b58 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e106      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c02:	4b85      	ldr	r3, [pc, #532]	; (8006e18 <HAL_RCC_OscConfig+0x4e4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d106      	bne.n	8006c24 <HAL_RCC_OscConfig+0x2f0>
 8006c16:	4b81      	ldr	r3, [pc, #516]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1a:	4a80      	ldr	r2, [pc, #512]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	6713      	str	r3, [r2, #112]	; 0x70
 8006c22:	e01c      	b.n	8006c5e <HAL_RCC_OscConfig+0x32a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2b05      	cmp	r3, #5
 8006c2a:	d10c      	bne.n	8006c46 <HAL_RCC_OscConfig+0x312>
 8006c2c:	4b7b      	ldr	r3, [pc, #492]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	4a7a      	ldr	r2, [pc, #488]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c32:	f043 0304 	orr.w	r3, r3, #4
 8006c36:	6713      	str	r3, [r2, #112]	; 0x70
 8006c38:	4b78      	ldr	r3, [pc, #480]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3c:	4a77      	ldr	r2, [pc, #476]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	6713      	str	r3, [r2, #112]	; 0x70
 8006c44:	e00b      	b.n	8006c5e <HAL_RCC_OscConfig+0x32a>
 8006c46:	4b75      	ldr	r3, [pc, #468]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	4a74      	ldr	r2, [pc, #464]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	6713      	str	r3, [r2, #112]	; 0x70
 8006c52:	4b72      	ldr	r3, [pc, #456]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4a71      	ldr	r2, [pc, #452]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c58:	f023 0304 	bic.w	r3, r3, #4
 8006c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d015      	beq.n	8006c92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c66:	f7fc ff77 	bl	8003b58 <HAL_GetTick>
 8006c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c6c:	e00a      	b.n	8006c84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c6e:	f7fc ff73 	bl	8003b58 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e0c5      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	4b65      	ldr	r3, [pc, #404]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0ee      	beq.n	8006c6e <HAL_RCC_OscConfig+0x33a>
 8006c90:	e014      	b.n	8006cbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c92:	f7fc ff61 	bl	8003b58 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c98:	e00a      	b.n	8006cb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c9a:	f7fc ff5d 	bl	8003b58 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e0af      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb0:	4b5a      	ldr	r3, [pc, #360]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1ee      	bne.n	8006c9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d105      	bne.n	8006cce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc2:	4b56      	ldr	r3, [pc, #344]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	4a55      	ldr	r2, [pc, #340]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 809b 	beq.w	8006e0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cd8:	4b50      	ldr	r3, [pc, #320]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 030c 	and.w	r3, r3, #12
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d05c      	beq.n	8006d9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d141      	bne.n	8006d70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cec:	4b4c      	ldr	r3, [pc, #304]	; (8006e20 <HAL_RCC_OscConfig+0x4ec>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf2:	f7fc ff31 	bl	8003b58 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cfa:	f7fc ff2d 	bl	8003b58 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e081      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d0c:	4b43      	ldr	r3, [pc, #268]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f0      	bne.n	8006cfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	019b      	lsls	r3, r3, #6
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	3b01      	subs	r3, #1
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	061b      	lsls	r3, r3, #24
 8006d3c:	4937      	ldr	r1, [pc, #220]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d42:	4b37      	ldr	r3, [pc, #220]	; (8006e20 <HAL_RCC_OscConfig+0x4ec>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d48:	f7fc ff06 	bl	8003b58 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d50:	f7fc ff02 	bl	8003b58 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e056      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d62:	4b2e      	ldr	r3, [pc, #184]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0f0      	beq.n	8006d50 <HAL_RCC_OscConfig+0x41c>
 8006d6e:	e04e      	b.n	8006e0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d70:	4b2b      	ldr	r3, [pc, #172]	; (8006e20 <HAL_RCC_OscConfig+0x4ec>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d76:	f7fc feef 	bl	8003b58 <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7c:	e008      	b.n	8006d90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d7e:	f7fc feeb 	bl	8003b58 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e03f      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d90:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f0      	bne.n	8006d7e <HAL_RCC_OscConfig+0x44a>
 8006d9c:	e037      	b.n	8006e0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e032      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006daa:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <HAL_RCC_OscConfig+0x4e8>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d028      	beq.n	8006e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d121      	bne.n	8006e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d11a      	bne.n	8006e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dda:	4013      	ands	r3, r2
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006de0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d111      	bne.n	8006e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	3b01      	subs	r3, #1
 8006df4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d107      	bne.n	8006e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d001      	beq.n	8006e0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40007000 	.word	0x40007000
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	42470060 	.word	0x42470060

08006e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0cc      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e38:	4b68      	ldr	r3, [pc, #416]	; (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d90c      	bls.n	8006e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b65      	ldr	r3, [pc, #404]	; (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4e:	4b63      	ldr	r3, [pc, #396]	; (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d001      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0b8      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d020      	beq.n	8006eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e78:	4b59      	ldr	r3, [pc, #356]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	4a58      	ldr	r2, [pc, #352]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e90:	4b53      	ldr	r3, [pc, #332]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	4a52      	ldr	r2, [pc, #328]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9c:	4b50      	ldr	r3, [pc, #320]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	494d      	ldr	r1, [pc, #308]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d044      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d107      	bne.n	8006ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ec2:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d119      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e07f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d107      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee2:	4b3f      	ldr	r3, [pc, #252]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e06f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef2:	4b3b      	ldr	r3, [pc, #236]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e067      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f02:	4b37      	ldr	r3, [pc, #220]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f023 0203 	bic.w	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4934      	ldr	r1, [pc, #208]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f14:	f7fc fe20 	bl	8003b58 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1a:	e00a      	b.n	8006f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f1c:	f7fc fe1c 	bl	8003b58 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e04f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f32:	4b2b      	ldr	r3, [pc, #172]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 020c 	and.w	r2, r3, #12
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d1eb      	bne.n	8006f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f44:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d20c      	bcs.n	8006f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f52:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5a:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d001      	beq.n	8006f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e032      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4916      	ldr	r1, [pc, #88]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f96:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	490e      	ldr	r1, [pc, #56]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006faa:	f000 f821 	bl	8006ff0 <HAL_RCC_GetSysClockFreq>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	490a      	ldr	r1, [pc, #40]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006fbc:	5ccb      	ldrb	r3, [r1, r3]
 8006fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc2:	4a09      	ldr	r2, [pc, #36]	; (8006fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fc6:	4b09      	ldr	r3, [pc, #36]	; (8006fec <HAL_RCC_ClockConfig+0x1c8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fc fbf0 	bl	80037b0 <HAL_InitTick>

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40023c00 	.word	0x40023c00
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	08011ea0 	.word	0x08011ea0
 8006fe8:	20000000 	.word	0x20000000
 8006fec:	20000004 	.word	0x20000004

08006ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	2300      	movs	r3, #0
 8007002:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007008:	4b67      	ldr	r3, [pc, #412]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 030c 	and.w	r3, r3, #12
 8007010:	2b08      	cmp	r3, #8
 8007012:	d00d      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0x40>
 8007014:	2b08      	cmp	r3, #8
 8007016:	f200 80bd 	bhi.w	8007194 <HAL_RCC_GetSysClockFreq+0x1a4>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_RCC_GetSysClockFreq+0x34>
 800701e:	2b04      	cmp	r3, #4
 8007020:	d003      	beq.n	800702a <HAL_RCC_GetSysClockFreq+0x3a>
 8007022:	e0b7      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007024:	4b61      	ldr	r3, [pc, #388]	; (80071ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007026:	60bb      	str	r3, [r7, #8]
       break;
 8007028:	e0b7      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800702a:	4b61      	ldr	r3, [pc, #388]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800702c:	60bb      	str	r3, [r7, #8]
      break;
 800702e:	e0b4      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007030:	4b5d      	ldr	r3, [pc, #372]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007038:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800703a:	4b5b      	ldr	r3, [pc, #364]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d04d      	beq.n	80070e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007046:	4b58      	ldr	r3, [pc, #352]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	099b      	lsrs	r3, r3, #6
 800704c:	461a      	mov	r2, r3
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007056:	f04f 0100 	mov.w	r1, #0
 800705a:	ea02 0800 	and.w	r8, r2, r0
 800705e:	ea03 0901 	and.w	r9, r3, r1
 8007062:	4640      	mov	r0, r8
 8007064:	4649      	mov	r1, r9
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	014b      	lsls	r3, r1, #5
 8007070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007074:	0142      	lsls	r2, r0, #5
 8007076:	4610      	mov	r0, r2
 8007078:	4619      	mov	r1, r3
 800707a:	ebb0 0008 	subs.w	r0, r0, r8
 800707e:	eb61 0109 	sbc.w	r1, r1, r9
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	018b      	lsls	r3, r1, #6
 800708c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007090:	0182      	lsls	r2, r0, #6
 8007092:	1a12      	subs	r2, r2, r0
 8007094:	eb63 0301 	sbc.w	r3, r3, r1
 8007098:	f04f 0000 	mov.w	r0, #0
 800709c:	f04f 0100 	mov.w	r1, #0
 80070a0:	00d9      	lsls	r1, r3, #3
 80070a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070a6:	00d0      	lsls	r0, r2, #3
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	eb12 0208 	adds.w	r2, r2, r8
 80070b0:	eb43 0309 	adc.w	r3, r3, r9
 80070b4:	f04f 0000 	mov.w	r0, #0
 80070b8:	f04f 0100 	mov.w	r1, #0
 80070bc:	0259      	lsls	r1, r3, #9
 80070be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80070c2:	0250      	lsls	r0, r2, #9
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4610      	mov	r0, r2
 80070ca:	4619      	mov	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	f7f9 fdb8 	bl	8000c48 <__aeabi_uldivmod>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4613      	mov	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e04a      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070e2:	4b31      	ldr	r3, [pc, #196]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	099b      	lsrs	r3, r3, #6
 80070e8:	461a      	mov	r2, r3
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070f2:	f04f 0100 	mov.w	r1, #0
 80070f6:	ea02 0400 	and.w	r4, r2, r0
 80070fa:	ea03 0501 	and.w	r5, r3, r1
 80070fe:	4620      	mov	r0, r4
 8007100:	4629      	mov	r1, r5
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	014b      	lsls	r3, r1, #5
 800710c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007110:	0142      	lsls	r2, r0, #5
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	1b00      	subs	r0, r0, r4
 8007118:	eb61 0105 	sbc.w	r1, r1, r5
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	018b      	lsls	r3, r1, #6
 8007126:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800712a:	0182      	lsls	r2, r0, #6
 800712c:	1a12      	subs	r2, r2, r0
 800712e:	eb63 0301 	sbc.w	r3, r3, r1
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f04f 0100 	mov.w	r1, #0
 800713a:	00d9      	lsls	r1, r3, #3
 800713c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007140:	00d0      	lsls	r0, r2, #3
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	1912      	adds	r2, r2, r4
 8007148:	eb45 0303 	adc.w	r3, r5, r3
 800714c:	f04f 0000 	mov.w	r0, #0
 8007150:	f04f 0100 	mov.w	r1, #0
 8007154:	0299      	lsls	r1, r3, #10
 8007156:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800715a:	0290      	lsls	r0, r2, #10
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4610      	mov	r0, r2
 8007162:	4619      	mov	r1, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	461a      	mov	r2, r3
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	f7f9 fd6c 	bl	8000c48 <__aeabi_uldivmod>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4613      	mov	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007178:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	0c1b      	lsrs	r3, r3, #16
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	3301      	adds	r3, #1
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007190:	60bb      	str	r3, [r7, #8]
      break;
 8007192:	e002      	b.n	800719a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007196:	60bb      	str	r3, [r7, #8]
      break;
 8007198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800719a:	68bb      	ldr	r3, [r7, #8]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800
 80071ac:	00f42400 	.word	0x00f42400
 80071b0:	007a1200 	.word	0x007a1200

080071b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071b8:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80071ba:	681b      	ldr	r3, [r3, #0]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000000 	.word	0x20000000

080071cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071d0:	f7ff fff0 	bl	80071b4 <HAL_RCC_GetHCLKFreq>
 80071d4:	4602      	mov	r2, r0
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	0a9b      	lsrs	r3, r3, #10
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	4903      	ldr	r1, [pc, #12]	; (80071f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071e2:	5ccb      	ldrb	r3, [r1, r3]
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40023800 	.word	0x40023800
 80071f0:	08011eb0 	.word	0x08011eb0

080071f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071f8:	f7ff ffdc 	bl	80071b4 <HAL_RCC_GetHCLKFreq>
 80071fc:	4602      	mov	r2, r0
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	0b5b      	lsrs	r3, r3, #13
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	4903      	ldr	r1, [pc, #12]	; (8007218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800720a:	5ccb      	ldrb	r3, [r1, r3]
 800720c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007210:	4618      	mov	r0, r3
 8007212:	bd80      	pop	{r7, pc}
 8007214:	40023800 	.word	0x40023800
 8007218:	08011eb0 	.word	0x08011eb0

0800721c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	220f      	movs	r2, #15
 800722a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800722c:	4b12      	ldr	r3, [pc, #72]	; (8007278 <HAL_RCC_GetClockConfig+0x5c>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0203 	and.w	r2, r3, #3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <HAL_RCC_GetClockConfig+0x5c>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007244:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <HAL_RCC_GetClockConfig+0x5c>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <HAL_RCC_GetClockConfig+0x5c>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	08db      	lsrs	r3, r3, #3
 8007256:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <HAL_RCC_GetClockConfig+0x60>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0207 	and.w	r2, r3, #7
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800
 800727c:	40023c00 	.word	0x40023c00

08007280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e041      	b.n	8007316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fc fa20 	bl	80036ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f000 fac4 	bl	800784c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b01      	cmp	r3, #1
 8007332:	d001      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e04e      	b.n	80073d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a23      	ldr	r2, [pc, #140]	; (80073e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d022      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007362:	d01d      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1f      	ldr	r2, [pc, #124]	; (80073e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d018      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1b      	ldr	r2, [pc, #108]	; (80073f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a19      	ldr	r2, [pc, #100]	; (80073f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a18      	ldr	r2, [pc, #96]	; (80073fc <HAL_TIM_Base_Start_IT+0xdc>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d111      	bne.n	80073c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b06      	cmp	r3, #6
 80073b0:	d010      	beq.n	80073d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0201 	orr.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c2:	e007      	b.n	80073d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40010400 	.word	0x40010400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40001800 	.word	0x40001800

08007400 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0201 	bic.w	r2, r2, #1
 8007416:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6a1a      	ldr	r2, [r3, #32]
 800741e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007422:	4013      	ands	r3, r2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10f      	bne.n	8007448 <HAL_TIM_Base_Stop_IT+0x48>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6a1a      	ldr	r2, [r3, #32]
 800742e:	f240 4344 	movw	r3, #1092	; 0x444
 8007432:	4013      	ands	r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d107      	bne.n	8007448 <HAL_TIM_Base_Stop_IT+0x48>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b02      	cmp	r3, #2
 8007472:	d122      	bne.n	80074ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d11b      	bne.n	80074ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f06f 0202 	mvn.w	r2, #2
 800748a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f9b5 	bl	8007810 <HAL_TIM_IC_CaptureCallback>
 80074a6:	e005      	b.n	80074b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f9a7 	bl	80077fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9b8 	bl	8007824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d122      	bne.n	800750e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d11b      	bne.n	800750e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f06f 0204 	mvn.w	r2, #4
 80074de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f98b 	bl	8007810 <HAL_TIM_IC_CaptureCallback>
 80074fa:	e005      	b.n	8007508 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f97d 	bl	80077fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f98e 	bl	8007824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b08      	cmp	r3, #8
 800751a:	d122      	bne.n	8007562 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b08      	cmp	r3, #8
 8007528:	d11b      	bne.n	8007562 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f06f 0208 	mvn.w	r2, #8
 8007532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2204      	movs	r2, #4
 8007538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	f003 0303 	and.w	r3, r3, #3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f961 	bl	8007810 <HAL_TIM_IC_CaptureCallback>
 800754e:	e005      	b.n	800755c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f953 	bl	80077fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f964 	bl	8007824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b10      	cmp	r3, #16
 800756e:	d122      	bne.n	80075b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	2b10      	cmp	r3, #16
 800757c:	d11b      	bne.n	80075b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f06f 0210 	mvn.w	r2, #16
 8007586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2208      	movs	r2, #8
 800758c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f937 	bl	8007810 <HAL_TIM_IC_CaptureCallback>
 80075a2:	e005      	b.n	80075b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f929 	bl	80077fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f93a 	bl	8007824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d10e      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d107      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f06f 0201 	mvn.w	r2, #1
 80075da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fb ffb3 	bl	8003548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d10e      	bne.n	800760e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b80      	cmp	r3, #128	; 0x80
 80075fc:	d107      	bne.n	800760e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fadf 	bl	8007bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d10e      	bne.n	800763a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d107      	bne.n	800763a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f8ff 	bl	8007838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b20      	cmp	r3, #32
 8007646:	d10e      	bne.n	8007666 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b20      	cmp	r3, #32
 8007654:	d107      	bne.n	8007666 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f06f 0220 	mvn.w	r2, #32
 800765e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 faa9 	bl	8007bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_TIM_ConfigClockSource+0x1c>
 8007686:	2302      	movs	r3, #2
 8007688:	e0b4      	b.n	80077f4 <HAL_TIM_ConfigClockSource+0x186>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2202      	movs	r2, #2
 8007696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c2:	d03e      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0xd4>
 80076c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c8:	f200 8087 	bhi.w	80077da <HAL_TIM_ConfigClockSource+0x16c>
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d0:	f000 8086 	beq.w	80077e0 <HAL_TIM_ConfigClockSource+0x172>
 80076d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d8:	d87f      	bhi.n	80077da <HAL_TIM_ConfigClockSource+0x16c>
 80076da:	2b70      	cmp	r3, #112	; 0x70
 80076dc:	d01a      	beq.n	8007714 <HAL_TIM_ConfigClockSource+0xa6>
 80076de:	2b70      	cmp	r3, #112	; 0x70
 80076e0:	d87b      	bhi.n	80077da <HAL_TIM_ConfigClockSource+0x16c>
 80076e2:	2b60      	cmp	r3, #96	; 0x60
 80076e4:	d050      	beq.n	8007788 <HAL_TIM_ConfigClockSource+0x11a>
 80076e6:	2b60      	cmp	r3, #96	; 0x60
 80076e8:	d877      	bhi.n	80077da <HAL_TIM_ConfigClockSource+0x16c>
 80076ea:	2b50      	cmp	r3, #80	; 0x50
 80076ec:	d03c      	beq.n	8007768 <HAL_TIM_ConfigClockSource+0xfa>
 80076ee:	2b50      	cmp	r3, #80	; 0x50
 80076f0:	d873      	bhi.n	80077da <HAL_TIM_ConfigClockSource+0x16c>
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d058      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x13a>
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d86f      	bhi.n	80077da <HAL_TIM_ConfigClockSource+0x16c>
 80076fa:	2b30      	cmp	r3, #48	; 0x30
 80076fc:	d064      	beq.n	80077c8 <HAL_TIM_ConfigClockSource+0x15a>
 80076fe:	2b30      	cmp	r3, #48	; 0x30
 8007700:	d86b      	bhi.n	80077da <HAL_TIM_ConfigClockSource+0x16c>
 8007702:	2b20      	cmp	r3, #32
 8007704:	d060      	beq.n	80077c8 <HAL_TIM_ConfigClockSource+0x15a>
 8007706:	2b20      	cmp	r3, #32
 8007708:	d867      	bhi.n	80077da <HAL_TIM_ConfigClockSource+0x16c>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d05c      	beq.n	80077c8 <HAL_TIM_ConfigClockSource+0x15a>
 800770e:	2b10      	cmp	r3, #16
 8007710:	d05a      	beq.n	80077c8 <HAL_TIM_ConfigClockSource+0x15a>
 8007712:	e062      	b.n	80077da <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	6899      	ldr	r1, [r3, #8]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f000 f9ac 	bl	8007a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007736:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	609a      	str	r2, [r3, #8]
      break;
 8007740:	e04f      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6899      	ldr	r1, [r3, #8]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f000 f995 	bl	8007a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007764:	609a      	str	r2, [r3, #8]
      break;
 8007766:	e03c      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	6859      	ldr	r1, [r3, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	461a      	mov	r2, r3
 8007776:	f000 f909 	bl	800798c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2150      	movs	r1, #80	; 0x50
 8007780:	4618      	mov	r0, r3
 8007782:	f000 f962 	bl	8007a4a <TIM_ITRx_SetConfig>
      break;
 8007786:	e02c      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	6859      	ldr	r1, [r3, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	461a      	mov	r2, r3
 8007796:	f000 f928 	bl	80079ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2160      	movs	r1, #96	; 0x60
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 f952 	bl	8007a4a <TIM_ITRx_SetConfig>
      break;
 80077a6:	e01c      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	6859      	ldr	r1, [r3, #4]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	461a      	mov	r2, r3
 80077b6:	f000 f8e9 	bl	800798c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2140      	movs	r1, #64	; 0x40
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f942 	bl	8007a4a <TIM_ITRx_SetConfig>
      break;
 80077c6:	e00c      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f000 f939 	bl	8007a4a <TIM_ITRx_SetConfig>
      break;
 80077d8:	e003      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	73fb      	strb	r3, [r7, #15]
      break;
 80077de:	e000      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a40      	ldr	r2, [pc, #256]	; (8007960 <TIM_Base_SetConfig+0x114>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786a:	d00f      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a3d      	ldr	r2, [pc, #244]	; (8007964 <TIM_Base_SetConfig+0x118>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00b      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a3c      	ldr	r2, [pc, #240]	; (8007968 <TIM_Base_SetConfig+0x11c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d007      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a3b      	ldr	r2, [pc, #236]	; (800796c <TIM_Base_SetConfig+0x120>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a3a      	ldr	r2, [pc, #232]	; (8007970 <TIM_Base_SetConfig+0x124>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d108      	bne.n	800789e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2f      	ldr	r2, [pc, #188]	; (8007960 <TIM_Base_SetConfig+0x114>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d02b      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ac:	d027      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2c      	ldr	r2, [pc, #176]	; (8007964 <TIM_Base_SetConfig+0x118>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d023      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2b      	ldr	r2, [pc, #172]	; (8007968 <TIM_Base_SetConfig+0x11c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d01f      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2a      	ldr	r2, [pc, #168]	; (800796c <TIM_Base_SetConfig+0x120>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d01b      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a29      	ldr	r2, [pc, #164]	; (8007970 <TIM_Base_SetConfig+0x124>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d017      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a28      	ldr	r2, [pc, #160]	; (8007974 <TIM_Base_SetConfig+0x128>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d013      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a27      	ldr	r2, [pc, #156]	; (8007978 <TIM_Base_SetConfig+0x12c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00f      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a26      	ldr	r2, [pc, #152]	; (800797c <TIM_Base_SetConfig+0x130>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00b      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a25      	ldr	r2, [pc, #148]	; (8007980 <TIM_Base_SetConfig+0x134>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d007      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a24      	ldr	r2, [pc, #144]	; (8007984 <TIM_Base_SetConfig+0x138>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d003      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a23      	ldr	r2, [pc, #140]	; (8007988 <TIM_Base_SetConfig+0x13c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d108      	bne.n	8007910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <TIM_Base_SetConfig+0x114>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_Base_SetConfig+0xf8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a0c      	ldr	r2, [pc, #48]	; (8007970 <TIM_Base_SetConfig+0x124>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d103      	bne.n	800794c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	615a      	str	r2, [r3, #20]
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40010000 	.word	0x40010000
 8007964:	40000400 	.word	0x40000400
 8007968:	40000800 	.word	0x40000800
 800796c:	40000c00 	.word	0x40000c00
 8007970:	40010400 	.word	0x40010400
 8007974:	40014000 	.word	0x40014000
 8007978:	40014400 	.word	0x40014400
 800797c:	40014800 	.word	0x40014800
 8007980:	40001800 	.word	0x40001800
 8007984:	40001c00 	.word	0x40001c00
 8007988:	40002000 	.word	0x40002000

0800798c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f023 0201 	bic.w	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4313      	orrs	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f023 030a 	bic.w	r3, r3, #10
 80079c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b087      	sub	sp, #28
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f023 0210 	bic.w	r2, r3, #16
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	031b      	lsls	r3, r3, #12
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	621a      	str	r2, [r3, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f043 0307 	orr.w	r3, r3, #7
 8007a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	609a      	str	r2, [r3, #8]
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	021a      	lsls	r2, r3, #8
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	609a      	str	r2, [r3, #8]
}
 8007ab4:	bf00      	nop
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e05a      	b.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a21      	ldr	r2, [pc, #132]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d022      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b24:	d01d      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1d      	ldr	r2, [pc, #116]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d018      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d013      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00e      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a18      	ldr	r2, [pc, #96]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a17      	ldr	r2, [pc, #92]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a15      	ldr	r2, [pc, #84]	; (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d10c      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	40000c00 	.word	0x40000c00
 8007bac:	40010400 	.word	0x40010400
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40001800 	.word	0x40001800

08007bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007be0:	b084      	sub	sp, #16
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	f107 001c 	add.w	r0, r7, #28
 8007bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d122      	bne.n	8007c3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d105      	bne.n	8007c32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fb1c 	bl	8009270 <USB_CoreReset>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]
 8007c3c:	e01a      	b.n	8007c74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fb10 	bl	8009270 <USB_CoreReset>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	639a      	str	r2, [r3, #56]	; 0x38
 8007c66:	e005      	b.n	8007c74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d10b      	bne.n	8007c92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f043 0206 	orr.w	r2, r3, #6
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f043 0220 	orr.w	r2, r3, #32
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c9e:	b004      	add	sp, #16
 8007ca0:	4770      	bx	lr
	...

08007ca4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d165      	bne.n	8007d84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4a41      	ldr	r2, [pc, #260]	; (8007dc0 <USB_SetTurnaroundTime+0x11c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d906      	bls.n	8007cce <USB_SetTurnaroundTime+0x2a>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4a40      	ldr	r2, [pc, #256]	; (8007dc4 <USB_SetTurnaroundTime+0x120>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d202      	bcs.n	8007cce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007cc8:	230f      	movs	r3, #15
 8007cca:	617b      	str	r3, [r7, #20]
 8007ccc:	e062      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	4a3c      	ldr	r2, [pc, #240]	; (8007dc4 <USB_SetTurnaroundTime+0x120>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d306      	bcc.n	8007ce4 <USB_SetTurnaroundTime+0x40>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	4a3b      	ldr	r2, [pc, #236]	; (8007dc8 <USB_SetTurnaroundTime+0x124>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d202      	bcs.n	8007ce4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007cde:	230e      	movs	r3, #14
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	e057      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4a38      	ldr	r2, [pc, #224]	; (8007dc8 <USB_SetTurnaroundTime+0x124>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d306      	bcc.n	8007cfa <USB_SetTurnaroundTime+0x56>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4a37      	ldr	r2, [pc, #220]	; (8007dcc <USB_SetTurnaroundTime+0x128>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d202      	bcs.n	8007cfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007cf4:	230d      	movs	r3, #13
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	e04c      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	4a33      	ldr	r2, [pc, #204]	; (8007dcc <USB_SetTurnaroundTime+0x128>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d306      	bcc.n	8007d10 <USB_SetTurnaroundTime+0x6c>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	4a32      	ldr	r2, [pc, #200]	; (8007dd0 <USB_SetTurnaroundTime+0x12c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d802      	bhi.n	8007d10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	e041      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4a2f      	ldr	r2, [pc, #188]	; (8007dd0 <USB_SetTurnaroundTime+0x12c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d906      	bls.n	8007d26 <USB_SetTurnaroundTime+0x82>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4a2e      	ldr	r2, [pc, #184]	; (8007dd4 <USB_SetTurnaroundTime+0x130>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d802      	bhi.n	8007d26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d20:	230b      	movs	r3, #11
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	e036      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	4a2a      	ldr	r2, [pc, #168]	; (8007dd4 <USB_SetTurnaroundTime+0x130>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d906      	bls.n	8007d3c <USB_SetTurnaroundTime+0x98>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4a29      	ldr	r2, [pc, #164]	; (8007dd8 <USB_SetTurnaroundTime+0x134>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d802      	bhi.n	8007d3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d36:	230a      	movs	r3, #10
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	e02b      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4a26      	ldr	r2, [pc, #152]	; (8007dd8 <USB_SetTurnaroundTime+0x134>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d906      	bls.n	8007d52 <USB_SetTurnaroundTime+0xae>
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4a25      	ldr	r2, [pc, #148]	; (8007ddc <USB_SetTurnaroundTime+0x138>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d202      	bcs.n	8007d52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d4c:	2309      	movs	r3, #9
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e020      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <USB_SetTurnaroundTime+0x138>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d306      	bcc.n	8007d68 <USB_SetTurnaroundTime+0xc4>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <USB_SetTurnaroundTime+0x13c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d802      	bhi.n	8007d68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d62:	2308      	movs	r3, #8
 8007d64:	617b      	str	r3, [r7, #20]
 8007d66:	e015      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4a1d      	ldr	r2, [pc, #116]	; (8007de0 <USB_SetTurnaroundTime+0x13c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d906      	bls.n	8007d7e <USB_SetTurnaroundTime+0xda>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4a1c      	ldr	r2, [pc, #112]	; (8007de4 <USB_SetTurnaroundTime+0x140>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d202      	bcs.n	8007d7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d78:	2307      	movs	r3, #7
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	e00a      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d7e:	2306      	movs	r3, #6
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	e007      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d8a:	2309      	movs	r3, #9
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	e001      	b.n	8007d94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d90:	2309      	movs	r3, #9
 8007d92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	029b      	lsls	r3, r3, #10
 8007da8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	00d8acbf 	.word	0x00d8acbf
 8007dc4:	00e4e1c0 	.word	0x00e4e1c0
 8007dc8:	00f42400 	.word	0x00f42400
 8007dcc:	01067380 	.word	0x01067380
 8007dd0:	011a499f 	.word	0x011a499f
 8007dd4:	01312cff 	.word	0x01312cff
 8007dd8:	014ca43f 	.word	0x014ca43f
 8007ddc:	016e3600 	.word	0x016e3600
 8007de0:	01a6ab1f 	.word	0x01a6ab1f
 8007de4:	01e84800 	.word	0x01e84800

08007de8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f043 0201 	orr.w	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f023 0201 	bic.w	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d115      	bne.n	8007e7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	f7fb fe88 	bl	8003b70 <HAL_Delay>
      ms++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 f972 	bl	8009150 <USB_GetMode>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d01e      	beq.n	8007eb0 <USB_SetCurrentMode+0x84>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b31      	cmp	r3, #49	; 0x31
 8007e76:	d9f0      	bls.n	8007e5a <USB_SetCurrentMode+0x2e>
 8007e78:	e01a      	b.n	8007eb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d115      	bne.n	8007eac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	f7fb fe6f 	bl	8003b70 <HAL_Delay>
      ms++;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 f959 	bl	8009150 <USB_GetMode>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <USB_SetCurrentMode+0x84>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b31      	cmp	r3, #49	; 0x31
 8007ea8:	d9f0      	bls.n	8007e8c <USB_SetCurrentMode+0x60>
 8007eaa:	e001      	b.n	8007eb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e005      	b.n	8007ebc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b32      	cmp	r3, #50	; 0x32
 8007eb4:	d101      	bne.n	8007eba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e000      	b.n	8007ebc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	e009      	b.n	8007ef8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	3340      	adds	r3, #64	; 0x40
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2b0e      	cmp	r3, #14
 8007efc:	d9f2      	bls.n	8007ee4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d11c      	bne.n	8007f3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f12:	f043 0302 	orr.w	r3, r3, #2
 8007f16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007f3c:	e00b      	b.n	8007f56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f68:	4619      	mov	r1, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f70:	461a      	mov	r2, r3
 8007f72:	680b      	ldr	r3, [r1, #0]
 8007f74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d10c      	bne.n	8007f96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d104      	bne.n	8007f8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f82:	2100      	movs	r1, #0
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f945 	bl	8008214 <USB_SetDevSpeed>
 8007f8a:	e008      	b.n	8007f9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f940 	bl	8008214 <USB_SetDevSpeed>
 8007f94:	e003      	b.n	8007f9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f96:	2103      	movs	r1, #3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f93b 	bl	8008214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f9e:	2110      	movs	r1, #16
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f8f3 	bl	800818c <USB_FlushTxFifo>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f90f 	bl	80081d4 <USB_FlushRxFifo>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fde:	461a      	mov	r2, r3
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	613b      	str	r3, [r7, #16]
 8007fe8:	e043      	b.n	8008072 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008000:	d118      	bne.n	8008034 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008014:	461a      	mov	r2, r3
 8008016:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	e013      	b.n	8008046 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802a:	461a      	mov	r2, r3
 800802c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	e008      	b.n	8008046 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008040:	461a      	mov	r2, r3
 8008042:	2300      	movs	r3, #0
 8008044:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008052:	461a      	mov	r2, r3
 8008054:	2300      	movs	r3, #0
 8008056:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008064:	461a      	mov	r2, r3
 8008066:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800806a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	3301      	adds	r3, #1
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3b7      	bcc.n	8007fea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800807a:	2300      	movs	r3, #0
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	e043      	b.n	8008108 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008096:	d118      	bne.n	80080ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080aa:	461a      	mov	r2, r3
 80080ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	e013      	b.n	80080dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c0:	461a      	mov	r2, r3
 80080c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e008      	b.n	80080dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d6:	461a      	mov	r2, r3
 80080d8:	2300      	movs	r3, #0
 80080da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e8:	461a      	mov	r2, r3
 80080ea:	2300      	movs	r3, #0
 80080ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fa:	461a      	mov	r2, r3
 80080fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	3301      	adds	r3, #1
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	429a      	cmp	r2, r3
 800810e:	d3b7      	bcc.n	8008080 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800811e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008122:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008130:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	f043 0210 	orr.w	r2, r3, #16
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699a      	ldr	r2, [r3, #24]
 8008148:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <USB_DevInit+0x2c4>)
 800814a:	4313      	orrs	r3, r2
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	f043 0208 	orr.w	r2, r3, #8
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d107      	bne.n	8008178 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008170:	f043 0304 	orr.w	r3, r3, #4
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008184:	b004      	add	sp, #16
 8008186:	4770      	bx	lr
 8008188:	803c3800 	.word	0x803c3800

0800818c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	019b      	lsls	r3, r3, #6
 800819e:	f043 0220 	orr.w	r2, r3, #32
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <USB_FlushTxFifo+0x44>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d901      	bls.n	80081b6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e006      	b.n	80081c4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d0f1      	beq.n	80081a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	00030d40 	.word	0x00030d40

080081d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2210      	movs	r2, #16
 80081e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	4a08      	ldr	r2, [pc, #32]	; (8008210 <USB_FlushRxFifo+0x3c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d901      	bls.n	80081f6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e006      	b.n	8008204 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0310 	and.w	r3, r3, #16
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d0f1      	beq.n	80081e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	00030d40 	.word	0x00030d40

08008214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	68f9      	ldr	r1, [r7, #12]
 8008230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008234:	4313      	orrs	r3, r2
 8008236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008246:	b480      	push	{r7}
 8008248:	b087      	sub	sp, #28
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 0306 	and.w	r3, r3, #6
 800825e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008266:	2300      	movs	r3, #0
 8008268:	75fb      	strb	r3, [r7, #23]
 800826a:	e00a      	b.n	8008282 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d002      	beq.n	8008278 <USB_GetDevSpeed+0x32>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b06      	cmp	r3, #6
 8008276:	d102      	bne.n	800827e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008278:	2302      	movs	r3, #2
 800827a:	75fb      	strb	r3, [r7, #23]
 800827c:	e001      	b.n	8008282 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800827e:	230f      	movs	r3, #15
 8008280:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
}
 8008284:	4618      	mov	r0, r3
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d13a      	bne.n	8008322 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b2:	69da      	ldr	r2, [r3, #28]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	2101      	movs	r1, #1
 80082be:	fa01 f303 	lsl.w	r3, r1, r3
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	68f9      	ldr	r1, [r7, #12]
 80082c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ca:	4313      	orrs	r3, r2
 80082cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d155      	bne.n	8008390 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	78db      	ldrb	r3, [r3, #3]
 80082fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008300:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	059b      	lsls	r3, r3, #22
 8008306:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008308:	4313      	orrs	r3, r2
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	0151      	lsls	r1, r2, #5
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	440a      	add	r2, r1
 8008312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800831a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	e036      	b.n	8008390 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008328:	69da      	ldr	r2, [r3, #28]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 030f 	and.w	r3, r3, #15
 8008332:	2101      	movs	r1, #1
 8008334:	fa01 f303 	lsl.w	r3, r1, r3
 8008338:	041b      	lsls	r3, r3, #16
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008340:	4313      	orrs	r3, r2
 8008342:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d11a      	bne.n	8008390 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4413      	add	r3, r2
 8008362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	78db      	ldrb	r3, [r3, #3]
 8008374:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008376:	430b      	orrs	r3, r1
 8008378:	4313      	orrs	r3, r2
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	440a      	add	r2, r1
 8008382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
	...

080083a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d161      	bne.n	8008480 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083d2:	d11f      	bne.n	8008414 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	0151      	lsls	r1, r2, #5
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	440a      	add	r2, r1
 80083ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	0151      	lsls	r1, r2, #5
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	440a      	add	r2, r1
 800840a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800840e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	2101      	movs	r1, #1
 8008426:	fa01 f303 	lsl.w	r3, r1, r3
 800842a:	b29b      	uxth	r3, r3
 800842c:	43db      	mvns	r3, r3
 800842e:	68f9      	ldr	r1, [r7, #12]
 8008430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008434:	4013      	ands	r3, r2
 8008436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	69da      	ldr	r2, [r3, #28]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	2101      	movs	r1, #1
 800844a:	fa01 f303 	lsl.w	r3, r1, r3
 800844e:	b29b      	uxth	r3, r3
 8008450:	43db      	mvns	r3, r3
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008458:	4013      	ands	r3, r2
 800845a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	0159      	lsls	r1, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	440b      	add	r3, r1
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	4619      	mov	r1, r3
 8008478:	4b35      	ldr	r3, [pc, #212]	; (8008550 <USB_DeactivateEndpoint+0x1b0>)
 800847a:	4013      	ands	r3, r2
 800847c:	600b      	str	r3, [r1, #0]
 800847e:	e060      	b.n	8008542 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008496:	d11f      	bne.n	80084d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	0151      	lsls	r1, r2, #5
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	440a      	add	r2, r1
 80084ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	2101      	movs	r1, #1
 80084ea:	fa01 f303 	lsl.w	r3, r1, r3
 80084ee:	041b      	lsls	r3, r3, #16
 80084f0:	43db      	mvns	r3, r3
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084f8:	4013      	ands	r3, r2
 80084fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	69da      	ldr	r2, [r3, #28]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	2101      	movs	r1, #1
 800850e:	fa01 f303 	lsl.w	r3, r1, r3
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	43db      	mvns	r3, r3
 8008516:	68f9      	ldr	r1, [r7, #12]
 8008518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800851c:	4013      	ands	r3, r2
 800851e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	0159      	lsls	r1, r3, #5
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	440b      	add	r3, r1
 8008536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853a:	4619      	mov	r1, r3
 800853c:	4b05      	ldr	r3, [pc, #20]	; (8008554 <USB_DeactivateEndpoint+0x1b4>)
 800853e:	4013      	ands	r3, r2
 8008540:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	ec337800 	.word	0xec337800
 8008554:	eff37800 	.word	0xeff37800

08008558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af02      	add	r7, sp, #8
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	785b      	ldrb	r3, [r3, #1]
 8008574:	2b01      	cmp	r3, #1
 8008576:	f040 815c 	bne.w	8008832 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d132      	bne.n	80085e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	440a      	add	r2, r1
 8008598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800859c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	0151      	lsls	r1, r2, #5
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	440a      	add	r2, r1
 80085dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e0:	0cdb      	lsrs	r3, r3, #19
 80085e2:	04db      	lsls	r3, r3, #19
 80085e4:	6113      	str	r3, [r2, #16]
 80085e6:	e074      	b.n	80086d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	0151      	lsls	r1, r2, #5
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	440a      	add	r2, r1
 80085fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008602:	0cdb      	lsrs	r3, r3, #19
 8008604:	04db      	lsls	r3, r3, #19
 8008606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	0151      	lsls	r1, r2, #5
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	440a      	add	r2, r1
 800861e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800862a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008638:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6959      	ldr	r1, [r3, #20]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	440b      	add	r3, r1
 8008644:	1e59      	subs	r1, r3, #1
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	fbb1 f3f3 	udiv	r3, r1, r3
 800864e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008650:	4b9d      	ldr	r3, [pc, #628]	; (80088c8 <USB_EPStartXfer+0x370>)
 8008652:	400b      	ands	r3, r1
 8008654:	69b9      	ldr	r1, [r7, #24]
 8008656:	0148      	lsls	r0, r1, #5
 8008658:	69f9      	ldr	r1, [r7, #28]
 800865a:	4401      	add	r1, r0
 800865c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008660:	4313      	orrs	r3, r2
 8008662:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008670:	691a      	ldr	r2, [r3, #16]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800867a:	69b9      	ldr	r1, [r7, #24]
 800867c:	0148      	lsls	r0, r1, #5
 800867e:	69f9      	ldr	r1, [r7, #28]
 8008680:	4401      	add	r1, r0
 8008682:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008686:	4313      	orrs	r3, r2
 8008688:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	78db      	ldrb	r3, [r3, #3]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d11f      	bne.n	80086d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80086b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	0151      	lsls	r1, r2, #5
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	440a      	add	r2, r1
 80086c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d14b      	bne.n	8008770 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ec:	461a      	mov	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	78db      	ldrb	r3, [r3, #3]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d128      	bne.n	800874e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008708:	2b00      	cmp	r3, #0
 800870a:	d110      	bne.n	800872e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	0151      	lsls	r1, r2, #5
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	440a      	add	r2, r1
 8008722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	e00f      	b.n	800874e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	440a      	add	r2, r1
 8008744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800874c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	69fa      	ldr	r2, [r7, #28]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	e12f      	b.n	80089d0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	440a      	add	r2, r1
 8008786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800878e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	78db      	ldrb	r3, [r3, #3]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d015      	beq.n	80087c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 8117 	beq.w	80089d0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	2101      	movs	r1, #1
 80087b4:	fa01 f303 	lsl.w	r3, r1, r3
 80087b8:	69f9      	ldr	r1, [r7, #28]
 80087ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087be:	4313      	orrs	r3, r2
 80087c0:	634b      	str	r3, [r1, #52]	; 0x34
 80087c2:	e105      	b.n	80089d0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d110      	bne.n	80087f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	0151      	lsls	r1, r2, #5
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	440a      	add	r2, r1
 80087ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	e00f      	b.n	8008816 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	440a      	add	r2, r1
 800880c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008814:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	68d9      	ldr	r1, [r3, #12]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	781a      	ldrb	r2, [r3, #0]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	b298      	uxth	r0, r3
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4603      	mov	r3, r0
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fa2b 	bl	8008c86 <USB_WritePacket>
 8008830:	e0ce      	b.n	80089d0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	0151      	lsls	r1, r2, #5
 8008844:	69fa      	ldr	r2, [r7, #28]
 8008846:	440a      	add	r2, r1
 8008848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800884c:	0cdb      	lsrs	r3, r3, #19
 800884e:	04db      	lsls	r3, r3, #19
 8008850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	0151      	lsls	r1, r2, #5
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	440a      	add	r2, r1
 8008868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800886c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008874:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d126      	bne.n	80088cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008894:	69b9      	ldr	r1, [r7, #24]
 8008896:	0148      	lsls	r0, r1, #5
 8008898:	69f9      	ldr	r1, [r7, #28]
 800889a:	4401      	add	r1, r0
 800889c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088a0:	4313      	orrs	r3, r2
 80088a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088c2:	6113      	str	r3, [r2, #16]
 80088c4:	e036      	b.n	8008934 <USB_EPStartXfer+0x3dc>
 80088c6:	bf00      	nop
 80088c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	695a      	ldr	r2, [r3, #20]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	4413      	add	r3, r2
 80088d6:	1e5a      	subs	r2, r3, #1
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	8afb      	ldrh	r3, [r7, #22]
 80088f2:	04d9      	lsls	r1, r3, #19
 80088f4:	4b39      	ldr	r3, [pc, #228]	; (80089dc <USB_EPStartXfer+0x484>)
 80088f6:	400b      	ands	r3, r1
 80088f8:	69b9      	ldr	r1, [r7, #24]
 80088fa:	0148      	lsls	r0, r1, #5
 80088fc:	69f9      	ldr	r1, [r7, #28]
 80088fe:	4401      	add	r1, r0
 8008900:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008904:	4313      	orrs	r3, r2
 8008906:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008914:	691a      	ldr	r2, [r3, #16]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	8af9      	ldrh	r1, [r7, #22]
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	0148      	lsls	r0, r1, #5
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	4401      	add	r1, r0
 800892c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008930:	4313      	orrs	r3, r2
 8008932:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d10d      	bne.n	8008956 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	68d9      	ldr	r1, [r3, #12]
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008952:	460a      	mov	r2, r1
 8008954:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	78db      	ldrb	r3, [r3, #3]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d128      	bne.n	80089b0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896a:	2b00      	cmp	r3, #0
 800896c:	d110      	bne.n	8008990 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008988:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	e00f      	b.n	80089b0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	1ff80000 	.word	0x1ff80000

080089e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	f040 80cd 	bne.w	8008b9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d132      	bne.n	8008a70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	0151      	lsls	r1, r2, #5
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	440a      	add	r2, r1
 8008a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a68:	0cdb      	lsrs	r3, r3, #19
 8008a6a:	04db      	lsls	r3, r3, #19
 8008a6c:	6113      	str	r3, [r2, #16]
 8008a6e:	e04e      	b.n	8008b0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	0151      	lsls	r1, r2, #5
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	440a      	add	r2, r1
 8008a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8a:	0cdb      	lsrs	r3, r3, #19
 8008a8c:	04db      	lsls	r3, r3, #19
 8008a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	0151      	lsls	r1, r2, #5
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	440a      	add	r2, r1
 8008aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008aae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ab2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	695a      	ldr	r2, [r3, #20]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d903      	bls.n	8008ac8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ae6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af4:	691a      	ldr	r2, [r3, #16]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008afe:	6939      	ldr	r1, [r7, #16]
 8008b00:	0148      	lsls	r0, r1, #5
 8008b02:	6979      	ldr	r1, [r7, #20]
 8008b04:	4401      	add	r1, r0
 8008b06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d11e      	bne.n	8008b52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d009      	beq.n	8008b30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b28:	461a      	mov	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	e092      	b.n	8008c78 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d07e      	beq.n	8008c78 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b90:	6979      	ldr	r1, [r7, #20]
 8008b92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b96:	4313      	orrs	r3, r2
 8008b98:	634b      	str	r3, [r1, #52]	; 0x34
 8008b9a:	e06d      	b.n	8008c78 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb6:	0cdb      	lsrs	r3, r3, #19
 8008bb8:	04db      	lsls	r3, r3, #19
 8008bba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	0151      	lsls	r1, r2, #5
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bde:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c26:	6939      	ldr	r1, [r7, #16]
 8008c28:	0148      	lsls	r0, r1, #5
 8008c2a:	6979      	ldr	r1, [r7, #20]
 8008c2c:	4401      	add	r1, r0
 8008c2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c32:	4313      	orrs	r3, r2
 8008c34:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d10d      	bne.n	8008c58 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	68d9      	ldr	r1, [r3, #12]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	460a      	mov	r2, r1
 8008c56:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	0151      	lsls	r1, r2, #5
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	440a      	add	r2, r1
 8008c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b089      	sub	sp, #36	; 0x24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	4611      	mov	r1, r2
 8008c92:	461a      	mov	r2, r3
 8008c94:	460b      	mov	r3, r1
 8008c96:	71fb      	strb	r3, [r7, #7]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008ca4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d123      	bne.n	8008cf4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cac:	88bb      	ldrh	r3, [r7, #4]
 8008cae:	3303      	adds	r3, #3
 8008cb0:	089b      	lsrs	r3, r3, #2
 8008cb2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	e018      	b.n	8008cec <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	031a      	lsls	r2, r3, #12
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d3e2      	bcc.n	8008cba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3724      	adds	r7, #36	; 0x24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b08b      	sub	sp, #44	; 0x2c
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	089b      	lsrs	r3, r3, #2
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d20:	88fb      	ldrh	r3, [r7, #6]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	623b      	str	r3, [r7, #32]
 8008d2c:	e014      	b.n	8008d58 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	3301      	adds	r3, #1
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	3301      	adds	r3, #1
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	3301      	adds	r3, #1
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	3301      	adds	r3, #1
 8008d56:	623b      	str	r3, [r7, #32]
 8008d58:	6a3a      	ldr	r2, [r7, #32]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d3e6      	bcc.n	8008d2e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d60:	8bfb      	ldrh	r3, [r7, #30]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01e      	beq.n	8008da4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d70:	461a      	mov	r2, r3
 8008d72:	f107 0310 	add.w	r3, r7, #16
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	fa22 f303 	lsr.w	r3, r2, r3
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	701a      	strb	r2, [r3, #0]
      i++;
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	3301      	adds	r3, #1
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d98:	8bfb      	ldrh	r3, [r7, #30]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d9e:	8bfb      	ldrh	r3, [r7, #30]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1ea      	bne.n	8008d7a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	372c      	adds	r7, #44	; 0x2c
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d12c      	bne.n	8008e28 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	db12      	blt.n	8008e06 <USB_EPSetStall+0x54>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00f      	beq.n	8008e06 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e04:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	0151      	lsls	r1, r2, #5
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	e02b      	b.n	8008e80 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	db12      	blt.n	8008e60 <USB_EPSetStall+0xae>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00f      	beq.n	8008e60 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	0151      	lsls	r1, r2, #5
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	440a      	add	r2, r1
 8008e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e5e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	0151      	lsls	r1, r2, #5
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	440a      	add	r2, r1
 8008e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b085      	sub	sp, #20
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d128      	bne.n	8008efc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	0151      	lsls	r1, r2, #5
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	440a      	add	r2, r1
 8008ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ec8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	78db      	ldrb	r3, [r3, #3]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d003      	beq.n	8008eda <USB_EPClearStall+0x4c>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	78db      	ldrb	r3, [r3, #3]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d138      	bne.n	8008f4c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	0151      	lsls	r1, r2, #5
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	440a      	add	r2, r1
 8008ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	e027      	b.n	8008f4c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	78db      	ldrb	r3, [r3, #3]
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d003      	beq.n	8008f2c <USB_EPClearStall+0x9e>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	78db      	ldrb	r3, [r3, #3]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d10f      	bne.n	8008f4c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f4a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f7c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	78fb      	ldrb	r3, [r7, #3]
 8008f88:	011b      	lsls	r3, r3, #4
 8008f8a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f8e:	68f9      	ldr	r1, [r7, #12]
 8008f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f94:	4313      	orrs	r3, r2
 8008f96:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fc0:	f023 0303 	bic.w	r3, r3, #3
 8008fc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fd4:	f023 0302 	bic.w	r3, r3, #2
 8008fd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009002:	f023 0303 	bic.w	r3, r3, #3
 8009006:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009016:	f043 0302 	orr.w	r3, r3, #2
 800901a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4013      	ands	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009042:	68fb      	ldr	r3, [r7, #12]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4013      	ands	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	0c1b      	lsrs	r3, r3, #16
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	4013      	ands	r3, r2
 80090a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	b29b      	uxth	r3, r3
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	4013      	ands	r3, r2
 80090e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090e6:	68bb      	ldr	r3, [r7, #8]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009116:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	f003 030f 	and.w	r3, r3, #15
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
 8009124:	01db      	lsls	r3, r3, #7
 8009126:	b2db      	uxtb	r3, r3
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	4313      	orrs	r3, r2
 800912c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800912e:	78fb      	ldrb	r3, [r7, #3]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	4413      	add	r3, r2
 8009136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4013      	ands	r3, r2
 8009140:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009142:	68bb      	ldr	r3, [r7, #8]
}
 8009144:	4618      	mov	r0, r3
 8009146:	371c      	adds	r7, #28
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	f003 0301 	and.w	r3, r3, #1
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009186:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800918a:	f023 0307 	bic.w	r3, r3, #7
 800918e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800919e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
	...

080091b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	460b      	mov	r3, r1
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	333c      	adds	r3, #60	; 0x3c
 80091ca:	3304      	adds	r3, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4a26      	ldr	r2, [pc, #152]	; (800926c <USB_EP0_OutStart+0xb8>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d90a      	bls.n	80091ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e8:	d101      	bne.n	80091ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e037      	b.n	800925e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	461a      	mov	r2, r3
 80091f6:	2300      	movs	r3, #0
 80091f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800920c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800921c:	f043 0318 	orr.w	r3, r3, #24
 8009220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009230:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009234:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009236:	7afb      	ldrb	r3, [r7, #11]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d10f      	bne.n	800925c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009242:	461a      	mov	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009256:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800925a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	4f54300a 	.word	0x4f54300a

08009270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	4a13      	ldr	r2, [pc, #76]	; (80092d0 <USB_CoreReset+0x60>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d901      	bls.n	800928c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e01a      	b.n	80092c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	daf3      	bge.n	800927c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f043 0201 	orr.w	r2, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	4a09      	ldr	r2, [pc, #36]	; (80092d0 <USB_CoreReset+0x60>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d901      	bls.n	80092b4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e006      	b.n	80092c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d0f1      	beq.n	80092a4 <USB_CoreReset+0x34>

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	00030d40 	.word	0x00030d40

080092d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80092e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80092e4:	f005 fc52 	bl	800eb8c <USBD_static_malloc>
 80092e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d105      	bne.n	80092fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80092f8:	2302      	movs	r3, #2
 80092fa:	e066      	b.n	80093ca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	7c1b      	ldrb	r3, [r3, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d119      	bne.n	8009340 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800930c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009310:	2202      	movs	r2, #2
 8009312:	2181      	movs	r1, #129	; 0x81
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f005 fb16 	bl	800e946 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009324:	2202      	movs	r2, #2
 8009326:	2101      	movs	r1, #1
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f005 fb0c 	bl	800e946 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2210      	movs	r2, #16
 800933a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800933e:	e016      	b.n	800936e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009340:	2340      	movs	r3, #64	; 0x40
 8009342:	2202      	movs	r2, #2
 8009344:	2181      	movs	r1, #129	; 0x81
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f005 fafd 	bl	800e946 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009352:	2340      	movs	r3, #64	; 0x40
 8009354:	2202      	movs	r2, #2
 8009356:	2101      	movs	r1, #1
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f005 faf4 	bl	800e946 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2210      	movs	r2, #16
 800936a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800936e:	2308      	movs	r3, #8
 8009370:	2203      	movs	r2, #3
 8009372:	2182      	movs	r1, #130	; 0x82
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f005 fae6 	bl	800e946 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7c1b      	ldrb	r3, [r3, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d109      	bne.n	80093b8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093ae:	2101      	movs	r1, #1
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f005 fbb7 	bl	800eb24 <USBD_LL_PrepareReceive>
 80093b6:	e007      	b.n	80093c8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093be:	2340      	movs	r3, #64	; 0x40
 80093c0:	2101      	movs	r1, #1
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f005 fbae 	bl	800eb24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b082      	sub	sp, #8
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	460b      	mov	r3, r1
 80093dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093de:	2181      	movs	r1, #129	; 0x81
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f005 fad6 	bl	800e992 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80093ec:	2101      	movs	r1, #1
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f005 facf 	bl	800e992 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80093fc:	2182      	movs	r1, #130	; 0x82
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f005 fac7 	bl	800e992 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00e      	beq.n	800943c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800942e:	4618      	mov	r0, r3
 8009430:	f005 fbba 	bl	800eba8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009458:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800946c:	2303      	movs	r3, #3
 800946e:	e0af      	b.n	80095d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009478:	2b00      	cmp	r3, #0
 800947a:	d03f      	beq.n	80094fc <USBD_CDC_Setup+0xb4>
 800947c:	2b20      	cmp	r3, #32
 800947e:	f040 809f 	bne.w	80095c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	88db      	ldrh	r3, [r3, #6]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d02e      	beq.n	80094e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	b25b      	sxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	da16      	bge.n	80094c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80094a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	88d2      	ldrh	r2, [r2, #6]
 80094a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	88db      	ldrh	r3, [r3, #6]
 80094ac:	2b07      	cmp	r3, #7
 80094ae:	bf28      	it	cs
 80094b0:	2307      	movcs	r3, #7
 80094b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	89fa      	ldrh	r2, [r7, #14]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 fb19 	bl	800aaf2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80094c0:	e085      	b.n	80095ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	785a      	ldrb	r2, [r3, #1]
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	88db      	ldrh	r3, [r3, #6]
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80094d8:	6939      	ldr	r1, [r7, #16]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	88db      	ldrh	r3, [r3, #6]
 80094de:	461a      	mov	r2, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 fb32 	bl	800ab4a <USBD_CtlPrepareRx>
      break;
 80094e6:	e072      	b.n	80095ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	7850      	ldrb	r0, [r2, #1]
 80094f4:	2200      	movs	r2, #0
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	4798      	blx	r3
      break;
 80094fa:	e068      	b.n	80095ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	785b      	ldrb	r3, [r3, #1]
 8009500:	2b0b      	cmp	r3, #11
 8009502:	d852      	bhi.n	80095aa <USBD_CDC_Setup+0x162>
 8009504:	a201      	add	r2, pc, #4	; (adr r2, 800950c <USBD_CDC_Setup+0xc4>)
 8009506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950a:	bf00      	nop
 800950c:	0800953d 	.word	0x0800953d
 8009510:	080095b9 	.word	0x080095b9
 8009514:	080095ab 	.word	0x080095ab
 8009518:	080095ab 	.word	0x080095ab
 800951c:	080095ab 	.word	0x080095ab
 8009520:	080095ab 	.word	0x080095ab
 8009524:	080095ab 	.word	0x080095ab
 8009528:	080095ab 	.word	0x080095ab
 800952c:	080095ab 	.word	0x080095ab
 8009530:	080095ab 	.word	0x080095ab
 8009534:	08009567 	.word	0x08009567
 8009538:	08009591 	.word	0x08009591
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b03      	cmp	r3, #3
 8009546:	d107      	bne.n	8009558 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009548:	f107 030a 	add.w	r3, r7, #10
 800954c:	2202      	movs	r2, #2
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 face 	bl	800aaf2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009556:	e032      	b.n	80095be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 fa58 	bl	800aa10 <USBD_CtlError>
            ret = USBD_FAIL;
 8009560:	2303      	movs	r3, #3
 8009562:	75fb      	strb	r3, [r7, #23]
          break;
 8009564:	e02b      	b.n	80095be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b03      	cmp	r3, #3
 8009570:	d107      	bne.n	8009582 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009572:	f107 030d 	add.w	r3, r7, #13
 8009576:	2201      	movs	r2, #1
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fab9 	bl	800aaf2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009580:	e01d      	b.n	80095be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 fa43 	bl	800aa10 <USBD_CtlError>
            ret = USBD_FAIL;
 800958a:	2303      	movs	r3, #3
 800958c:	75fb      	strb	r3, [r7, #23]
          break;
 800958e:	e016      	b.n	80095be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b03      	cmp	r3, #3
 800959a:	d00f      	beq.n	80095bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 fa36 	bl	800aa10 <USBD_CtlError>
            ret = USBD_FAIL;
 80095a4:	2303      	movs	r3, #3
 80095a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80095a8:	e008      	b.n	80095bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 fa2f 	bl	800aa10 <USBD_CtlError>
          ret = USBD_FAIL;
 80095b2:	2303      	movs	r3, #3
 80095b4:	75fb      	strb	r3, [r7, #23]
          break;
 80095b6:	e002      	b.n	80095be <USBD_CDC_Setup+0x176>
          break;
 80095b8:	bf00      	nop
 80095ba:	e008      	b.n	80095ce <USBD_CDC_Setup+0x186>
          break;
 80095bc:	bf00      	nop
      }
      break;
 80095be:	e006      	b.n	80095ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fa24 	bl	800aa10 <USBD_CtlError>
      ret = USBD_FAIL;
 80095c8:	2303      	movs	r3, #3
 80095ca:	75fb      	strb	r3, [r7, #23]
      break;
 80095cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e04f      	b.n	800969a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009600:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009602:	78fa      	ldrb	r2, [r7, #3]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	440b      	add	r3, r1
 8009610:	3318      	adds	r3, #24
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d029      	beq.n	800966c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009618:	78fa      	ldrb	r2, [r7, #3]
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	440b      	add	r3, r1
 8009626:	3318      	adds	r3, #24
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	78f9      	ldrb	r1, [r7, #3]
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	460b      	mov	r3, r1
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	1a5b      	subs	r3, r3, r1
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4403      	add	r3, r0
 8009638:	3344      	adds	r3, #68	; 0x44
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009640:	fb03 f301 	mul.w	r3, r3, r1
 8009644:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009646:	2b00      	cmp	r3, #0
 8009648:	d110      	bne.n	800966c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	3318      	adds	r3, #24
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800965e:	78f9      	ldrb	r1, [r7, #3]
 8009660:	2300      	movs	r3, #0
 8009662:	2200      	movs	r2, #0
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f005 fa3c 	bl	800eae2 <USBD_LL_Transmit>
 800966a:	e015      	b.n	8009698 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009694:	78fa      	ldrb	r2, [r7, #3]
 8009696:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	460b      	mov	r3, r1
 80096ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e015      	b.n	80096f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f005 fa4c 	bl	800eb66 <USBD_LL_GetRxDataSize>
 80096ce:	4602      	mov	r2, r0
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096ea:	4611      	mov	r1, r2
 80096ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009706:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800970e:	2303      	movs	r3, #3
 8009710:	e01b      	b.n	800974a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d015      	beq.n	8009748 <USBD_CDC_EP0_RxReady+0x50>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009722:	2bff      	cmp	r3, #255	; 0xff
 8009724:	d010      	beq.n	8009748 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009734:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800973c:	b292      	uxth	r2, r2
 800973e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	22ff      	movs	r2, #255	; 0xff
 8009744:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2243      	movs	r2, #67	; 0x43
 8009760:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009762:	4b03      	ldr	r3, [pc, #12]	; (8009770 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	20000094 	.word	0x20000094

08009774 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2243      	movs	r2, #67	; 0x43
 8009780:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009782:	4b03      	ldr	r3, [pc, #12]	; (8009790 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009784:	4618      	mov	r0, r3
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	20000050 	.word	0x20000050

08009794 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2243      	movs	r2, #67	; 0x43
 80097a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80097a2:	4b03      	ldr	r3, [pc, #12]	; (80097b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	200000d8 	.word	0x200000d8

080097b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	220a      	movs	r2, #10
 80097c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80097c2:	4b03      	ldr	r3, [pc, #12]	; (80097d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	2000000c 	.word	0x2000000c

080097d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e004      	b.n	80097f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80097fe:	b480      	push	{r7}
 8009800:	b087      	sub	sp, #28
 8009802:	af00      	add	r7, sp, #0
 8009804:	60f8      	str	r0, [r7, #12]
 8009806:	60b9      	str	r1, [r7, #8]
 8009808:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009810:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009818:	2303      	movs	r3, #3
 800981a:	e008      	b.n	800982e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800984a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009852:	2303      	movs	r3, #3
 8009854:	e004      	b.n	8009860 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800987a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800988a:	2303      	movs	r3, #3
 800988c:	e01a      	b.n	80098c4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009894:	2b00      	cmp	r3, #0
 8009896:	d114      	bne.n	80098c2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2201      	movs	r2, #1
 800989c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80098b6:	2181      	movs	r1, #129	; 0x81
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f005 f912 	bl	800eae2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e016      	b.n	8009918 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	7c1b      	ldrb	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d109      	bne.n	8009906 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098fc:	2101      	movs	r1, #1
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f005 f910 	bl	800eb24 <USBD_LL_PrepareReceive>
 8009904:	e007      	b.n	8009916 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800990c:	2340      	movs	r3, #64	; 0x40
 800990e:	2101      	movs	r1, #1
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f005 f907 	bl	800eb24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009934:	2303      	movs	r3, #3
 8009936:	e01f      	b.n	8009978 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	79fa      	ldrb	r2, [r7, #7]
 800996a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f004 ff83 	bl	800e878 <USBD_LL_Init>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009994:	2303      	movs	r3, #3
 8009996:	e016      	b.n	80099c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	f107 020e 	add.w	r2, r7, #14
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	4602      	mov	r2, r0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f004 ff9a 	bl	800e910 <USBD_LL_Start>
 80099dc:	4603      	mov	r3, r0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d009      	beq.n	8009a2a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	78fa      	ldrb	r2, [r7, #3]
 8009a20:	4611      	mov	r1, r2
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d007      	beq.n	8009a5a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	78fa      	ldrb	r2, [r7, #3]
 8009a54:	4611      	mov	r1, r2
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4798      	blx	r3
  }

  return USBD_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 ff90 	bl	800a99c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a98:	f003 031f 	and.w	r3, r3, #31
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d01a      	beq.n	8009ad6 <USBD_LL_SetupStage+0x72>
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d822      	bhi.n	8009aea <USBD_LL_SetupStage+0x86>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <USBD_LL_SetupStage+0x4a>
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d00a      	beq.n	8009ac2 <USBD_LL_SetupStage+0x5e>
 8009aac:	e01d      	b.n	8009aea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa62 	bl	8009f80 <USBD_StdDevReq>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac0:	e020      	b.n	8009b04 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fac6 	bl	800a05c <USBD_StdItfReq>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ad4:	e016      	b.n	8009b04 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fb05 	bl	800a0ee <USBD_StdEPReq>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae8:	e00c      	b.n	8009b04 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009af0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f004 ff69 	bl	800e9d0 <USBD_LL_StallEP>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]
      break;
 8009b02:	bf00      	nop
  }

  return ret;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b086      	sub	sp, #24
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	460b      	mov	r3, r1
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d138      	bne.n	8009b94 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d14a      	bne.n	8009bca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d913      	bls.n	8009b68 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	1ad2      	subs	r2, r2, r3
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	bf28      	it	cs
 8009b5a:	4613      	movcs	r3, r2
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f001 f80f 	bl	800ab84 <USBD_CtlContinueRx>
 8009b66:	e030      	b.n	8009bca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d10b      	bne.n	8009b8c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d005      	beq.n	8009b8c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f001 f80a 	bl	800aba6 <USBD_CtlSendStatus>
 8009b92:	e01a      	b.n	8009bca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d114      	bne.n	8009bca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	7afa      	ldrb	r2, [r7, #11]
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	4798      	blx	r3
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
 8009bc8:	e000      	b.n	8009bcc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d16b      	bne.n	8009cc0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3314      	adds	r3, #20
 8009bec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d156      	bne.n	8009ca6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	689a      	ldr	r2, [r3, #8]
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d914      	bls.n	8009c2e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	1ad2      	subs	r2, r2, r3
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	461a      	mov	r2, r3
 8009c18:	6879      	ldr	r1, [r7, #4]
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 ff84 	bl	800ab28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c20:	2300      	movs	r3, #0
 8009c22:	2200      	movs	r2, #0
 8009c24:	2100      	movs	r1, #0
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f004 ff7c 	bl	800eb24 <USBD_LL_PrepareReceive>
 8009c2c:	e03b      	b.n	8009ca6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d11c      	bne.n	8009c74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d316      	bcc.n	8009c74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d20f      	bcs.n	8009c74 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c54:	2200      	movs	r2, #0
 8009c56:	2100      	movs	r1, #0
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 ff65 	bl	800ab28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c66:	2300      	movs	r3, #0
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f004 ff59 	bl	800eb24 <USBD_LL_PrepareReceive>
 8009c72:	e018      	b.n	8009ca6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d10b      	bne.n	8009c98 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c98:	2180      	movs	r1, #128	; 0x80
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f004 fe98 	bl	800e9d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 ff93 	bl	800abcc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d122      	bne.n	8009cf6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff fe98 	bl	80099e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009cbe:	e01a      	b.n	8009cf6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b03      	cmp	r3, #3
 8009cca:	d114      	bne.n	8009cf6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00e      	beq.n	8009cf6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	7afa      	ldrb	r2, [r7, #11]
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	4798      	blx	r3
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	e000      	b.n	8009cf8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3718      	adds	r7, #24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e02f      	b.n	8009d94 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00f      	beq.n	8009d5e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d009      	beq.n	8009d5e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6852      	ldr	r2, [r2, #4]
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	4611      	mov	r1, r2
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d5e:	2340      	movs	r3, #64	; 0x40
 8009d60:	2200      	movs	r2, #0
 8009d62:	2100      	movs	r1, #0
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f004 fdee 	bl	800e946 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2240      	movs	r2, #64	; 0x40
 8009d76:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d7a:	2340      	movs	r3, #64	; 0x40
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2180      	movs	r1, #128	; 0x80
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f004 fde0 	bl	800e946 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2240      	movs	r2, #64	; 0x40
 8009d90:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	78fa      	ldrb	r2, [r7, #3]
 8009dac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	d106      	bne.n	8009e0a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e012      	b.n	8009e54 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d10b      	bne.n	8009e52 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d005      	beq.n	8009e52 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e014      	b.n	8009ea0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d10d      	bne.n	8009e9e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	78fa      	ldrb	r2, [r7, #3]
 8009e98:	4611      	mov	r1, r2
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e014      	b.n	8009eec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d10d      	bne.n	8009eea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d009      	beq.n	8009f38 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6852      	ldr	r2, [r2, #4]
 8009f30:	b2d2      	uxtb	r2, r2
 8009f32:	4611      	mov	r1, r2
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
  }

  return USBD_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b087      	sub	sp, #28
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	3301      	adds	r3, #1
 8009f58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f60:	8a3b      	ldrh	r3, [r7, #16]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	b21a      	sxth	r2, r3
 8009f66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	b21b      	sxth	r3, r3
 8009f6e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009f70:	89fb      	ldrh	r3, [r7, #14]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
	...

08009f80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f96:	2b40      	cmp	r3, #64	; 0x40
 8009f98:	d005      	beq.n	8009fa6 <USBD_StdDevReq+0x26>
 8009f9a:	2b40      	cmp	r3, #64	; 0x40
 8009f9c:	d853      	bhi.n	800a046 <USBD_StdDevReq+0xc6>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00b      	beq.n	8009fba <USBD_StdDevReq+0x3a>
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d14f      	bne.n	800a046 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	4798      	blx	r3
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fb8:	e04a      	b.n	800a050 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	785b      	ldrb	r3, [r3, #1]
 8009fbe:	2b09      	cmp	r3, #9
 8009fc0:	d83b      	bhi.n	800a03a <USBD_StdDevReq+0xba>
 8009fc2:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <USBD_StdDevReq+0x48>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	0800a01d 	.word	0x0800a01d
 8009fcc:	0800a031 	.word	0x0800a031
 8009fd0:	0800a03b 	.word	0x0800a03b
 8009fd4:	0800a027 	.word	0x0800a027
 8009fd8:	0800a03b 	.word	0x0800a03b
 8009fdc:	08009ffb 	.word	0x08009ffb
 8009fe0:	08009ff1 	.word	0x08009ff1
 8009fe4:	0800a03b 	.word	0x0800a03b
 8009fe8:	0800a013 	.word	0x0800a013
 8009fec:	0800a005 	.word	0x0800a005
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f9de 	bl	800a3b4 <USBD_GetDescriptor>
          break;
 8009ff8:	e024      	b.n	800a044 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fb43 	bl	800a688 <USBD_SetAddress>
          break;
 800a002:	e01f      	b.n	800a044 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fb82 	bl	800a710 <USBD_SetConfig>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]
          break;
 800a010:	e018      	b.n	800a044 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fc21 	bl	800a85c <USBD_GetConfig>
          break;
 800a01a:	e013      	b.n	800a044 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fc52 	bl	800a8c8 <USBD_GetStatus>
          break;
 800a024:	e00e      	b.n	800a044 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fc81 	bl	800a930 <USBD_SetFeature>
          break;
 800a02e:	e009      	b.n	800a044 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fc90 	bl	800a958 <USBD_ClrFeature>
          break;
 800a038:	e004      	b.n	800a044 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fce7 	bl	800aa10 <USBD_CtlError>
          break;
 800a042:	bf00      	nop
      }
      break;
 800a044:	e004      	b.n	800a050 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fce1 	bl	800aa10 <USBD_CtlError>
      break;
 800a04e:	bf00      	nop
  }

  return ret;
 800a050:	7bfb      	ldrb	r3, [r7, #15]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop

0800a05c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a072:	2b40      	cmp	r3, #64	; 0x40
 800a074:	d005      	beq.n	800a082 <USBD_StdItfReq+0x26>
 800a076:	2b40      	cmp	r3, #64	; 0x40
 800a078:	d82f      	bhi.n	800a0da <USBD_StdItfReq+0x7e>
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <USBD_StdItfReq+0x26>
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d12b      	bne.n	800a0da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d81d      	bhi.n	800a0cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	889b      	ldrh	r3, [r3, #4]
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b01      	cmp	r3, #1
 800a098:	d813      	bhi.n	800a0c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	4798      	blx	r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	88db      	ldrh	r3, [r3, #6]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d110      	bne.n	800a0d6 <USBD_StdItfReq+0x7a>
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10d      	bne.n	800a0d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fd73 	bl	800aba6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a0c0:	e009      	b.n	800a0d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fca3 	bl	800aa10 <USBD_CtlError>
          break;
 800a0ca:	e004      	b.n	800a0d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fc9e 	bl	800aa10 <USBD_CtlError>
          break;
 800a0d4:	e000      	b.n	800a0d8 <USBD_StdItfReq+0x7c>
          break;
 800a0d6:	bf00      	nop
      }
      break;
 800a0d8:	e004      	b.n	800a0e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fc97 	bl	800aa10 <USBD_CtlError>
      break;
 800a0e2:	bf00      	nop
  }

  return ret;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b084      	sub	sp, #16
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	889b      	ldrh	r3, [r3, #4]
 800a100:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a10a:	2b40      	cmp	r3, #64	; 0x40
 800a10c:	d007      	beq.n	800a11e <USBD_StdEPReq+0x30>
 800a10e:	2b40      	cmp	r3, #64	; 0x40
 800a110:	f200 8145 	bhi.w	800a39e <USBD_StdEPReq+0x2b0>
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00c      	beq.n	800a132 <USBD_StdEPReq+0x44>
 800a118:	2b20      	cmp	r3, #32
 800a11a:	f040 8140 	bne.w	800a39e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	4798      	blx	r3
 800a12c:	4603      	mov	r3, r0
 800a12e:	73fb      	strb	r3, [r7, #15]
      break;
 800a130:	e13a      	b.n	800a3a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	785b      	ldrb	r3, [r3, #1]
 800a136:	2b03      	cmp	r3, #3
 800a138:	d007      	beq.n	800a14a <USBD_StdEPReq+0x5c>
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	f300 8129 	bgt.w	800a392 <USBD_StdEPReq+0x2a4>
 800a140:	2b00      	cmp	r3, #0
 800a142:	d07f      	beq.n	800a244 <USBD_StdEPReq+0x156>
 800a144:	2b01      	cmp	r3, #1
 800a146:	d03c      	beq.n	800a1c2 <USBD_StdEPReq+0xd4>
 800a148:	e123      	b.n	800a392 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b02      	cmp	r3, #2
 800a154:	d002      	beq.n	800a15c <USBD_StdEPReq+0x6e>
 800a156:	2b03      	cmp	r3, #3
 800a158:	d016      	beq.n	800a188 <USBD_StdEPReq+0x9a>
 800a15a:	e02c      	b.n	800a1b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00d      	beq.n	800a17e <USBD_StdEPReq+0x90>
 800a162:	7bbb      	ldrb	r3, [r7, #14]
 800a164:	2b80      	cmp	r3, #128	; 0x80
 800a166:	d00a      	beq.n	800a17e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f004 fc2f 	bl	800e9d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a172:	2180      	movs	r1, #128	; 0x80
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f004 fc2b 	bl	800e9d0 <USBD_LL_StallEP>
 800a17a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a17c:	e020      	b.n	800a1c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fc45 	bl	800aa10 <USBD_CtlError>
              break;
 800a186:	e01b      	b.n	800a1c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	885b      	ldrh	r3, [r3, #2]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10e      	bne.n	800a1ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a190:	7bbb      	ldrb	r3, [r7, #14]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00b      	beq.n	800a1ae <USBD_StdEPReq+0xc0>
 800a196:	7bbb      	ldrb	r3, [r7, #14]
 800a198:	2b80      	cmp	r3, #128	; 0x80
 800a19a:	d008      	beq.n	800a1ae <USBD_StdEPReq+0xc0>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	88db      	ldrh	r3, [r3, #6]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d104      	bne.n	800a1ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f004 fc11 	bl	800e9d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fcf9 	bl	800aba6 <USBD_CtlSendStatus>

              break;
 800a1b4:	e004      	b.n	800a1c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fc29 	bl	800aa10 <USBD_CtlError>
              break;
 800a1be:	bf00      	nop
          }
          break;
 800a1c0:	e0ec      	b.n	800a39c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d002      	beq.n	800a1d4 <USBD_StdEPReq+0xe6>
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d016      	beq.n	800a200 <USBD_StdEPReq+0x112>
 800a1d2:	e030      	b.n	800a236 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00d      	beq.n	800a1f6 <USBD_StdEPReq+0x108>
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	2b80      	cmp	r3, #128	; 0x80
 800a1de:	d00a      	beq.n	800a1f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1e0:	7bbb      	ldrb	r3, [r7, #14]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f004 fbf3 	bl	800e9d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ea:	2180      	movs	r1, #128	; 0x80
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f004 fbef 	bl	800e9d0 <USBD_LL_StallEP>
 800a1f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1f4:	e025      	b.n	800a242 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fc09 	bl	800aa10 <USBD_CtlError>
              break;
 800a1fe:	e020      	b.n	800a242 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	885b      	ldrh	r3, [r3, #2]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d11b      	bne.n	800a240 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a212:	7bbb      	ldrb	r3, [r7, #14]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f004 fbf9 	bl	800ea0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fcc2 	bl	800aba6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	4798      	blx	r3
 800a230:	4603      	mov	r3, r0
 800a232:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a234:	e004      	b.n	800a240 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fbe9 	bl	800aa10 <USBD_CtlError>
              break;
 800a23e:	e000      	b.n	800a242 <USBD_StdEPReq+0x154>
              break;
 800a240:	bf00      	nop
          }
          break;
 800a242:	e0ab      	b.n	800a39c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d002      	beq.n	800a256 <USBD_StdEPReq+0x168>
 800a250:	2b03      	cmp	r3, #3
 800a252:	d032      	beq.n	800a2ba <USBD_StdEPReq+0x1cc>
 800a254:	e097      	b.n	800a386 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d007      	beq.n	800a26c <USBD_StdEPReq+0x17e>
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	2b80      	cmp	r3, #128	; 0x80
 800a260:	d004      	beq.n	800a26c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fbd3 	bl	800aa10 <USBD_CtlError>
                break;
 800a26a:	e091      	b.n	800a390 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a26c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a270:	2b00      	cmp	r3, #0
 800a272:	da0b      	bge.n	800a28c <USBD_StdEPReq+0x19e>
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	3310      	adds	r3, #16
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	4413      	add	r3, r2
 800a288:	3304      	adds	r3, #4
 800a28a:	e00b      	b.n	800a2a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a28c:	7bbb      	ldrb	r3, [r7, #14]
 800a28e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a292:	4613      	mov	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fc1d 	bl	800aaf2 <USBD_CtlSendData>
              break;
 800a2b8:	e06a      	b.n	800a390 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	da11      	bge.n	800a2e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2c2:	7bbb      	ldrb	r3, [r7, #14]
 800a2c4:	f003 020f 	and.w	r2, r3, #15
 800a2c8:	6879      	ldr	r1, [r7, #4]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	440b      	add	r3, r1
 800a2d4:	3324      	adds	r3, #36	; 0x24
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d117      	bne.n	800a30c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fb96 	bl	800aa10 <USBD_CtlError>
                  break;
 800a2e4:	e054      	b.n	800a390 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	f003 020f 	and.w	r2, r3, #15
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	440b      	add	r3, r1
 800a2f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d104      	bne.n	800a30c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fb83 	bl	800aa10 <USBD_CtlError>
                  break;
 800a30a:	e041      	b.n	800a390 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a30c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a310:	2b00      	cmp	r3, #0
 800a312:	da0b      	bge.n	800a32c <USBD_StdEPReq+0x23e>
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	3310      	adds	r3, #16
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	4413      	add	r3, r2
 800a328:	3304      	adds	r3, #4
 800a32a:	e00b      	b.n	800a344 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a332:	4613      	mov	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	4413      	add	r3, r2
 800a342:	3304      	adds	r3, #4
 800a344:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <USBD_StdEPReq+0x264>
 800a34c:	7bbb      	ldrb	r3, [r7, #14]
 800a34e:	2b80      	cmp	r3, #128	; 0x80
 800a350:	d103      	bne.n	800a35a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2200      	movs	r2, #0
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	e00e      	b.n	800a378 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f004 fb74 	bl	800ea4c <USBD_LL_IsStallEP>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2201      	movs	r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	e002      	b.n	800a378 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2202      	movs	r2, #2
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fbb7 	bl	800aaf2 <USBD_CtlSendData>
              break;
 800a384:	e004      	b.n	800a390 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fb41 	bl	800aa10 <USBD_CtlError>
              break;
 800a38e:	bf00      	nop
          }
          break;
 800a390:	e004      	b.n	800a39c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fb3b 	bl	800aa10 <USBD_CtlError>
          break;
 800a39a:	bf00      	nop
      }
      break;
 800a39c:	e004      	b.n	800a3a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fb35 	bl	800aa10 <USBD_CtlError>
      break;
 800a3a6:	bf00      	nop
  }

  return ret;
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	885b      	ldrh	r3, [r3, #2]
 800a3ce:	0a1b      	lsrs	r3, r3, #8
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	f200 8128 	bhi.w	800a62a <USBD_GetDescriptor+0x276>
 800a3da:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <USBD_GetDescriptor+0x2c>)
 800a3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e0:	0800a3fd 	.word	0x0800a3fd
 800a3e4:	0800a415 	.word	0x0800a415
 800a3e8:	0800a455 	.word	0x0800a455
 800a3ec:	0800a62b 	.word	0x0800a62b
 800a3f0:	0800a62b 	.word	0x0800a62b
 800a3f4:	0800a5cb 	.word	0x0800a5cb
 800a3f8:	0800a5f7 	.word	0x0800a5f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	7c12      	ldrb	r2, [r2, #16]
 800a408:	f107 0108 	add.w	r1, r7, #8
 800a40c:	4610      	mov	r0, r2
 800a40e:	4798      	blx	r3
 800a410:	60f8      	str	r0, [r7, #12]
      break;
 800a412:	e112      	b.n	800a63a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7c1b      	ldrb	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10d      	bne.n	800a438 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a424:	f107 0208 	add.w	r2, r7, #8
 800a428:	4610      	mov	r0, r2
 800a42a:	4798      	blx	r3
 800a42c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3301      	adds	r3, #1
 800a432:	2202      	movs	r2, #2
 800a434:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a436:	e100      	b.n	800a63a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	f107 0208 	add.w	r2, r7, #8
 800a444:	4610      	mov	r0, r2
 800a446:	4798      	blx	r3
 800a448:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	2202      	movs	r2, #2
 800a450:	701a      	strb	r2, [r3, #0]
      break;
 800a452:	e0f2      	b.n	800a63a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	885b      	ldrh	r3, [r3, #2]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b05      	cmp	r3, #5
 800a45c:	f200 80ac 	bhi.w	800a5b8 <USBD_GetDescriptor+0x204>
 800a460:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <USBD_GetDescriptor+0xb4>)
 800a462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a466:	bf00      	nop
 800a468:	0800a481 	.word	0x0800a481
 800a46c:	0800a4b5 	.word	0x0800a4b5
 800a470:	0800a4e9 	.word	0x0800a4e9
 800a474:	0800a51d 	.word	0x0800a51d
 800a478:	0800a551 	.word	0x0800a551
 800a47c:	0800a585 	.word	0x0800a585
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00b      	beq.n	800a4a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	7c12      	ldrb	r2, [r2, #16]
 800a498:	f107 0108 	add.w	r1, r7, #8
 800a49c:	4610      	mov	r0, r2
 800a49e:	4798      	blx	r3
 800a4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4a2:	e091      	b.n	800a5c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4a4:	6839      	ldr	r1, [r7, #0]
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fab2 	bl	800aa10 <USBD_CtlError>
            err++;
 800a4ac:	7afb      	ldrb	r3, [r7, #11]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a4b2:	e089      	b.n	800a5c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00b      	beq.n	800a4d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	7c12      	ldrb	r2, [r2, #16]
 800a4cc:	f107 0108 	add.w	r1, r7, #8
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	4798      	blx	r3
 800a4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4d6:	e077      	b.n	800a5c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fa98 	bl	800aa10 <USBD_CtlError>
            err++;
 800a4e0:	7afb      	ldrb	r3, [r7, #11]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4e6:	e06f      	b.n	800a5c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00b      	beq.n	800a50c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	7c12      	ldrb	r2, [r2, #16]
 800a500:	f107 0108 	add.w	r1, r7, #8
 800a504:	4610      	mov	r0, r2
 800a506:	4798      	blx	r3
 800a508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a50a:	e05d      	b.n	800a5c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fa7e 	bl	800aa10 <USBD_CtlError>
            err++;
 800a514:	7afb      	ldrb	r3, [r7, #11]
 800a516:	3301      	adds	r3, #1
 800a518:	72fb      	strb	r3, [r7, #11]
          break;
 800a51a:	e055      	b.n	800a5c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00b      	beq.n	800a540 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	7c12      	ldrb	r2, [r2, #16]
 800a534:	f107 0108 	add.w	r1, r7, #8
 800a538:	4610      	mov	r0, r2
 800a53a:	4798      	blx	r3
 800a53c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a53e:	e043      	b.n	800a5c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fa64 	bl	800aa10 <USBD_CtlError>
            err++;
 800a548:	7afb      	ldrb	r3, [r7, #11]
 800a54a:	3301      	adds	r3, #1
 800a54c:	72fb      	strb	r3, [r7, #11]
          break;
 800a54e:	e03b      	b.n	800a5c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a556:	695b      	ldr	r3, [r3, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00b      	beq.n	800a574 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a562:	695b      	ldr	r3, [r3, #20]
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	7c12      	ldrb	r2, [r2, #16]
 800a568:	f107 0108 	add.w	r1, r7, #8
 800a56c:	4610      	mov	r0, r2
 800a56e:	4798      	blx	r3
 800a570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a572:	e029      	b.n	800a5c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fa4a 	bl	800aa10 <USBD_CtlError>
            err++;
 800a57c:	7afb      	ldrb	r3, [r7, #11]
 800a57e:	3301      	adds	r3, #1
 800a580:	72fb      	strb	r3, [r7, #11]
          break;
 800a582:	e021      	b.n	800a5c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00b      	beq.n	800a5a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	7c12      	ldrb	r2, [r2, #16]
 800a59c:	f107 0108 	add.w	r1, r7, #8
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	4798      	blx	r3
 800a5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5a6:	e00f      	b.n	800a5c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fa30 	bl	800aa10 <USBD_CtlError>
            err++;
 800a5b0:	7afb      	ldrb	r3, [r7, #11]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5b6:	e007      	b.n	800a5c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fa28 	bl	800aa10 <USBD_CtlError>
          err++;
 800a5c0:	7afb      	ldrb	r3, [r7, #11]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a5c6:	bf00      	nop
      }
      break;
 800a5c8:	e037      	b.n	800a63a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7c1b      	ldrb	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5da:	f107 0208 	add.w	r2, r7, #8
 800a5de:	4610      	mov	r0, r2
 800a5e0:	4798      	blx	r3
 800a5e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5e4:	e029      	b.n	800a63a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a5e6:	6839      	ldr	r1, [r7, #0]
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fa11 	bl	800aa10 <USBD_CtlError>
        err++;
 800a5ee:	7afb      	ldrb	r3, [r7, #11]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5f4:	e021      	b.n	800a63a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	7c1b      	ldrb	r3, [r3, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10d      	bne.n	800a61a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a606:	f107 0208 	add.w	r2, r7, #8
 800a60a:	4610      	mov	r0, r2
 800a60c:	4798      	blx	r3
 800a60e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	2207      	movs	r2, #7
 800a616:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a618:	e00f      	b.n	800a63a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f9f7 	bl	800aa10 <USBD_CtlError>
        err++;
 800a622:	7afb      	ldrb	r3, [r7, #11]
 800a624:	3301      	adds	r3, #1
 800a626:	72fb      	strb	r3, [r7, #11]
      break;
 800a628:	e007      	b.n	800a63a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a62a:	6839      	ldr	r1, [r7, #0]
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f9ef 	bl	800aa10 <USBD_CtlError>
      err++;
 800a632:	7afb      	ldrb	r3, [r7, #11]
 800a634:	3301      	adds	r3, #1
 800a636:	72fb      	strb	r3, [r7, #11]
      break;
 800a638:	bf00      	nop
  }

  if (err != 0U)
 800a63a:	7afb      	ldrb	r3, [r7, #11]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d11e      	bne.n	800a67e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	88db      	ldrh	r3, [r3, #6]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d016      	beq.n	800a676 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a648:	893b      	ldrh	r3, [r7, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00e      	beq.n	800a66c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	88da      	ldrh	r2, [r3, #6]
 800a652:	893b      	ldrh	r3, [r7, #8]
 800a654:	4293      	cmp	r3, r2
 800a656:	bf28      	it	cs
 800a658:	4613      	movcs	r3, r2
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a65e:	893b      	ldrh	r3, [r7, #8]
 800a660:	461a      	mov	r2, r3
 800a662:	68f9      	ldr	r1, [r7, #12]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fa44 	bl	800aaf2 <USBD_CtlSendData>
 800a66a:	e009      	b.n	800a680 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f9ce 	bl	800aa10 <USBD_CtlError>
 800a674:	e004      	b.n	800a680 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fa95 	bl	800aba6 <USBD_CtlSendStatus>
 800a67c:	e000      	b.n	800a680 <USBD_GetDescriptor+0x2cc>
    return;
 800a67e:	bf00      	nop
  }
}
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop

0800a688 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	889b      	ldrh	r3, [r3, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d131      	bne.n	800a6fe <USBD_SetAddress+0x76>
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	88db      	ldrh	r3, [r3, #6]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d12d      	bne.n	800a6fe <USBD_SetAddress+0x76>
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	885b      	ldrh	r3, [r3, #2]
 800a6a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a6a8:	d829      	bhi.n	800a6fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	885b      	ldrh	r3, [r3, #2]
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d104      	bne.n	800a6cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f9a3 	bl	800aa10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ca:	e01d      	b.n	800a708 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7bfa      	ldrb	r2, [r7, #15]
 800a6d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f004 f9e3 	bl	800eaa4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fa61 	bl	800aba6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d004      	beq.n	800a6f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f2:	e009      	b.n	800a708 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fc:	e004      	b.n	800a708 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f985 	bl	800aa10 <USBD_CtlError>
  }
}
 800a706:	bf00      	nop
 800a708:	bf00      	nop
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	b2da      	uxtb	r2, r3
 800a724:	4b4c      	ldr	r3, [pc, #304]	; (800a858 <USBD_SetConfig+0x148>)
 800a726:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a728:	4b4b      	ldr	r3, [pc, #300]	; (800a858 <USBD_SetConfig+0x148>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d905      	bls.n	800a73c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f96c 	bl	800aa10 <USBD_CtlError>
    return USBD_FAIL;
 800a738:	2303      	movs	r3, #3
 800a73a:	e088      	b.n	800a84e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b02      	cmp	r3, #2
 800a746:	d002      	beq.n	800a74e <USBD_SetConfig+0x3e>
 800a748:	2b03      	cmp	r3, #3
 800a74a:	d025      	beq.n	800a798 <USBD_SetConfig+0x88>
 800a74c:	e071      	b.n	800a832 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a74e:	4b42      	ldr	r3, [pc, #264]	; (800a858 <USBD_SetConfig+0x148>)
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d01c      	beq.n	800a790 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a756:	4b40      	ldr	r3, [pc, #256]	; (800a858 <USBD_SetConfig+0x148>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a760:	4b3d      	ldr	r3, [pc, #244]	; (800a858 <USBD_SetConfig+0x148>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff f948 	bl	80099fc <USBD_SetClassConfig>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a770:	7bfb      	ldrb	r3, [r7, #15]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d004      	beq.n	800a780 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f949 	bl	800aa10 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a77e:	e065      	b.n	800a84c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fa10 	bl	800aba6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2203      	movs	r2, #3
 800a78a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a78e:	e05d      	b.n	800a84c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fa08 	bl	800aba6 <USBD_CtlSendStatus>
      break;
 800a796:	e059      	b.n	800a84c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a798:	4b2f      	ldr	r3, [pc, #188]	; (800a858 <USBD_SetConfig+0x148>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d112      	bne.n	800a7c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a7a8:	4b2b      	ldr	r3, [pc, #172]	; (800a858 <USBD_SetConfig+0x148>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7b2:	4b29      	ldr	r3, [pc, #164]	; (800a858 <USBD_SetConfig+0x148>)
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff f93b 	bl	8009a34 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f9f1 	bl	800aba6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7c4:	e042      	b.n	800a84c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a7c6:	4b24      	ldr	r3, [pc, #144]	; (800a858 <USBD_SetConfig+0x148>)
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d02a      	beq.n	800a82a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff f929 	bl	8009a34 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a7e2:	4b1d      	ldr	r3, [pc, #116]	; (800a858 <USBD_SetConfig+0x148>)
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7ec:	4b1a      	ldr	r3, [pc, #104]	; (800a858 <USBD_SetConfig+0x148>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff f902 	bl	80099fc <USBD_SetClassConfig>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00f      	beq.n	800a822 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f903 	bl	800aa10 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff f90e 	bl	8009a34 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2202      	movs	r2, #2
 800a81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a820:	e014      	b.n	800a84c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f9bf 	bl	800aba6 <USBD_CtlSendStatus>
      break;
 800a828:	e010      	b.n	800a84c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f9bb 	bl	800aba6 <USBD_CtlSendStatus>
      break;
 800a830:	e00c      	b.n	800a84c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f8eb 	bl	800aa10 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a83a:	4b07      	ldr	r3, [pc, #28]	; (800a858 <USBD_SetConfig+0x148>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff f8f7 	bl	8009a34 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a846:	2303      	movs	r3, #3
 800a848:	73fb      	strb	r3, [r7, #15]
      break;
 800a84a:	bf00      	nop
  }

  return ret;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20000768 	.word	0x20000768

0800a85c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	88db      	ldrh	r3, [r3, #6]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d004      	beq.n	800a878 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f8cd 	bl	800aa10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a876:	e023      	b.n	800a8c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b02      	cmp	r3, #2
 800a882:	dc02      	bgt.n	800a88a <USBD_GetConfig+0x2e>
 800a884:	2b00      	cmp	r3, #0
 800a886:	dc03      	bgt.n	800a890 <USBD_GetConfig+0x34>
 800a888:	e015      	b.n	800a8b6 <USBD_GetConfig+0x5a>
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	d00b      	beq.n	800a8a6 <USBD_GetConfig+0x4a>
 800a88e:	e012      	b.n	800a8b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3308      	adds	r3, #8
 800a89a:	2201      	movs	r2, #1
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f927 	bl	800aaf2 <USBD_CtlSendData>
        break;
 800a8a4:	e00c      	b.n	800a8c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f91f 	bl	800aaf2 <USBD_CtlSendData>
        break;
 800a8b4:	e004      	b.n	800a8c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f8a9 	bl	800aa10 <USBD_CtlError>
        break;
 800a8be:	bf00      	nop
}
 800a8c0:	bf00      	nop
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d81e      	bhi.n	800a91e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	88db      	ldrh	r3, [r3, #6]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d004      	beq.n	800a8f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f890 	bl	800aa10 <USBD_CtlError>
        break;
 800a8f0:	e01a      	b.n	800a928 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d005      	beq.n	800a90e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	f043 0202 	orr.w	r2, r3, #2
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	330c      	adds	r3, #12
 800a912:	2202      	movs	r2, #2
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f8eb 	bl	800aaf2 <USBD_CtlSendData>
      break;
 800a91c:	e004      	b.n	800a928 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f875 	bl	800aa10 <USBD_CtlError>
      break;
 800a926:	bf00      	nop
  }
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	885b      	ldrh	r3, [r3, #2]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d106      	bne.n	800a950 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f92b 	bl	800aba6 <USBD_CtlSendStatus>
  }
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	3b01      	subs	r3, #1
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d80b      	bhi.n	800a988 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	885b      	ldrh	r3, [r3, #2]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d10c      	bne.n	800a992 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f910 	bl	800aba6 <USBD_CtlSendStatus>
      }
      break;
 800a986:	e004      	b.n	800a992 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f840 	bl	800aa10 <USBD_CtlError>
      break;
 800a990:	e000      	b.n	800a994 <USBD_ClrFeature+0x3c>
      break;
 800a992:	bf00      	nop
  }
}
 800a994:	bf00      	nop
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	781a      	ldrb	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7ff fabb 	bl	8009f42 <SWAPBYTE>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f7ff faae 	bl	8009f42 <SWAPBYTE>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff faa1 	bl	8009f42 <SWAPBYTE>
 800aa00:	4603      	mov	r3, r0
 800aa02:	461a      	mov	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	80da      	strh	r2, [r3, #6]
}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa1a:	2180      	movs	r1, #128	; 0x80
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f003 ffd7 	bl	800e9d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa22:	2100      	movs	r1, #0
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f003 ffd3 	bl	800e9d0 <USBD_LL_StallEP>
}
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b086      	sub	sp, #24
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d036      	beq.n	800aab6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aa4c:	6938      	ldr	r0, [r7, #16]
 800aa4e:	f000 f836 	bl	800aabe <USBD_GetLen>
 800aa52:	4603      	mov	r3, r0
 800aa54:	3301      	adds	r3, #1
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa60:	7dfb      	ldrb	r3, [r7, #23]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	4413      	add	r3, r2
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	7812      	ldrb	r2, [r2, #0]
 800aa6a:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	4413      	add	r3, r2
 800aa78:	2203      	movs	r2, #3
 800aa7a:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa82:	e013      	b.n	800aaac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	4413      	add	r3, r2
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	7812      	ldrb	r2, [r2, #0]
 800aa8e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	3301      	adds	r3, #1
 800aa94:	613b      	str	r3, [r7, #16]
    idx++;
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	701a      	strb	r2, [r3, #0]
    idx++;
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e7      	bne.n	800aa84 <USBD_GetString+0x52>
 800aab4:	e000      	b.n	800aab8 <USBD_GetString+0x86>
    return;
 800aab6:	bf00      	nop
  }
}
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b085      	sub	sp, #20
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aace:	e005      	b.n	800aadc <USBD_GetLen+0x1e>
  {
    len++;
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	3301      	adds	r3, #1
 800aad4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	3301      	adds	r3, #1
 800aada:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1f5      	bne.n	800aad0 <USBD_GetLen+0x12>
  }

  return len;
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2202      	movs	r2, #2
 800ab02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	2100      	movs	r1, #0
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f003 ffe2 	bl	800eae2 <USBD_LL_Transmit>

  return USBD_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	2100      	movs	r1, #0
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f003 ffd1 	bl	800eae2 <USBD_LL_Transmit>

  return USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	60f8      	str	r0, [r7, #12]
 800ab52:	60b9      	str	r1, [r7, #8]
 800ab54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2203      	movs	r2, #3
 800ab5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	2100      	movs	r1, #0
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f003 ffd5 	bl	800eb24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	2100      	movs	r1, #0
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f003 ffc4 	bl	800eb24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2204      	movs	r2, #4
 800abb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800abb6:	2300      	movs	r3, #0
 800abb8:	2200      	movs	r2, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f003 ff90 	bl	800eae2 <USBD_LL_Transmit>

  return USBD_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2205      	movs	r2, #5
 800abd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abdc:	2300      	movs	r3, #0
 800abde:	2200      	movs	r2, #0
 800abe0:	2100      	movs	r1, #0
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f003 ff9e 	bl	800eb24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <__NVIC_SetPriority>:
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	6039      	str	r1, [r7, #0]
 800abfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	db0a      	blt.n	800ac1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	490c      	ldr	r1, [pc, #48]	; (800ac40 <__NVIC_SetPriority+0x4c>)
 800ac0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac12:	0112      	lsls	r2, r2, #4
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	440b      	add	r3, r1
 800ac18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac1c:	e00a      	b.n	800ac34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	4908      	ldr	r1, [pc, #32]	; (800ac44 <__NVIC_SetPriority+0x50>)
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	f003 030f 	and.w	r3, r3, #15
 800ac2a:	3b04      	subs	r3, #4
 800ac2c:	0112      	lsls	r2, r2, #4
 800ac2e:	b2d2      	uxtb	r2, r2
 800ac30:	440b      	add	r3, r1
 800ac32:	761a      	strb	r2, [r3, #24]
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	e000e100 	.word	0xe000e100
 800ac44:	e000ed00 	.word	0xe000ed00

0800ac48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac4c:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <SysTick_Handler+0x1c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac50:	f002 f902 	bl	800ce58 <xTaskGetSchedulerState>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d001      	beq.n	800ac5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac5a:	f003 f82d 	bl	800dcb8 <xPortSysTickHandler>
  }
}
 800ac5e:	bf00      	nop
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	e000e010 	.word	0xe000e010

0800ac68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	f06f 0004 	mvn.w	r0, #4
 800ac72:	f7ff ffbf 	bl	800abf4 <__NVIC_SetPriority>
#endif
}
 800ac76:	bf00      	nop
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac82:	f3ef 8305 	mrs	r3, IPSR
 800ac86:	603b      	str	r3, [r7, #0]
  return(result);
 800ac88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d003      	beq.n	800ac96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ac8e:	f06f 0305 	mvn.w	r3, #5
 800ac92:	607b      	str	r3, [r7, #4]
 800ac94:	e00c      	b.n	800acb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac96:	4b0a      	ldr	r3, [pc, #40]	; (800acc0 <osKernelInitialize+0x44>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d105      	bne.n	800acaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac9e:	4b08      	ldr	r3, [pc, #32]	; (800acc0 <osKernelInitialize+0x44>)
 800aca0:	2201      	movs	r2, #1
 800aca2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	607b      	str	r3, [r7, #4]
 800aca8:	e002      	b.n	800acb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800acaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800acb0:	687b      	ldr	r3, [r7, #4]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	2000076c 	.word	0x2000076c

0800acc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acca:	f3ef 8305 	mrs	r3, IPSR
 800acce:	603b      	str	r3, [r7, #0]
  return(result);
 800acd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <osKernelStart+0x1a>
    stat = osErrorISR;
 800acd6:	f06f 0305 	mvn.w	r3, #5
 800acda:	607b      	str	r3, [r7, #4]
 800acdc:	e010      	b.n	800ad00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800acde:	4b0b      	ldr	r3, [pc, #44]	; (800ad0c <osKernelStart+0x48>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d109      	bne.n	800acfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ace6:	f7ff ffbf 	bl	800ac68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800acea:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <osKernelStart+0x48>)
 800acec:	2202      	movs	r2, #2
 800acee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800acf0:	f001 fad0 	bl	800c294 <vTaskStartScheduler>
      stat = osOK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	607b      	str	r3, [r7, #4]
 800acf8:	e002      	b.n	800ad00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800acfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad00:	687b      	ldr	r3, [r7, #4]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	2000076c 	.word	0x2000076c

0800ad10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08e      	sub	sp, #56	; 0x38
 800ad14:	af04      	add	r7, sp, #16
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad20:	f3ef 8305 	mrs	r3, IPSR
 800ad24:	617b      	str	r3, [r7, #20]
  return(result);
 800ad26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d17e      	bne.n	800ae2a <osThreadNew+0x11a>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d07b      	beq.n	800ae2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad32:	2380      	movs	r3, #128	; 0x80
 800ad34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad36:	2318      	movs	r3, #24
 800ad38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d045      	beq.n	800add6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <osThreadNew+0x48>
        name = attr->name;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d008      	beq.n	800ad7e <osThreadNew+0x6e>
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	2b38      	cmp	r3, #56	; 0x38
 800ad70:	d805      	bhi.n	800ad7e <osThreadNew+0x6e>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <osThreadNew+0x72>
        return (NULL);
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e054      	b.n	800ae2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	089b      	lsrs	r3, r3, #2
 800ad90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00e      	beq.n	800adb8 <osThreadNew+0xa8>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	2bbf      	cmp	r3, #191	; 0xbf
 800ada0:	d90a      	bls.n	800adb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d006      	beq.n	800adb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <osThreadNew+0xa8>
        mem = 1;
 800adb2:	2301      	movs	r3, #1
 800adb4:	61bb      	str	r3, [r7, #24]
 800adb6:	e010      	b.n	800adda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10c      	bne.n	800adda <osThreadNew+0xca>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d108      	bne.n	800adda <osThreadNew+0xca>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d104      	bne.n	800adda <osThreadNew+0xca>
          mem = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	61bb      	str	r3, [r7, #24]
 800add4:	e001      	b.n	800adda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800add6:	2300      	movs	r3, #0
 800add8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d110      	bne.n	800ae02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ade8:	9202      	str	r2, [sp, #8]
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	6a3a      	ldr	r2, [r7, #32]
 800adf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 fff6 	bl	800bde8 <xTaskCreateStatic>
 800adfc:	4603      	mov	r3, r0
 800adfe:	613b      	str	r3, [r7, #16]
 800ae00:	e013      	b.n	800ae2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d110      	bne.n	800ae2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	f107 0310 	add.w	r3, r7, #16
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f001 f841 	bl	800bea2 <xTaskCreate>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d001      	beq.n	800ae2a <osThreadNew+0x11a>
            hTask = NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae2a:	693b      	ldr	r3, [r7, #16]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3728      	adds	r7, #40	; 0x28
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae3c:	f3ef 8305 	mrs	r3, IPSR
 800ae40:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <osDelay+0x1c>
    stat = osErrorISR;
 800ae48:	f06f 0305 	mvn.w	r3, #5
 800ae4c:	60fb      	str	r3, [r7, #12]
 800ae4e:	e007      	b.n	800ae60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f001 f980 	bl	800c160 <vTaskDelay>
    }
  }

  return (stat);
 800ae60:	68fb      	ldr	r3, [r7, #12]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b08a      	sub	sp, #40	; 0x28
 800ae6e:	af02      	add	r7, sp, #8
 800ae70:	60f8      	str	r0, [r7, #12]
 800ae72:	60b9      	str	r1, [r7, #8]
 800ae74:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae7a:	f3ef 8305 	mrs	r3, IPSR
 800ae7e:	613b      	str	r3, [r7, #16]
  return(result);
 800ae80:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d15f      	bne.n	800af46 <osMessageQueueNew+0xdc>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d05c      	beq.n	800af46 <osMessageQueueNew+0xdc>
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d059      	beq.n	800af46 <osMessageQueueNew+0xdc>
    mem = -1;
 800ae92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d029      	beq.n	800aef2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d012      	beq.n	800aecc <osMessageQueueNew+0x62>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	2b4f      	cmp	r3, #79	; 0x4f
 800aeac:	d90e      	bls.n	800aecc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00a      	beq.n	800aecc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	695a      	ldr	r2, [r3, #20]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	68b9      	ldr	r1, [r7, #8]
 800aebe:	fb01 f303 	mul.w	r3, r1, r3
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d302      	bcc.n	800aecc <osMessageQueueNew+0x62>
        mem = 1;
 800aec6:	2301      	movs	r3, #1
 800aec8:	61bb      	str	r3, [r7, #24]
 800aeca:	e014      	b.n	800aef6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d110      	bne.n	800aef6 <osMessageQueueNew+0x8c>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10c      	bne.n	800aef6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d108      	bne.n	800aef6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d104      	bne.n	800aef6 <osMessageQueueNew+0x8c>
          mem = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	61bb      	str	r3, [r7, #24]
 800aef0:	e001      	b.n	800aef6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d10b      	bne.n	800af14 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	691a      	ldr	r2, [r3, #16]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	2100      	movs	r1, #0
 800af06:	9100      	str	r1, [sp, #0]
 800af08:	68b9      	ldr	r1, [r7, #8]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f000 fa2e 	bl	800b36c <xQueueGenericCreateStatic>
 800af10:	61f8      	str	r0, [r7, #28]
 800af12:	e008      	b.n	800af26 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d105      	bne.n	800af26 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800af1a:	2200      	movs	r2, #0
 800af1c:	68b9      	ldr	r1, [r7, #8]
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 fa9c 	bl	800b45c <xQueueGenericCreate>
 800af24:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00c      	beq.n	800af46 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <osMessageQueueNew+0xd0>
        name = attr->name;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	e001      	b.n	800af3e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800af3e:	6979      	ldr	r1, [r7, #20]
 800af40:	69f8      	ldr	r0, [r7, #28]
 800af42:	f000 fef3 	bl	800bd2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800af46:	69fb      	ldr	r3, [r7, #28]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3720      	adds	r7, #32
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800af50:	b580      	push	{r7, lr}
 800af52:	b088      	sub	sp, #32
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	4613      	mov	r3, r2
 800af5e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800af64:	2300      	movs	r3, #0
 800af66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af68:	f3ef 8305 	mrs	r3, IPSR
 800af6c:	617b      	str	r3, [r7, #20]
  return(result);
 800af6e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800af70:	2b00      	cmp	r3, #0
 800af72:	d028      	beq.n	800afc6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <osMessageQueuePut+0x36>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <osMessageQueuePut+0x36>
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800af86:	f06f 0303 	mvn.w	r3, #3
 800af8a:	61fb      	str	r3, [r7, #28]
 800af8c:	e038      	b.n	800b000 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800af8e:	2300      	movs	r3, #0
 800af90:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800af92:	f107 0210 	add.w	r2, r7, #16
 800af96:	2300      	movs	r3, #0
 800af98:	68b9      	ldr	r1, [r7, #8]
 800af9a:	69b8      	ldr	r0, [r7, #24]
 800af9c:	f000 fbba 	bl	800b714 <xQueueGenericSendFromISR>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d003      	beq.n	800afae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800afa6:	f06f 0302 	mvn.w	r3, #2
 800afaa:	61fb      	str	r3, [r7, #28]
 800afac:	e028      	b.n	800b000 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d025      	beq.n	800b000 <osMessageQueuePut+0xb0>
 800afb4:	4b15      	ldr	r3, [pc, #84]	; (800b00c <osMessageQueuePut+0xbc>)
 800afb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	e01c      	b.n	800b000 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <osMessageQueuePut+0x82>
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d103      	bne.n	800afda <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800afd2:	f06f 0303 	mvn.w	r3, #3
 800afd6:	61fb      	str	r3, [r7, #28]
 800afd8:	e012      	b.n	800b000 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800afda:	2300      	movs	r3, #0
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	68b9      	ldr	r1, [r7, #8]
 800afe0:	69b8      	ldr	r0, [r7, #24]
 800afe2:	f000 fa99 	bl	800b518 <xQueueGenericSend>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d009      	beq.n	800b000 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800aff2:	f06f 0301 	mvn.w	r3, #1
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	e002      	b.n	800b000 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800affa:	f06f 0302 	mvn.w	r3, #2
 800affe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b000:	69fb      	ldr	r3, [r7, #28]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	e000ed04 	.word	0xe000ed04

0800b010 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b022:	2300      	movs	r3, #0
 800b024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b026:	f3ef 8305 	mrs	r3, IPSR
 800b02a:	617b      	str	r3, [r7, #20]
  return(result);
 800b02c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d028      	beq.n	800b084 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <osMessageQueueGet+0x34>
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <osMessageQueueGet+0x34>
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d003      	beq.n	800b04c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b044:	f06f 0303 	mvn.w	r3, #3
 800b048:	61fb      	str	r3, [r7, #28]
 800b04a:	e037      	b.n	800b0bc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b04c:	2300      	movs	r3, #0
 800b04e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b050:	f107 0310 	add.w	r3, r7, #16
 800b054:	461a      	mov	r2, r3
 800b056:	68b9      	ldr	r1, [r7, #8]
 800b058:	69b8      	ldr	r0, [r7, #24]
 800b05a:	f000 fcd7 	bl	800ba0c <xQueueReceiveFromISR>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b01      	cmp	r3, #1
 800b062:	d003      	beq.n	800b06c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b064:	f06f 0302 	mvn.w	r3, #2
 800b068:	61fb      	str	r3, [r7, #28]
 800b06a:	e027      	b.n	800b0bc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d024      	beq.n	800b0bc <osMessageQueueGet+0xac>
 800b072:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <osMessageQueueGet+0xb8>)
 800b074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	e01b      	b.n	800b0bc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d002      	beq.n	800b090 <osMessageQueueGet+0x80>
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d103      	bne.n	800b098 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b090:	f06f 0303 	mvn.w	r3, #3
 800b094:	61fb      	str	r3, [r7, #28]
 800b096:	e011      	b.n	800b0bc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	68b9      	ldr	r1, [r7, #8]
 800b09c:	69b8      	ldr	r0, [r7, #24]
 800b09e:	f000 fbd5 	bl	800b84c <xQueueReceive>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d009      	beq.n	800b0bc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b0ae:	f06f 0301 	mvn.w	r3, #1
 800b0b2:	61fb      	str	r3, [r7, #28]
 800b0b4:	e002      	b.n	800b0bc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b0b6:	f06f 0302 	mvn.w	r3, #2
 800b0ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b0bc:	69fb      	ldr	r3, [r7, #28]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4a07      	ldr	r2, [pc, #28]	; (800b0f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b0dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	4a06      	ldr	r2, [pc, #24]	; (800b0fc <vApplicationGetIdleTaskMemory+0x30>)
 800b0e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2280      	movs	r2, #128	; 0x80
 800b0e8:	601a      	str	r2, [r3, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	20000770 	.word	0x20000770
 800b0fc:	20000830 	.word	0x20000830

0800b100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4a07      	ldr	r2, [pc, #28]	; (800b12c <vApplicationGetTimerTaskMemory+0x2c>)
 800b110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	4a06      	ldr	r2, [pc, #24]	; (800b130 <vApplicationGetTimerTaskMemory+0x30>)
 800b116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b11e:	601a      	str	r2, [r3, #0]
}
 800b120:	bf00      	nop
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	20000a30 	.word	0x20000a30
 800b130:	20000af0 	.word	0x20000af0

0800b134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f103 0208 	add.w	r2, r3, #8
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b14c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f103 0208 	add.w	r2, r3, #8
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f103 0208 	add.w	r2, r3, #8
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b182:	bf00      	nop
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b18e:	b480      	push	{r7}
 800b190:	b085      	sub	sp, #20
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	689a      	ldr	r2, [r3, #8]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	601a      	str	r2, [r3, #0]
}
 800b1ca:	bf00      	nop
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1ec:	d103      	bne.n	800b1f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	e00c      	b.n	800b210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e002      	b.n	800b204 <vListInsert+0x2e>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d2f6      	bcs.n	800b1fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	601a      	str	r2, [r3, #0]
}
 800b23c:	bf00      	nop
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	6892      	ldr	r2, [r2, #8]
 800b25e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	6852      	ldr	r2, [r2, #4]
 800b268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	429a      	cmp	r2, r3
 800b272:	d103      	bne.n	800b27c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	1e5a      	subs	r2, r3, #1
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b2c6:	f002 fc65 	bl	800db94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2d2:	68f9      	ldr	r1, [r7, #12]
 800b2d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2d6:	fb01 f303 	mul.w	r3, r1, r3
 800b2da:	441a      	add	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	68f9      	ldr	r1, [r7, #12]
 800b2fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2fc:	fb01 f303 	mul.w	r3, r1, r3
 800b300:	441a      	add	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	22ff      	movs	r2, #255	; 0xff
 800b30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	22ff      	movs	r2, #255	; 0xff
 800b312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d114      	bne.n	800b346 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d01a      	beq.n	800b35a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3310      	adds	r3, #16
 800b328:	4618      	mov	r0, r3
 800b32a:	f001 faff 	bl	800c92c <xTaskRemoveFromEventList>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d012      	beq.n	800b35a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b334:	4b0c      	ldr	r3, [pc, #48]	; (800b368 <xQueueGenericReset+0xcc>)
 800b336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	e009      	b.n	800b35a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3310      	adds	r3, #16
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff fef2 	bl	800b134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3324      	adds	r3, #36	; 0x24
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff feed 	bl	800b134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b35a:	f002 fc4b 	bl	800dbf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b35e:	2301      	movs	r3, #1
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08e      	sub	sp, #56	; 0x38
 800b370:	af02      	add	r7, sp, #8
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d002      	beq.n	800b3be <xQueueGenericCreateStatic+0x52>
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <xQueueGenericCreateStatic+0x56>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e000      	b.n	800b3c4 <xQueueGenericCreateStatic+0x58>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10a      	bne.n	800b3de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	f383 8811 	msr	BASEPRI, r3
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	623b      	str	r3, [r7, #32]
}
 800b3da:	bf00      	nop
 800b3dc:	e7fe      	b.n	800b3dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d102      	bne.n	800b3ea <xQueueGenericCreateStatic+0x7e>
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <xQueueGenericCreateStatic+0x82>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e000      	b.n	800b3f0 <xQueueGenericCreateStatic+0x84>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	61fb      	str	r3, [r7, #28]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b40a:	2350      	movs	r3, #80	; 0x50
 800b40c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b50      	cmp	r3, #80	; 0x50
 800b412:	d00a      	beq.n	800b42a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	61bb      	str	r3, [r7, #24]
}
 800b426:	bf00      	nop
 800b428:	e7fe      	b.n	800b428 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b42a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00d      	beq.n	800b452 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b43e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	4613      	mov	r3, r2
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 f83f 	bl	800b4d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b454:	4618      	mov	r0, r3
 800b456:	3730      	adds	r7, #48	; 0x30
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af02      	add	r7, sp, #8
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	4613      	mov	r3, r2
 800b468:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10a      	bne.n	800b486 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	613b      	str	r3, [r7, #16]
}
 800b482:	bf00      	nop
 800b484:	e7fe      	b.n	800b484 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	fb02 f303 	mul.w	r3, r2, r3
 800b48e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	3350      	adds	r3, #80	; 0x50
 800b494:	4618      	mov	r0, r3
 800b496:	f002 fc9f 	bl	800ddd8 <pvPortMalloc>
 800b49a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d011      	beq.n	800b4c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	3350      	adds	r3, #80	; 0x50
 800b4aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4b4:	79fa      	ldrb	r2, [r7, #7]
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	68b9      	ldr	r1, [r7, #8]
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f000 f805 	bl	800b4d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
	}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3720      	adds	r7, #32
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d103      	bne.n	800b4ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	e002      	b.n	800b4f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b4fe:	2101      	movs	r1, #1
 800b500:	69b8      	ldr	r0, [r7, #24]
 800b502:	f7ff fecb 	bl	800b29c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	78fa      	ldrb	r2, [r7, #3]
 800b50a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b50e:	bf00      	nop
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
	...

0800b518 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08e      	sub	sp, #56	; 0x38
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b526:	2300      	movs	r3, #0
 800b528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <xQueueGenericSend+0x32>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d103      	bne.n	800b558 <xQueueGenericSend+0x40>
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <xQueueGenericSend+0x44>
 800b558:	2301      	movs	r3, #1
 800b55a:	e000      	b.n	800b55e <xQueueGenericSend+0x46>
 800b55c:	2300      	movs	r3, #0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <xQueueGenericSend+0x60>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d103      	bne.n	800b586 <xQueueGenericSend+0x6e>
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b582:	2b01      	cmp	r3, #1
 800b584:	d101      	bne.n	800b58a <xQueueGenericSend+0x72>
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <xQueueGenericSend+0x74>
 800b58a:	2300      	movs	r3, #0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	623b      	str	r3, [r7, #32]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5a6:	f001 fc57 	bl	800ce58 <xTaskGetSchedulerState>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d102      	bne.n	800b5b6 <xQueueGenericSend+0x9e>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <xQueueGenericSend+0xa2>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e000      	b.n	800b5bc <xQueueGenericSend+0xa4>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10a      	bne.n	800b5d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	61fb      	str	r3, [r7, #28]
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5d6:	f002 fadd 	bl	800db94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d302      	bcc.n	800b5ec <xQueueGenericSend+0xd4>
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	d129      	bne.n	800b640 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5ec:	683a      	ldr	r2, [r7, #0]
 800b5ee:	68b9      	ldr	r1, [r7, #8]
 800b5f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5f2:	f000 fa8b 	bl	800bb0c <prvCopyDataToQueue>
 800b5f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d010      	beq.n	800b622 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	3324      	adds	r3, #36	; 0x24
 800b604:	4618      	mov	r0, r3
 800b606:	f001 f991 	bl	800c92c <xTaskRemoveFromEventList>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d013      	beq.n	800b638 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b610:	4b3f      	ldr	r3, [pc, #252]	; (800b710 <xQueueGenericSend+0x1f8>)
 800b612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	e00a      	b.n	800b638 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b624:	2b00      	cmp	r3, #0
 800b626:	d007      	beq.n	800b638 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b628:	4b39      	ldr	r3, [pc, #228]	; (800b710 <xQueueGenericSend+0x1f8>)
 800b62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b638:	f002 fadc 	bl	800dbf4 <vPortExitCritical>
				return pdPASS;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e063      	b.n	800b708 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d103      	bne.n	800b64e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b646:	f002 fad5 	bl	800dbf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e05c      	b.n	800b708 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b650:	2b00      	cmp	r3, #0
 800b652:	d106      	bne.n	800b662 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b654:	f107 0314 	add.w	r3, r7, #20
 800b658:	4618      	mov	r0, r3
 800b65a:	f001 f9cb 	bl	800c9f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b65e:	2301      	movs	r3, #1
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b662:	f002 fac7 	bl	800dbf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b666:	f000 fe89 	bl	800c37c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b66a:	f002 fa93 	bl	800db94 <vPortEnterCritical>
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b674:	b25b      	sxtb	r3, r3
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b67a:	d103      	bne.n	800b684 <xQueueGenericSend+0x16c>
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b68a:	b25b      	sxtb	r3, r3
 800b68c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b690:	d103      	bne.n	800b69a <xQueueGenericSend+0x182>
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b69a:	f002 faab 	bl	800dbf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b69e:	1d3a      	adds	r2, r7, #4
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f001 f9ba 	bl	800ca20 <xTaskCheckForTimeOut>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d124      	bne.n	800b6fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6b4:	f000 fb22 	bl	800bcfc <prvIsQueueFull>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d018      	beq.n	800b6f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	3310      	adds	r3, #16
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 f8e0 	bl	800c88c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6ce:	f000 faad 	bl	800bc2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b6d2:	f000 fe61 	bl	800c398 <xTaskResumeAll>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f47f af7c 	bne.w	800b5d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b6de:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <xQueueGenericSend+0x1f8>)
 800b6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	e772      	b.n	800b5d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6f2:	f000 fa9b 	bl	800bc2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6f6:	f000 fe4f 	bl	800c398 <xTaskResumeAll>
 800b6fa:	e76c      	b.n	800b5d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6fe:	f000 fa95 	bl	800bc2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b702:	f000 fe49 	bl	800c398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3738      	adds	r7, #56	; 0x38
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	e000ed04 	.word	0xe000ed04

0800b714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b090      	sub	sp, #64	; 0x40
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d103      	bne.n	800b750 <xQueueGenericSendFromISR+0x3c>
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <xQueueGenericSendFromISR+0x40>
 800b750:	2301      	movs	r3, #1
 800b752:	e000      	b.n	800b756 <xQueueGenericSendFromISR+0x42>
 800b754:	2300      	movs	r3, #0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10a      	bne.n	800b770 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2b02      	cmp	r3, #2
 800b774:	d103      	bne.n	800b77e <xQueueGenericSendFromISR+0x6a>
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d101      	bne.n	800b782 <xQueueGenericSendFromISR+0x6e>
 800b77e:	2301      	movs	r3, #1
 800b780:	e000      	b.n	800b784 <xQueueGenericSendFromISR+0x70>
 800b782:	2300      	movs	r3, #0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10a      	bne.n	800b79e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	623b      	str	r3, [r7, #32]
}
 800b79a:	bf00      	nop
 800b79c:	e7fe      	b.n	800b79c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b79e:	f002 fadb 	bl	800dd58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	61fa      	str	r2, [r7, #28]
 800b7b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b7ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d302      	bcc.n	800b7d0 <xQueueGenericSendFromISR+0xbc>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d12f      	bne.n	800b830 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	68b9      	ldr	r1, [r7, #8]
 800b7e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7e6:	f000 f991 	bl	800bb0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b7ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b7ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7f2:	d112      	bne.n	800b81a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d016      	beq.n	800b82a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	3324      	adds	r3, #36	; 0x24
 800b800:	4618      	mov	r0, r3
 800b802:	f001 f893 	bl	800c92c <xTaskRemoveFromEventList>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00e      	beq.n	800b82a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00b      	beq.n	800b82a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	e007      	b.n	800b82a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b81a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b81e:	3301      	adds	r3, #1
 800b820:	b2db      	uxtb	r3, r3
 800b822:	b25a      	sxtb	r2, r3
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b82a:	2301      	movs	r3, #1
 800b82c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b82e:	e001      	b.n	800b834 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b830:	2300      	movs	r3, #0
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b836:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b83e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b842:	4618      	mov	r0, r3
 800b844:	3740      	adds	r7, #64	; 0x40
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
	...

0800b84c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08c      	sub	sp, #48	; 0x30
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b858:	2300      	movs	r3, #0
 800b85a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10a      	bne.n	800b87c <xQueueReceive+0x30>
	__asm volatile
 800b866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86a:	f383 8811 	msr	BASEPRI, r3
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	623b      	str	r3, [r7, #32]
}
 800b878:	bf00      	nop
 800b87a:	e7fe      	b.n	800b87a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d103      	bne.n	800b88a <xQueueReceive+0x3e>
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <xQueueReceive+0x42>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e000      	b.n	800b890 <xQueueReceive+0x44>
 800b88e:	2300      	movs	r3, #0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10a      	bne.n	800b8aa <xQueueReceive+0x5e>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	61fb      	str	r3, [r7, #28]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8aa:	f001 fad5 	bl	800ce58 <xTaskGetSchedulerState>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d102      	bne.n	800b8ba <xQueueReceive+0x6e>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <xQueueReceive+0x72>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e000      	b.n	800b8c0 <xQueueReceive+0x74>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10a      	bne.n	800b8da <xQueueReceive+0x8e>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	61bb      	str	r3, [r7, #24]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8da:	f002 f95b 	bl	800db94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d01f      	beq.n	800b92a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8ee:	f000 f977 	bl	800bbe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	1e5a      	subs	r2, r3, #1
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00f      	beq.n	800b922 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	3310      	adds	r3, #16
 800b906:	4618      	mov	r0, r3
 800b908:	f001 f810 	bl	800c92c <xTaskRemoveFromEventList>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d007      	beq.n	800b922 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b912:	4b3d      	ldr	r3, [pc, #244]	; (800ba08 <xQueueReceive+0x1bc>)
 800b914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b922:	f002 f967 	bl	800dbf4 <vPortExitCritical>
				return pdPASS;
 800b926:	2301      	movs	r3, #1
 800b928:	e069      	b.n	800b9fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d103      	bne.n	800b938 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b930:	f002 f960 	bl	800dbf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b934:	2300      	movs	r3, #0
 800b936:	e062      	b.n	800b9fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d106      	bne.n	800b94c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b93e:	f107 0310 	add.w	r3, r7, #16
 800b942:	4618      	mov	r0, r3
 800b944:	f001 f856 	bl	800c9f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b948:	2301      	movs	r3, #1
 800b94a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b94c:	f002 f952 	bl	800dbf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b950:	f000 fd14 	bl	800c37c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b954:	f002 f91e 	bl	800db94 <vPortEnterCritical>
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b95e:	b25b      	sxtb	r3, r3
 800b960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b964:	d103      	bne.n	800b96e <xQueueReceive+0x122>
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b974:	b25b      	sxtb	r3, r3
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b97a:	d103      	bne.n	800b984 <xQueueReceive+0x138>
 800b97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b984:	f002 f936 	bl	800dbf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b988:	1d3a      	adds	r2, r7, #4
 800b98a:	f107 0310 	add.w	r3, r7, #16
 800b98e:	4611      	mov	r1, r2
 800b990:	4618      	mov	r0, r3
 800b992:	f001 f845 	bl	800ca20 <xTaskCheckForTimeOut>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d123      	bne.n	800b9e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b99e:	f000 f997 	bl	800bcd0 <prvIsQueueEmpty>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d017      	beq.n	800b9d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	3324      	adds	r3, #36	; 0x24
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 ff6b 	bl	800c88c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9b8:	f000 f938 	bl	800bc2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b9bc:	f000 fcec 	bl	800c398 <xTaskResumeAll>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d189      	bne.n	800b8da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b9c6:	4b10      	ldr	r3, [pc, #64]	; (800ba08 <xQueueReceive+0x1bc>)
 800b9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	e780      	b.n	800b8da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9da:	f000 f927 	bl	800bc2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9de:	f000 fcdb 	bl	800c398 <xTaskResumeAll>
 800b9e2:	e77a      	b.n	800b8da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b9e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e6:	f000 f921 	bl	800bc2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9ea:	f000 fcd5 	bl	800c398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f0:	f000 f96e 	bl	800bcd0 <prvIsQueueEmpty>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f43f af6f 	beq.w	800b8da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3730      	adds	r7, #48	; 0x30
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	e000ed04 	.word	0xe000ed04

0800ba0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08e      	sub	sp, #56	; 0x38
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10a      	bne.n	800ba38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	623b      	str	r3, [r7, #32]
}
 800ba34:	bf00      	nop
 800ba36:	e7fe      	b.n	800ba36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d103      	bne.n	800ba46 <xQueueReceiveFromISR+0x3a>
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <xQueueReceiveFromISR+0x3e>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e000      	b.n	800ba4c <xQueueReceiveFromISR+0x40>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	61fb      	str	r3, [r7, #28]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba66:	f002 f977 	bl	800dd58 <vPortValidateInterruptPriority>
	__asm volatile
 800ba6a:	f3ef 8211 	mrs	r2, BASEPRI
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	61ba      	str	r2, [r7, #24]
 800ba80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ba82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d02f      	beq.n	800baf2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba9c:	68b9      	ldr	r1, [r7, #8]
 800ba9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baa0:	f000 f89e 	bl	800bbe0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	1e5a      	subs	r2, r3, #1
 800baa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800baac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bab4:	d112      	bne.n	800badc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d016      	beq.n	800baec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	3310      	adds	r3, #16
 800bac2:	4618      	mov	r0, r3
 800bac4:	f000 ff32 	bl	800c92c <xTaskRemoveFromEventList>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00e      	beq.n	800baec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00b      	beq.n	800baec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	e007      	b.n	800baec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800badc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bae0:	3301      	adds	r3, #1
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	b25a      	sxtb	r2, r3
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800baec:	2301      	movs	r3, #1
 800baee:	637b      	str	r3, [r7, #52]	; 0x34
 800baf0:	e001      	b.n	800baf6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800baf2:	2300      	movs	r3, #0
 800baf4:	637b      	str	r3, [r7, #52]	; 0x34
 800baf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f383 8811 	msr	BASEPRI, r3
}
 800bb00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3738      	adds	r7, #56	; 0x38
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10d      	bne.n	800bb46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d14d      	bne.n	800bbce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f001 f9ac 	bl	800ce94 <xTaskPriorityDisinherit>
 800bb3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	609a      	str	r2, [r3, #8]
 800bb44:	e043      	b.n	800bbce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d119      	bne.n	800bb80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6858      	ldr	r0, [r3, #4]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb54:	461a      	mov	r2, r3
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	f003 f9aa 	bl	800eeb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb64:	441a      	add	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d32b      	bcc.n	800bbce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	605a      	str	r2, [r3, #4]
 800bb7e:	e026      	b.n	800bbce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68d8      	ldr	r0, [r3, #12]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb88:	461a      	mov	r2, r3
 800bb8a:	68b9      	ldr	r1, [r7, #8]
 800bb8c:	f003 f990 	bl	800eeb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb98:	425b      	negs	r3, r3
 800bb9a:	441a      	add	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d207      	bcs.n	800bbbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb4:	425b      	negs	r3, r3
 800bbb6:	441a      	add	r2, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d105      	bne.n	800bbce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bbd6:	697b      	ldr	r3, [r7, #20]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d018      	beq.n	800bc24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfa:	441a      	add	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68da      	ldr	r2, [r3, #12]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d303      	bcc.n	800bc14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68d9      	ldr	r1, [r3, #12]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	6838      	ldr	r0, [r7, #0]
 800bc20:	f003 f946 	bl	800eeb0 <memcpy>
	}
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc34:	f001 ffae 	bl	800db94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc40:	e011      	b.n	800bc66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d012      	beq.n	800bc70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	3324      	adds	r3, #36	; 0x24
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 fe6c 	bl	800c92c <xTaskRemoveFromEventList>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc5a:	f000 ff43 	bl	800cae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	dce9      	bgt.n	800bc42 <prvUnlockQueue+0x16>
 800bc6e:	e000      	b.n	800bc72 <prvUnlockQueue+0x46>
					break;
 800bc70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc7a:	f001 ffbb 	bl	800dbf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc7e:	f001 ff89 	bl	800db94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc8a:	e011      	b.n	800bcb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d012      	beq.n	800bcba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3310      	adds	r3, #16
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fe47 	bl	800c92c <xTaskRemoveFromEventList>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bca4:	f000 ff1e 	bl	800cae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	dce9      	bgt.n	800bc8c <prvUnlockQueue+0x60>
 800bcb8:	e000      	b.n	800bcbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bcba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	22ff      	movs	r2, #255	; 0xff
 800bcc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bcc4:	f001 ff96 	bl	800dbf4 <vPortExitCritical>
}
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcd8:	f001 ff5c 	bl	800db94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d102      	bne.n	800bcea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bce4:	2301      	movs	r3, #1
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e001      	b.n	800bcee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcee:	f001 ff81 	bl	800dbf4 <vPortExitCritical>

	return xReturn;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd04:	f001 ff46 	bl	800db94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d102      	bne.n	800bd1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd14:	2301      	movs	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
 800bd18:	e001      	b.n	800bd1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd1e:	f001 ff69 	bl	800dbf4 <vPortExitCritical>

	return xReturn;
 800bd22:	68fb      	ldr	r3, [r7, #12]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd36:	2300      	movs	r3, #0
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	e014      	b.n	800bd66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd3c:	4a0f      	ldr	r2, [pc, #60]	; (800bd7c <vQueueAddToRegistry+0x50>)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10b      	bne.n	800bd60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd48:	490c      	ldr	r1, [pc, #48]	; (800bd7c <vQueueAddToRegistry+0x50>)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd52:	4a0a      	ldr	r2, [pc, #40]	; (800bd7c <vQueueAddToRegistry+0x50>)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	4413      	add	r3, r2
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd5e:	e006      	b.n	800bd6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3301      	adds	r3, #1
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b07      	cmp	r3, #7
 800bd6a:	d9e7      	bls.n	800bd3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd6c:	bf00      	nop
 800bd6e:	bf00      	nop
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	2000c63c 	.word	0x2000c63c

0800bd80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd90:	f001 ff00 	bl	800db94 <vPortEnterCritical>
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd9a:	b25b      	sxtb	r3, r3
 800bd9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bda0:	d103      	bne.n	800bdaa <vQueueWaitForMessageRestricted+0x2a>
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdb0:	b25b      	sxtb	r3, r3
 800bdb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdb6:	d103      	bne.n	800bdc0 <vQueueWaitForMessageRestricted+0x40>
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdc0:	f001 ff18 	bl	800dbf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d106      	bne.n	800bdda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	3324      	adds	r3, #36	; 0x24
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	68b9      	ldr	r1, [r7, #8]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 fd7d 	bl	800c8d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bdda:	6978      	ldr	r0, [r7, #20]
 800bddc:	f7ff ff26 	bl	800bc2c <prvUnlockQueue>
	}
 800bde0:	bf00      	nop
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08e      	sub	sp, #56	; 0x38
 800bdec:	af04      	add	r7, sp, #16
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	623b      	str	r3, [r7, #32]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <xTaskCreateStatic+0x46>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	61fb      	str	r3, [r7, #28]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be2e:	23c0      	movs	r3, #192	; 0xc0
 800be30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	2bc0      	cmp	r3, #192	; 0xc0
 800be36:	d00a      	beq.n	800be4e <xTaskCreateStatic+0x66>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	61bb      	str	r3, [r7, #24]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	2b00      	cmp	r3, #0
 800be54:	d01e      	beq.n	800be94 <xTaskCreateStatic+0xac>
 800be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d01b      	beq.n	800be94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	2202      	movs	r2, #2
 800be6a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be6e:	2300      	movs	r3, #0
 800be70:	9303      	str	r3, [sp, #12]
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	9302      	str	r3, [sp, #8]
 800be76:	f107 0314 	add.w	r3, r7, #20
 800be7a:	9301      	str	r3, [sp, #4]
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f000 f850 	bl	800bf2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be8e:	f000 f8f7 	bl	800c080 <prvAddNewTaskToReadyList>
 800be92:	e001      	b.n	800be98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be94:	2300      	movs	r3, #0
 800be96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be98:	697b      	ldr	r3, [r7, #20]
	}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3728      	adds	r7, #40	; 0x28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b08c      	sub	sp, #48	; 0x30
 800bea6:	af04      	add	r7, sp, #16
 800bea8:	60f8      	str	r0, [r7, #12]
 800beaa:	60b9      	str	r1, [r7, #8]
 800beac:	603b      	str	r3, [r7, #0]
 800beae:	4613      	mov	r3, r2
 800beb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beb2:	88fb      	ldrh	r3, [r7, #6]
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	4618      	mov	r0, r3
 800beb8:	f001 ff8e 	bl	800ddd8 <pvPortMalloc>
 800bebc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00e      	beq.n	800bee2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bec4:	20c0      	movs	r0, #192	; 0xc0
 800bec6:	f001 ff87 	bl	800ddd8 <pvPortMalloc>
 800beca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	631a      	str	r2, [r3, #48]	; 0x30
 800bed8:	e005      	b.n	800bee6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800beda:	6978      	ldr	r0, [r7, #20]
 800bedc:	f002 f848 	bl	800df70 <vPortFree>
 800bee0:	e001      	b.n	800bee6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d017      	beq.n	800bf1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bef4:	88fa      	ldrh	r2, [r7, #6]
 800bef6:	2300      	movs	r3, #0
 800bef8:	9303      	str	r3, [sp, #12]
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	9302      	str	r3, [sp, #8]
 800befe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	68b9      	ldr	r1, [r7, #8]
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 f80e 	bl	800bf2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf10:	69f8      	ldr	r0, [r7, #28]
 800bf12:	f000 f8b5 	bl	800c080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf16:	2301      	movs	r3, #1
 800bf18:	61bb      	str	r3, [r7, #24]
 800bf1a:	e002      	b.n	800bf22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf22:	69bb      	ldr	r3, [r7, #24]
	}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	461a      	mov	r2, r3
 800bf44:	21a5      	movs	r1, #165	; 0xa5
 800bf46:	f002 ffc1 	bl	800eecc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf54:	3b01      	subs	r3, #1
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	f023 0307 	bic.w	r3, r3, #7
 800bf62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	f003 0307 	and.w	r3, r3, #7
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00a      	beq.n	800bf84 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	617b      	str	r3, [r7, #20]
}
 800bf80:	bf00      	nop
 800bf82:	e7fe      	b.n	800bf82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d01f      	beq.n	800bfca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	61fb      	str	r3, [r7, #28]
 800bf8e:	e012      	b.n	800bfb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	4413      	add	r3, r2
 800bf96:	7819      	ldrb	r1, [r3, #0]
 800bf98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	3334      	adds	r3, #52	; 0x34
 800bfa0:	460a      	mov	r2, r1
 800bfa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d006      	beq.n	800bfbe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	61fb      	str	r3, [r7, #28]
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	2b0f      	cmp	r3, #15
 800bfba:	d9e9      	bls.n	800bf90 <prvInitialiseNewTask+0x64>
 800bfbc:	e000      	b.n	800bfc0 <prvInitialiseNewTask+0x94>
			{
				break;
 800bfbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfc8:	e003      	b.n	800bfd2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	2b37      	cmp	r3, #55	; 0x37
 800bfd6:	d901      	bls.n	800bfdc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfd8:	2337      	movs	r3, #55	; 0x37
 800bfda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	2200      	movs	r2, #0
 800bfec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	3304      	adds	r3, #4
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff f8be 	bl	800b174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	3318      	adds	r3, #24
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7ff f8b9 	bl	800b174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	2200      	movs	r2, #0
 800c01c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	2200      	movs	r2, #0
 800c022:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	3358      	adds	r3, #88	; 0x58
 800c032:	2260      	movs	r2, #96	; 0x60
 800c034:	2100      	movs	r1, #0
 800c036:	4618      	mov	r0, r3
 800c038:	f002 ff48 	bl	800eecc <memset>
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	4a0d      	ldr	r2, [pc, #52]	; (800c074 <prvInitialiseNewTask+0x148>)
 800c040:	65da      	str	r2, [r3, #92]	; 0x5c
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	4a0c      	ldr	r2, [pc, #48]	; (800c078 <prvInitialiseNewTask+0x14c>)
 800c046:	661a      	str	r2, [r3, #96]	; 0x60
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	4a0c      	ldr	r2, [pc, #48]	; (800c07c <prvInitialiseNewTask+0x150>)
 800c04c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	68f9      	ldr	r1, [r7, #12]
 800c052:	69b8      	ldr	r0, [r7, #24]
 800c054:	f001 fc6e 	bl	800d934 <pxPortInitialiseStack>
 800c058:	4602      	mov	r2, r0
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d002      	beq.n	800c06a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c06a:	bf00      	nop
 800c06c:	3720      	adds	r7, #32
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	08011ed8 	.word	0x08011ed8
 800c078:	08011ef8 	.word	0x08011ef8
 800c07c:	08011eb8 	.word	0x08011eb8

0800c080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c088:	f001 fd84 	bl	800db94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c08c:	4b2d      	ldr	r3, [pc, #180]	; (800c144 <prvAddNewTaskToReadyList+0xc4>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3301      	adds	r3, #1
 800c092:	4a2c      	ldr	r2, [pc, #176]	; (800c144 <prvAddNewTaskToReadyList+0xc4>)
 800c094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c096:	4b2c      	ldr	r3, [pc, #176]	; (800c148 <prvAddNewTaskToReadyList+0xc8>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d109      	bne.n	800c0b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c09e:	4a2a      	ldr	r2, [pc, #168]	; (800c148 <prvAddNewTaskToReadyList+0xc8>)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0a4:	4b27      	ldr	r3, [pc, #156]	; (800c144 <prvAddNewTaskToReadyList+0xc4>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d110      	bne.n	800c0ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0ac:	f000 fd3e 	bl	800cb2c <prvInitialiseTaskLists>
 800c0b0:	e00d      	b.n	800c0ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0b2:	4b26      	ldr	r3, [pc, #152]	; (800c14c <prvAddNewTaskToReadyList+0xcc>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d109      	bne.n	800c0ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0ba:	4b23      	ldr	r3, [pc, #140]	; (800c148 <prvAddNewTaskToReadyList+0xc8>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d802      	bhi.n	800c0ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0c8:	4a1f      	ldr	r2, [pc, #124]	; (800c148 <prvAddNewTaskToReadyList+0xc8>)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0ce:	4b20      	ldr	r3, [pc, #128]	; (800c150 <prvAddNewTaskToReadyList+0xd0>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	4a1e      	ldr	r2, [pc, #120]	; (800c150 <prvAddNewTaskToReadyList+0xd0>)
 800c0d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0d8:	4b1d      	ldr	r3, [pc, #116]	; (800c150 <prvAddNewTaskToReadyList+0xd0>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e4:	4b1b      	ldr	r3, [pc, #108]	; (800c154 <prvAddNewTaskToReadyList+0xd4>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d903      	bls.n	800c0f4 <prvAddNewTaskToReadyList+0x74>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	4a18      	ldr	r2, [pc, #96]	; (800c154 <prvAddNewTaskToReadyList+0xd4>)
 800c0f2:	6013      	str	r3, [r2, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4a15      	ldr	r2, [pc, #84]	; (800c158 <prvAddNewTaskToReadyList+0xd8>)
 800c102:	441a      	add	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	3304      	adds	r3, #4
 800c108:	4619      	mov	r1, r3
 800c10a:	4610      	mov	r0, r2
 800c10c:	f7ff f83f 	bl	800b18e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c110:	f001 fd70 	bl	800dbf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c114:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <prvAddNewTaskToReadyList+0xcc>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00e      	beq.n	800c13a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c11c:	4b0a      	ldr	r3, [pc, #40]	; (800c148 <prvAddNewTaskToReadyList+0xc8>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c126:	429a      	cmp	r2, r3
 800c128:	d207      	bcs.n	800c13a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c12a:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <prvAddNewTaskToReadyList+0xdc>)
 800c12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200013c4 	.word	0x200013c4
 800c148:	20000ef0 	.word	0x20000ef0
 800c14c:	200013d0 	.word	0x200013d0
 800c150:	200013e0 	.word	0x200013e0
 800c154:	200013cc 	.word	0x200013cc
 800c158:	20000ef4 	.word	0x20000ef4
 800c15c:	e000ed04 	.word	0xe000ed04

0800c160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c168:	2300      	movs	r3, #0
 800c16a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d017      	beq.n	800c1a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c172:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <vTaskDelay+0x60>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00a      	beq.n	800c190 <vTaskDelay+0x30>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	60bb      	str	r3, [r7, #8]
}
 800c18c:	bf00      	nop
 800c18e:	e7fe      	b.n	800c18e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c190:	f000 f8f4 	bl	800c37c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c194:	2100      	movs	r1, #0
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f001 f82a 	bl	800d1f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c19c:	f000 f8fc 	bl	800c398 <xTaskResumeAll>
 800c1a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d107      	bne.n	800c1b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c1a8:	4b06      	ldr	r3, [pc, #24]	; (800c1c4 <vTaskDelay+0x64>)
 800c1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ae:	601a      	str	r2, [r3, #0]
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1b8:	bf00      	nop
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	200013ec 	.word	0x200013ec
 800c1c4:	e000ed04 	.word	0xe000ed04

0800c1c8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10a      	bne.n	800c1f0 <eTaskGetState+0x28>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	60bb      	str	r3, [r7, #8]
}
 800c1ec:	bf00      	nop
 800c1ee:	e7fe      	b.n	800c1ee <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800c1f0:	4b23      	ldr	r3, [pc, #140]	; (800c280 <eTaskGetState+0xb8>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	69ba      	ldr	r2, [r7, #24]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d102      	bne.n	800c200 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	77fb      	strb	r3, [r7, #31]
 800c1fe:	e03a      	b.n	800c276 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800c200:	f001 fcc8 	bl	800db94 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800c20a:	4b1e      	ldr	r3, [pc, #120]	; (800c284 <eTaskGetState+0xbc>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800c210:	4b1d      	ldr	r3, [pc, #116]	; (800c288 <eTaskGetState+0xc0>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800c216:	f001 fced 	bl	800dbf4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d003      	beq.n	800c22a <eTaskGetState+0x62>
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	429a      	cmp	r2, r3
 800c228:	d102      	bne.n	800c230 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800c22a:	2302      	movs	r3, #2
 800c22c:	77fb      	strb	r3, [r7, #31]
 800c22e:	e022      	b.n	800c276 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	4a16      	ldr	r2, [pc, #88]	; (800c28c <eTaskGetState+0xc4>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d112      	bne.n	800c25e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10b      	bne.n	800c258 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d102      	bne.n	800c252 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800c24c:	2302      	movs	r3, #2
 800c24e:	77fb      	strb	r3, [r7, #31]
 800c250:	e011      	b.n	800c276 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800c252:	2303      	movs	r3, #3
 800c254:	77fb      	strb	r3, [r7, #31]
 800c256:	e00e      	b.n	800c276 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800c258:	2302      	movs	r3, #2
 800c25a:	77fb      	strb	r3, [r7, #31]
 800c25c:	e00b      	b.n	800c276 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	4a0b      	ldr	r2, [pc, #44]	; (800c290 <eTaskGetState+0xc8>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d002      	beq.n	800c26c <eTaskGetState+0xa4>
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800c26c:	2304      	movs	r3, #4
 800c26e:	77fb      	strb	r3, [r7, #31]
 800c270:	e001      	b.n	800c276 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800c272:	2301      	movs	r3, #1
 800c274:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800c276:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c278:	4618      	mov	r0, r3
 800c27a:	3720      	adds	r7, #32
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	20000ef0 	.word	0x20000ef0
 800c284:	2000137c 	.word	0x2000137c
 800c288:	20001380 	.word	0x20001380
 800c28c:	200013b0 	.word	0x200013b0
 800c290:	20001398 	.word	0x20001398

0800c294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b08a      	sub	sp, #40	; 0x28
 800c298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c2a2:	463a      	mov	r2, r7
 800c2a4:	1d39      	adds	r1, r7, #4
 800c2a6:	f107 0308 	add.w	r3, r7, #8
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe ff0e 	bl	800b0cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	9202      	str	r2, [sp, #8]
 800c2b8:	9301      	str	r3, [sp, #4]
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	2300      	movs	r3, #0
 800c2c0:	460a      	mov	r2, r1
 800c2c2:	4925      	ldr	r1, [pc, #148]	; (800c358 <vTaskStartScheduler+0xc4>)
 800c2c4:	4825      	ldr	r0, [pc, #148]	; (800c35c <vTaskStartScheduler+0xc8>)
 800c2c6:	f7ff fd8f 	bl	800bde8 <xTaskCreateStatic>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	4a24      	ldr	r2, [pc, #144]	; (800c360 <vTaskStartScheduler+0xcc>)
 800c2ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2d0:	4b23      	ldr	r3, [pc, #140]	; (800c360 <vTaskStartScheduler+0xcc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d002      	beq.n	800c2de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	e001      	b.n	800c2e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d102      	bne.n	800c2ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c2e8:	f000 ffd6 	bl	800d298 <xTimerCreateTimerTask>
 800c2ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d11e      	bne.n	800c332 <vTaskStartScheduler+0x9e>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	613b      	str	r3, [r7, #16]
}
 800c306:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c308:	4b16      	ldr	r3, [pc, #88]	; (800c364 <vTaskStartScheduler+0xd0>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3358      	adds	r3, #88	; 0x58
 800c30e:	4a16      	ldr	r2, [pc, #88]	; (800c368 <vTaskStartScheduler+0xd4>)
 800c310:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c312:	4b16      	ldr	r3, [pc, #88]	; (800c36c <vTaskStartScheduler+0xd8>)
 800c314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c31a:	4b15      	ldr	r3, [pc, #84]	; (800c370 <vTaskStartScheduler+0xdc>)
 800c31c:	2201      	movs	r2, #1
 800c31e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c320:	4b14      	ldr	r3, [pc, #80]	; (800c374 <vTaskStartScheduler+0xe0>)
 800c322:	2200      	movs	r2, #0
 800c324:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c326:	4b14      	ldr	r3, [pc, #80]	; (800c378 <vTaskStartScheduler+0xe4>)
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c32c:	f001 fb90 	bl	800da50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c330:	e00e      	b.n	800c350 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c338:	d10a      	bne.n	800c350 <vTaskStartScheduler+0xbc>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	60fb      	str	r3, [r7, #12]
}
 800c34c:	bf00      	nop
 800c34e:	e7fe      	b.n	800c34e <vTaskStartScheduler+0xba>
}
 800c350:	bf00      	nop
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	08011d28 	.word	0x08011d28
 800c35c:	0800cafd 	.word	0x0800cafd
 800c360:	200013e8 	.word	0x200013e8
 800c364:	20000ef0 	.word	0x20000ef0
 800c368:	20000184 	.word	0x20000184
 800c36c:	200013e4 	.word	0x200013e4
 800c370:	200013d0 	.word	0x200013d0
 800c374:	200013c8 	.word	0x200013c8
 800c378:	2000b418 	.word	0x2000b418

0800c37c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c37c:	b480      	push	{r7}
 800c37e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c380:	4b04      	ldr	r3, [pc, #16]	; (800c394 <vTaskSuspendAll+0x18>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	3301      	adds	r3, #1
 800c386:	4a03      	ldr	r2, [pc, #12]	; (800c394 <vTaskSuspendAll+0x18>)
 800c388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c38a:	bf00      	nop
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	200013ec 	.word	0x200013ec

0800c398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c3a6:	4b42      	ldr	r3, [pc, #264]	; (800c4b0 <xTaskResumeAll+0x118>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10a      	bne.n	800c3c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	603b      	str	r3, [r7, #0]
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c3c4:	f001 fbe6 	bl	800db94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c3c8:	4b39      	ldr	r3, [pc, #228]	; (800c4b0 <xTaskResumeAll+0x118>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	4a38      	ldr	r2, [pc, #224]	; (800c4b0 <xTaskResumeAll+0x118>)
 800c3d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3d2:	4b37      	ldr	r3, [pc, #220]	; (800c4b0 <xTaskResumeAll+0x118>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d162      	bne.n	800c4a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3da:	4b36      	ldr	r3, [pc, #216]	; (800c4b4 <xTaskResumeAll+0x11c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d05e      	beq.n	800c4a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3e2:	e02f      	b.n	800c444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e4:	4b34      	ldr	r3, [pc, #208]	; (800c4b8 <xTaskResumeAll+0x120>)
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3318      	adds	r3, #24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe ff29 	bl	800b248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe ff24 	bl	800b248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c404:	4b2d      	ldr	r3, [pc, #180]	; (800c4bc <xTaskResumeAll+0x124>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d903      	bls.n	800c414 <xTaskResumeAll+0x7c>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c410:	4a2a      	ldr	r2, [pc, #168]	; (800c4bc <xTaskResumeAll+0x124>)
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c418:	4613      	mov	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4a27      	ldr	r2, [pc, #156]	; (800c4c0 <xTaskResumeAll+0x128>)
 800c422:	441a      	add	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3304      	adds	r3, #4
 800c428:	4619      	mov	r1, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	f7fe feaf 	bl	800b18e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c434:	4b23      	ldr	r3, [pc, #140]	; (800c4c4 <xTaskResumeAll+0x12c>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d302      	bcc.n	800c444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c43e:	4b22      	ldr	r3, [pc, #136]	; (800c4c8 <xTaskResumeAll+0x130>)
 800c440:	2201      	movs	r2, #1
 800c442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c444:	4b1c      	ldr	r3, [pc, #112]	; (800c4b8 <xTaskResumeAll+0x120>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1cb      	bne.n	800c3e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c452:	f000 fce1 	bl	800ce18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c456:	4b1d      	ldr	r3, [pc, #116]	; (800c4cc <xTaskResumeAll+0x134>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d010      	beq.n	800c484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c462:	f000 f8d7 	bl	800c614 <xTaskIncrementTick>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c46c:	4b16      	ldr	r3, [pc, #88]	; (800c4c8 <xTaskResumeAll+0x130>)
 800c46e:	2201      	movs	r2, #1
 800c470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	3b01      	subs	r3, #1
 800c476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1f1      	bne.n	800c462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c47e:	4b13      	ldr	r3, [pc, #76]	; (800c4cc <xTaskResumeAll+0x134>)
 800c480:	2200      	movs	r2, #0
 800c482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c484:	4b10      	ldr	r3, [pc, #64]	; (800c4c8 <xTaskResumeAll+0x130>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d009      	beq.n	800c4a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c48c:	2301      	movs	r3, #1
 800c48e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c490:	4b0f      	ldr	r3, [pc, #60]	; (800c4d0 <xTaskResumeAll+0x138>)
 800c492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4a0:	f001 fba8 	bl	800dbf4 <vPortExitCritical>

	return xAlreadyYielded;
 800c4a4:	68bb      	ldr	r3, [r7, #8]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	200013ec 	.word	0x200013ec
 800c4b4:	200013c4 	.word	0x200013c4
 800c4b8:	20001384 	.word	0x20001384
 800c4bc:	200013cc 	.word	0x200013cc
 800c4c0:	20000ef4 	.word	0x20000ef4
 800c4c4:	20000ef0 	.word	0x20000ef0
 800c4c8:	200013d8 	.word	0x200013d8
 800c4cc:	200013d4 	.word	0x200013d4
 800c4d0:	e000ed04 	.word	0xe000ed04

0800c4d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4da:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <xTaskGetTickCount+0x1c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4e0:	687b      	ldr	r3, [r7, #4]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	200013c8 	.word	0x200013c8

0800c4f4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800c500:	2300      	movs	r3, #0
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	2338      	movs	r3, #56	; 0x38
 800c506:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800c508:	f7ff ff38 	bl	800c37c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800c50c:	4b3a      	ldr	r3, [pc, #232]	; (800c5f8 <uxTaskGetSystemState+0x104>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	429a      	cmp	r2, r3
 800c514:	d369      	bcc.n	800c5ea <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	3b01      	subs	r3, #1
 800c51a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800c51c:	697a      	ldr	r2, [r7, #20]
 800c51e:	4613      	mov	r3, r2
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	4413      	add	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	461a      	mov	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	1898      	adds	r0, r3, r2
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	4613      	mov	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4a31      	ldr	r2, [pc, #196]	; (800c5fc <uxTaskGetSystemState+0x108>)
 800c538:	4413      	add	r3, r2
 800c53a:	2201      	movs	r2, #1
 800c53c:	4619      	mov	r1, r3
 800c53e:	f000 fbc9 	bl	800ccd4 <prvListTasksWithinSingleList>
 800c542:	4602      	mov	r2, r0
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	4413      	add	r3, r2
 800c548:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e2      	bne.n	800c516 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	4613      	mov	r3, r2
 800c554:	00db      	lsls	r3, r3, #3
 800c556:	4413      	add	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	461a      	mov	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	4a27      	ldr	r2, [pc, #156]	; (800c600 <uxTaskGetSystemState+0x10c>)
 800c562:	6811      	ldr	r1, [r2, #0]
 800c564:	2202      	movs	r2, #2
 800c566:	4618      	mov	r0, r3
 800c568:	f000 fbb4 	bl	800ccd4 <prvListTasksWithinSingleList>
 800c56c:	4602      	mov	r2, r0
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	4413      	add	r3, r2
 800c572:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	4613      	mov	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	4413      	add	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	461a      	mov	r2, r3
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	4a1f      	ldr	r2, [pc, #124]	; (800c604 <uxTaskGetSystemState+0x110>)
 800c586:	6811      	ldr	r1, [r2, #0]
 800c588:	2202      	movs	r2, #2
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fba2 	bl	800ccd4 <prvListTasksWithinSingleList>
 800c590:	4602      	mov	r2, r0
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	4413      	add	r3, r2
 800c596:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	4613      	mov	r3, r2
 800c59c:	00db      	lsls	r3, r3, #3
 800c59e:	4413      	add	r3, r2
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	2204      	movs	r2, #4
 800c5aa:	4917      	ldr	r1, [pc, #92]	; (800c608 <uxTaskGetSystemState+0x114>)
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 fb91 	bl	800ccd4 <prvListTasksWithinSingleList>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	4413      	add	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	2203      	movs	r2, #3
 800c5cc:	490f      	ldr	r1, [pc, #60]	; (800c60c <uxTaskGetSystemState+0x118>)
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fb80 	bl	800ccd4 <prvListTasksWithinSingleList>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	4413      	add	r3, r2
 800c5da:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d003      	beq.n	800c5ea <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c5e2:	4b0b      	ldr	r3, [pc, #44]	; (800c610 <uxTaskGetSystemState+0x11c>)
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800c5ea:	f7ff fed5 	bl	800c398 <xTaskResumeAll>

		return uxTask;
 800c5ee:	697b      	ldr	r3, [r7, #20]
	}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	200013c4 	.word	0x200013c4
 800c5fc:	20000ef4 	.word	0x20000ef4
 800c600:	2000137c 	.word	0x2000137c
 800c604:	20001380 	.word	0x20001380
 800c608:	20001398 	.word	0x20001398
 800c60c:	200013b0 	.word	0x200013b0
 800c610:	2000b418 	.word	0x2000b418

0800c614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c61a:	2300      	movs	r3, #0
 800c61c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c61e:	4b4f      	ldr	r3, [pc, #316]	; (800c75c <xTaskIncrementTick+0x148>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	f040 808f 	bne.w	800c746 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c628:	4b4d      	ldr	r3, [pc, #308]	; (800c760 <xTaskIncrementTick+0x14c>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3301      	adds	r3, #1
 800c62e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c630:	4a4b      	ldr	r2, [pc, #300]	; (800c760 <xTaskIncrementTick+0x14c>)
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d120      	bne.n	800c67e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c63c:	4b49      	ldr	r3, [pc, #292]	; (800c764 <xTaskIncrementTick+0x150>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00a      	beq.n	800c65c <xTaskIncrementTick+0x48>
	__asm volatile
 800c646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	603b      	str	r3, [r7, #0]
}
 800c658:	bf00      	nop
 800c65a:	e7fe      	b.n	800c65a <xTaskIncrementTick+0x46>
 800c65c:	4b41      	ldr	r3, [pc, #260]	; (800c764 <xTaskIncrementTick+0x150>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	60fb      	str	r3, [r7, #12]
 800c662:	4b41      	ldr	r3, [pc, #260]	; (800c768 <xTaskIncrementTick+0x154>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a3f      	ldr	r2, [pc, #252]	; (800c764 <xTaskIncrementTick+0x150>)
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	4a3f      	ldr	r2, [pc, #252]	; (800c768 <xTaskIncrementTick+0x154>)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	4b3e      	ldr	r3, [pc, #248]	; (800c76c <xTaskIncrementTick+0x158>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3301      	adds	r3, #1
 800c676:	4a3d      	ldr	r2, [pc, #244]	; (800c76c <xTaskIncrementTick+0x158>)
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	f000 fbcd 	bl	800ce18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c67e:	4b3c      	ldr	r3, [pc, #240]	; (800c770 <xTaskIncrementTick+0x15c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	693a      	ldr	r2, [r7, #16]
 800c684:	429a      	cmp	r2, r3
 800c686:	d349      	bcc.n	800c71c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c688:	4b36      	ldr	r3, [pc, #216]	; (800c764 <xTaskIncrementTick+0x150>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d104      	bne.n	800c69c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c692:	4b37      	ldr	r3, [pc, #220]	; (800c770 <xTaskIncrementTick+0x15c>)
 800c694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c698:	601a      	str	r2, [r3, #0]
					break;
 800c69a:	e03f      	b.n	800c71c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c69c:	4b31      	ldr	r3, [pc, #196]	; (800c764 <xTaskIncrementTick+0x150>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d203      	bcs.n	800c6bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6b4:	4a2e      	ldr	r2, [pc, #184]	; (800c770 <xTaskIncrementTick+0x15c>)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6ba:	e02f      	b.n	800c71c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe fdc1 	bl	800b248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d004      	beq.n	800c6d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	3318      	adds	r3, #24
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fe fdb8 	bl	800b248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6dc:	4b25      	ldr	r3, [pc, #148]	; (800c774 <xTaskIncrementTick+0x160>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d903      	bls.n	800c6ec <xTaskIncrementTick+0xd8>
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e8:	4a22      	ldr	r2, [pc, #136]	; (800c774 <xTaskIncrementTick+0x160>)
 800c6ea:	6013      	str	r3, [r2, #0]
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	4413      	add	r3, r2
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	4a1f      	ldr	r2, [pc, #124]	; (800c778 <xTaskIncrementTick+0x164>)
 800c6fa:	441a      	add	r2, r3
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	3304      	adds	r3, #4
 800c700:	4619      	mov	r1, r3
 800c702:	4610      	mov	r0, r2
 800c704:	f7fe fd43 	bl	800b18e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c70c:	4b1b      	ldr	r3, [pc, #108]	; (800c77c <xTaskIncrementTick+0x168>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c712:	429a      	cmp	r2, r3
 800c714:	d3b8      	bcc.n	800c688 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c716:	2301      	movs	r3, #1
 800c718:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c71a:	e7b5      	b.n	800c688 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c71c:	4b17      	ldr	r3, [pc, #92]	; (800c77c <xTaskIncrementTick+0x168>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c722:	4915      	ldr	r1, [pc, #84]	; (800c778 <xTaskIncrementTick+0x164>)
 800c724:	4613      	mov	r3, r2
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	4413      	add	r3, r2
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	440b      	add	r3, r1
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d901      	bls.n	800c738 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c734:	2301      	movs	r3, #1
 800c736:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c738:	4b11      	ldr	r3, [pc, #68]	; (800c780 <xTaskIncrementTick+0x16c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d007      	beq.n	800c750 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c740:	2301      	movs	r3, #1
 800c742:	617b      	str	r3, [r7, #20]
 800c744:	e004      	b.n	800c750 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c746:	4b0f      	ldr	r3, [pc, #60]	; (800c784 <xTaskIncrementTick+0x170>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3301      	adds	r3, #1
 800c74c:	4a0d      	ldr	r2, [pc, #52]	; (800c784 <xTaskIncrementTick+0x170>)
 800c74e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c750:	697b      	ldr	r3, [r7, #20]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	200013ec 	.word	0x200013ec
 800c760:	200013c8 	.word	0x200013c8
 800c764:	2000137c 	.word	0x2000137c
 800c768:	20001380 	.word	0x20001380
 800c76c:	200013dc 	.word	0x200013dc
 800c770:	200013e4 	.word	0x200013e4
 800c774:	200013cc 	.word	0x200013cc
 800c778:	20000ef4 	.word	0x20000ef4
 800c77c:	20000ef0 	.word	0x20000ef0
 800c780:	200013d8 	.word	0x200013d8
 800c784:	200013d4 	.word	0x200013d4

0800c788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c78e:	4b36      	ldr	r3, [pc, #216]	; (800c868 <vTaskSwitchContext+0xe0>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d003      	beq.n	800c79e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c796:	4b35      	ldr	r3, [pc, #212]	; (800c86c <vTaskSwitchContext+0xe4>)
 800c798:	2201      	movs	r2, #1
 800c79a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c79c:	e05e      	b.n	800c85c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800c79e:	4b33      	ldr	r3, [pc, #204]	; (800c86c <vTaskSwitchContext+0xe4>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c7a4:	4b32      	ldr	r3, [pc, #200]	; (800c870 <vTaskSwitchContext+0xe8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a32      	ldr	r2, [pc, #200]	; (800c874 <vTaskSwitchContext+0xec>)
 800c7aa:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c7ac:	4b31      	ldr	r3, [pc, #196]	; (800c874 <vTaskSwitchContext+0xec>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b31      	ldr	r3, [pc, #196]	; (800c878 <vTaskSwitchContext+0xf0>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d909      	bls.n	800c7cc <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c7b8:	4b30      	ldr	r3, [pc, #192]	; (800c87c <vTaskSwitchContext+0xf4>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c7be:	4a2d      	ldr	r2, [pc, #180]	; (800c874 <vTaskSwitchContext+0xec>)
 800c7c0:	6810      	ldr	r0, [r2, #0]
 800c7c2:	4a2d      	ldr	r2, [pc, #180]	; (800c878 <vTaskSwitchContext+0xf0>)
 800c7c4:	6812      	ldr	r2, [r2, #0]
 800c7c6:	1a82      	subs	r2, r0, r2
 800c7c8:	440a      	add	r2, r1
 800c7ca:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c7cc:	4b29      	ldr	r3, [pc, #164]	; (800c874 <vTaskSwitchContext+0xec>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a29      	ldr	r2, [pc, #164]	; (800c878 <vTaskSwitchContext+0xf0>)
 800c7d2:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7d4:	4b2a      	ldr	r3, [pc, #168]	; (800c880 <vTaskSwitchContext+0xf8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	e010      	b.n	800c7fe <vTaskSwitchContext+0x76>
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <vTaskSwitchContext+0x70>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	607b      	str	r3, [r7, #4]
}
 800c7f4:	bf00      	nop
 800c7f6:	e7fe      	b.n	800c7f6 <vTaskSwitchContext+0x6e>
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	4921      	ldr	r1, [pc, #132]	; (800c884 <vTaskSwitchContext+0xfc>)
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	4613      	mov	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	440b      	add	r3, r1
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d0e4      	beq.n	800c7dc <vTaskSwitchContext+0x54>
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	4613      	mov	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4413      	add	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4a19      	ldr	r2, [pc, #100]	; (800c884 <vTaskSwitchContext+0xfc>)
 800c81e:	4413      	add	r3, r2
 800c820:	60bb      	str	r3, [r7, #8]
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	685a      	ldr	r2, [r3, #4]
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	605a      	str	r2, [r3, #4]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	3308      	adds	r3, #8
 800c834:	429a      	cmp	r2, r3
 800c836:	d104      	bne.n	800c842 <vTaskSwitchContext+0xba>
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	685a      	ldr	r2, [r3, #4]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	605a      	str	r2, [r3, #4]
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	4a0c      	ldr	r2, [pc, #48]	; (800c87c <vTaskSwitchContext+0xf4>)
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	4a0c      	ldr	r2, [pc, #48]	; (800c880 <vTaskSwitchContext+0xf8>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c852:	4b0a      	ldr	r3, [pc, #40]	; (800c87c <vTaskSwitchContext+0xf4>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	3358      	adds	r3, #88	; 0x58
 800c858:	4a0b      	ldr	r2, [pc, #44]	; (800c888 <vTaskSwitchContext+0x100>)
 800c85a:	6013      	str	r3, [r2, #0]
}
 800c85c:	bf00      	nop
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	200013ec 	.word	0x200013ec
 800c86c:	200013d8 	.word	0x200013d8
 800c870:	2000b418 	.word	0x2000b418
 800c874:	200013f4 	.word	0x200013f4
 800c878:	200013f0 	.word	0x200013f0
 800c87c:	20000ef0 	.word	0x20000ef0
 800c880:	200013cc 	.word	0x200013cc
 800c884:	20000ef4 	.word	0x20000ef4
 800c888:	20000184 	.word	0x20000184

0800c88c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10a      	bne.n	800c8b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	60fb      	str	r3, [r7, #12]
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8b2:	4b07      	ldr	r3, [pc, #28]	; (800c8d0 <vTaskPlaceOnEventList+0x44>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3318      	adds	r3, #24
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7fe fc8b 	bl	800b1d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	6838      	ldr	r0, [r7, #0]
 800c8c4:	f000 fc94 	bl	800d1f0 <prvAddCurrentTaskToDelayedList>
}
 800c8c8:	bf00      	nop
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	20000ef0 	.word	0x20000ef0

0800c8d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10a      	bne.n	800c8fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	617b      	str	r3, [r7, #20]
}
 800c8f8:	bf00      	nop
 800c8fa:	e7fe      	b.n	800c8fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8fc:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <vTaskPlaceOnEventListRestricted+0x54>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	3318      	adds	r3, #24
 800c902:	4619      	mov	r1, r3
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f7fe fc42 	bl	800b18e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c914:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c916:	6879      	ldr	r1, [r7, #4]
 800c918:	68b8      	ldr	r0, [r7, #8]
 800c91a:	f000 fc69 	bl	800d1f0 <prvAddCurrentTaskToDelayedList>
	}
 800c91e:	bf00      	nop
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	20000ef0 	.word	0x20000ef0

0800c92c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10a      	bne.n	800c958 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	60fb      	str	r3, [r7, #12]
}
 800c954:	bf00      	nop
 800c956:	e7fe      	b.n	800c956 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	3318      	adds	r3, #24
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fe fc73 	bl	800b248 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c962:	4b1e      	ldr	r3, [pc, #120]	; (800c9dc <xTaskRemoveFromEventList+0xb0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d11d      	bne.n	800c9a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	3304      	adds	r3, #4
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fc6a 	bl	800b248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c978:	4b19      	ldr	r3, [pc, #100]	; (800c9e0 <xTaskRemoveFromEventList+0xb4>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d903      	bls.n	800c988 <xTaskRemoveFromEventList+0x5c>
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c984:	4a16      	ldr	r2, [pc, #88]	; (800c9e0 <xTaskRemoveFromEventList+0xb4>)
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c98c:	4613      	mov	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4a13      	ldr	r2, [pc, #76]	; (800c9e4 <xTaskRemoveFromEventList+0xb8>)
 800c996:	441a      	add	r2, r3
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4619      	mov	r1, r3
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f7fe fbf5 	bl	800b18e <vListInsertEnd>
 800c9a4:	e005      	b.n	800c9b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	3318      	adds	r3, #24
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	480e      	ldr	r0, [pc, #56]	; (800c9e8 <xTaskRemoveFromEventList+0xbc>)
 800c9ae:	f7fe fbee 	bl	800b18e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b6:	4b0d      	ldr	r3, [pc, #52]	; (800c9ec <xTaskRemoveFromEventList+0xc0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d905      	bls.n	800c9cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9c4:	4b0a      	ldr	r3, [pc, #40]	; (800c9f0 <xTaskRemoveFromEventList+0xc4>)
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	e001      	b.n	800c9d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9d0:	697b      	ldr	r3, [r7, #20]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3718      	adds	r7, #24
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	200013ec 	.word	0x200013ec
 800c9e0:	200013cc 	.word	0x200013cc
 800c9e4:	20000ef4 	.word	0x20000ef4
 800c9e8:	20001384 	.word	0x20001384
 800c9ec:	20000ef0 	.word	0x20000ef0
 800c9f0:	200013d8 	.word	0x200013d8

0800c9f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9fc:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <vTaskInternalSetTimeOutState+0x24>)
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca04:	4b05      	ldr	r3, [pc, #20]	; (800ca1c <vTaskInternalSetTimeOutState+0x28>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	605a      	str	r2, [r3, #4]
}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	200013dc 	.word	0x200013dc
 800ca1c:	200013c8 	.word	0x200013c8

0800ca20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b088      	sub	sp, #32
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10a      	bne.n	800ca46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	613b      	str	r3, [r7, #16]
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	60fb      	str	r3, [r7, #12]
}
 800ca5e:	bf00      	nop
 800ca60:	e7fe      	b.n	800ca60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca62:	f001 f897 	bl	800db94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca66:	4b1d      	ldr	r3, [pc, #116]	; (800cadc <xTaskCheckForTimeOut+0xbc>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca7e:	d102      	bne.n	800ca86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	e023      	b.n	800cace <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	4b15      	ldr	r3, [pc, #84]	; (800cae0 <xTaskCheckForTimeOut+0xc0>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d007      	beq.n	800caa2 <xTaskCheckForTimeOut+0x82>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d302      	bcc.n	800caa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	61fb      	str	r3, [r7, #28]
 800caa0:	e015      	b.n	800cace <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d20b      	bcs.n	800cac4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	1ad2      	subs	r2, r2, r3
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff ff9b 	bl	800c9f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cabe:	2300      	movs	r3, #0
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	e004      	b.n	800cace <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2200      	movs	r2, #0
 800cac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800caca:	2301      	movs	r3, #1
 800cacc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cace:	f001 f891 	bl	800dbf4 <vPortExitCritical>

	return xReturn;
 800cad2:	69fb      	ldr	r3, [r7, #28]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3720      	adds	r7, #32
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	200013c8 	.word	0x200013c8
 800cae0:	200013dc 	.word	0x200013dc

0800cae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cae8:	4b03      	ldr	r3, [pc, #12]	; (800caf8 <vTaskMissedYield+0x14>)
 800caea:	2201      	movs	r2, #1
 800caec:	601a      	str	r2, [r3, #0]
}
 800caee:	bf00      	nop
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	200013d8 	.word	0x200013d8

0800cafc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb04:	f000 f852 	bl	800cbac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb08:	4b06      	ldr	r3, [pc, #24]	; (800cb24 <prvIdleTask+0x28>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d9f9      	bls.n	800cb04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <prvIdleTask+0x2c>)
 800cb12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb16:	601a      	str	r2, [r3, #0]
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb20:	e7f0      	b.n	800cb04 <prvIdleTask+0x8>
 800cb22:	bf00      	nop
 800cb24:	20000ef4 	.word	0x20000ef4
 800cb28:	e000ed04 	.word	0xe000ed04

0800cb2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb32:	2300      	movs	r3, #0
 800cb34:	607b      	str	r3, [r7, #4]
 800cb36:	e00c      	b.n	800cb52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4a12      	ldr	r2, [pc, #72]	; (800cb8c <prvInitialiseTaskLists+0x60>)
 800cb44:	4413      	add	r3, r2
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fe faf4 	bl	800b134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	607b      	str	r3, [r7, #4]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b37      	cmp	r3, #55	; 0x37
 800cb56:	d9ef      	bls.n	800cb38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb58:	480d      	ldr	r0, [pc, #52]	; (800cb90 <prvInitialiseTaskLists+0x64>)
 800cb5a:	f7fe faeb 	bl	800b134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb5e:	480d      	ldr	r0, [pc, #52]	; (800cb94 <prvInitialiseTaskLists+0x68>)
 800cb60:	f7fe fae8 	bl	800b134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb64:	480c      	ldr	r0, [pc, #48]	; (800cb98 <prvInitialiseTaskLists+0x6c>)
 800cb66:	f7fe fae5 	bl	800b134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb6a:	480c      	ldr	r0, [pc, #48]	; (800cb9c <prvInitialiseTaskLists+0x70>)
 800cb6c:	f7fe fae2 	bl	800b134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb70:	480b      	ldr	r0, [pc, #44]	; (800cba0 <prvInitialiseTaskLists+0x74>)
 800cb72:	f7fe fadf 	bl	800b134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb76:	4b0b      	ldr	r3, [pc, #44]	; (800cba4 <prvInitialiseTaskLists+0x78>)
 800cb78:	4a05      	ldr	r2, [pc, #20]	; (800cb90 <prvInitialiseTaskLists+0x64>)
 800cb7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb7c:	4b0a      	ldr	r3, [pc, #40]	; (800cba8 <prvInitialiseTaskLists+0x7c>)
 800cb7e:	4a05      	ldr	r2, [pc, #20]	; (800cb94 <prvInitialiseTaskLists+0x68>)
 800cb80:	601a      	str	r2, [r3, #0]
}
 800cb82:	bf00      	nop
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20000ef4 	.word	0x20000ef4
 800cb90:	20001354 	.word	0x20001354
 800cb94:	20001368 	.word	0x20001368
 800cb98:	20001384 	.word	0x20001384
 800cb9c:	20001398 	.word	0x20001398
 800cba0:	200013b0 	.word	0x200013b0
 800cba4:	2000137c 	.word	0x2000137c
 800cba8:	20001380 	.word	0x20001380

0800cbac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbb2:	e019      	b.n	800cbe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbb4:	f000 ffee 	bl	800db94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb8:	4b10      	ldr	r3, [pc, #64]	; (800cbfc <prvCheckTasksWaitingTermination+0x50>)
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fb3f 	bl	800b248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbca:	4b0d      	ldr	r3, [pc, #52]	; (800cc00 <prvCheckTasksWaitingTermination+0x54>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	4a0b      	ldr	r2, [pc, #44]	; (800cc00 <prvCheckTasksWaitingTermination+0x54>)
 800cbd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbd4:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <prvCheckTasksWaitingTermination+0x58>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	4a0a      	ldr	r2, [pc, #40]	; (800cc04 <prvCheckTasksWaitingTermination+0x58>)
 800cbdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbde:	f001 f809 	bl	800dbf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f8e4 	bl	800cdb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbe8:	4b06      	ldr	r3, [pc, #24]	; (800cc04 <prvCheckTasksWaitingTermination+0x58>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e1      	bne.n	800cbb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20001398 	.word	0x20001398
 800cc00:	200013c4 	.word	0x200013c4
 800cc04:	200013ac 	.word	0x200013ac

0800cc08 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
 800cc14:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <vTaskGetInfo+0x1a>
 800cc1c:	4b2c      	ldr	r3, [pc, #176]	; (800ccd0 <vTaskGetInfo+0xc8>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	e000      	b.n	800cc24 <vTaskGetInfo+0x1c>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800cc5e:	78fb      	ldrb	r3, [r7, #3]
 800cc60:	2b05      	cmp	r3, #5
 800cc62:	d01a      	beq.n	800cc9a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800cc64:	4b1a      	ldr	r3, [pc, #104]	; (800ccd0 <vTaskGetInfo+0xc8>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d103      	bne.n	800cc76 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2200      	movs	r2, #0
 800cc72:	731a      	strb	r2, [r3, #12]
 800cc74:	e018      	b.n	800cca8 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	78fa      	ldrb	r2, [r7, #3]
 800cc7a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	d112      	bne.n	800cca8 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800cc82:	f7ff fb7b 	bl	800c37c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d002      	beq.n	800cc94 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	2202      	movs	r2, #2
 800cc92:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800cc94:	f7ff fb80 	bl	800c398 <xTaskResumeAll>
 800cc98:	e006      	b.n	800cca8 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800cc9a:	6978      	ldr	r0, [r7, #20]
 800cc9c:	f7ff fa94 	bl	800c1c8 <eTaskGetState>
 800cca0:	4603      	mov	r3, r0
 800cca2:	461a      	mov	r2, r3
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d009      	beq.n	800ccc2 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 f860 	bl	800cd78 <prvTaskCheckFreeStackSpace>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	461a      	mov	r2, r3
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800ccc0:	e002      	b.n	800ccc8 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	841a      	strh	r2, [r3, #32]
	}
 800ccc8:	bf00      	nop
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	20000ef0 	.word	0x20000ef0

0800ccd4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08a      	sub	sp, #40	; 0x28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	4613      	mov	r3, r2
 800cce0:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d03f      	beq.n	800cd6e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	623b      	str	r3, [r7, #32]
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	685a      	ldr	r2, [r3, #4]
 800ccf8:	6a3b      	ldr	r3, [r7, #32]
 800ccfa:	605a      	str	r2, [r3, #4]
 800ccfc:	6a3b      	ldr	r3, [r7, #32]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	3308      	adds	r3, #8
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d104      	bne.n	800cd12 <prvListTasksWithinSingleList+0x3e>
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	6a3b      	ldr	r3, [r7, #32]
 800cd10:	605a      	str	r2, [r3, #4]
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	61bb      	str	r3, [r7, #24]
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	685a      	ldr	r2, [r3, #4]
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	605a      	str	r2, [r3, #4]
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d104      	bne.n	800cd3e <prvListTasksWithinSingleList+0x6a>
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	605a      	str	r2, [r3, #4]
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800cd46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd48:	4613      	mov	r3, r2
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	4413      	add	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	461a      	mov	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	1899      	adds	r1, r3, r2
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	6978      	ldr	r0, [r7, #20]
 800cd5c:	f7ff ff54 	bl	800cc08 <vTaskGetInfo>
				uxTask++;
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd62:	3301      	adds	r3, #1
 800cd64:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d1d5      	bne.n	800cd1a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3728      	adds	r7, #40	; 0x28
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800cd80:	2300      	movs	r3, #0
 800cd82:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cd84:	e005      	b.n	800cd92 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	2ba5      	cmp	r3, #165	; 0xa5
 800cd98:	d0f5      	beq.n	800cd86 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	089b      	lsrs	r3, r3, #2
 800cd9e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	b29b      	uxth	r3, r3
	}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	3358      	adds	r3, #88	; 0x58
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f002 fdaf 	bl	800f920 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d108      	bne.n	800cdde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f001 f8cd 	bl	800df70 <vPortFree>
				vPortFree( pxTCB );
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f001 f8ca 	bl	800df70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cddc:	e018      	b.n	800ce10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d103      	bne.n	800cdf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f001 f8c1 	bl	800df70 <vPortFree>
	}
 800cdee:	e00f      	b.n	800ce10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d00a      	beq.n	800ce10 <prvDeleteTCB+0x60>
	__asm volatile
 800cdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfe:	f383 8811 	msr	BASEPRI, r3
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	f3bf 8f4f 	dsb	sy
 800ce0a:	60fb      	str	r3, [r7, #12]
}
 800ce0c:	bf00      	nop
 800ce0e:	e7fe      	b.n	800ce0e <prvDeleteTCB+0x5e>
	}
 800ce10:	bf00      	nop
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce1e:	4b0c      	ldr	r3, [pc, #48]	; (800ce50 <prvResetNextTaskUnblockTime+0x38>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d104      	bne.n	800ce32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce28:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <prvResetNextTaskUnblockTime+0x3c>)
 800ce2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce30:	e008      	b.n	800ce44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce32:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <prvResetNextTaskUnblockTime+0x38>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	4a04      	ldr	r2, [pc, #16]	; (800ce54 <prvResetNextTaskUnblockTime+0x3c>)
 800ce42:	6013      	str	r3, [r2, #0]
}
 800ce44:	bf00      	nop
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	2000137c 	.word	0x2000137c
 800ce54:	200013e4 	.word	0x200013e4

0800ce58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce5e:	4b0b      	ldr	r3, [pc, #44]	; (800ce8c <xTaskGetSchedulerState+0x34>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d102      	bne.n	800ce6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce66:	2301      	movs	r3, #1
 800ce68:	607b      	str	r3, [r7, #4]
 800ce6a:	e008      	b.n	800ce7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce6c:	4b08      	ldr	r3, [pc, #32]	; (800ce90 <xTaskGetSchedulerState+0x38>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d102      	bne.n	800ce7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce74:	2302      	movs	r3, #2
 800ce76:	607b      	str	r3, [r7, #4]
 800ce78:	e001      	b.n	800ce7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce7e:	687b      	ldr	r3, [r7, #4]
	}
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	200013d0 	.word	0x200013d0
 800ce90:	200013ec 	.word	0x200013ec

0800ce94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cea0:	2300      	movs	r3, #0
 800cea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d056      	beq.n	800cf58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ceaa:	4b2e      	ldr	r3, [pc, #184]	; (800cf64 <xTaskPriorityDisinherit+0xd0>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d00a      	beq.n	800ceca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	60fb      	str	r3, [r7, #12]
}
 800cec6:	bf00      	nop
 800cec8:	e7fe      	b.n	800cec8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10a      	bne.n	800cee8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	60bb      	str	r3, [r7, #8]
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceec:	1e5a      	subs	r2, r3, #1
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d02c      	beq.n	800cf58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d128      	bne.n	800cf58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	3304      	adds	r3, #4
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fe f99c 	bl	800b248 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf28:	4b0f      	ldr	r3, [pc, #60]	; (800cf68 <xTaskPriorityDisinherit+0xd4>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d903      	bls.n	800cf38 <xTaskPriorityDisinherit+0xa4>
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf34:	4a0c      	ldr	r2, [pc, #48]	; (800cf68 <xTaskPriorityDisinherit+0xd4>)
 800cf36:	6013      	str	r3, [r2, #0]
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4a09      	ldr	r2, [pc, #36]	; (800cf6c <xTaskPriorityDisinherit+0xd8>)
 800cf46:	441a      	add	r2, r3
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	4610      	mov	r0, r2
 800cf50:	f7fe f91d 	bl	800b18e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cf54:	2301      	movs	r3, #1
 800cf56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf58:	697b      	ldr	r3, [r7, #20]
	}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	20000ef0 	.word	0x20000ef0
 800cf68:	200013cc 	.word	0x200013cc
 800cf6c:	20000ef4 	.word	0x20000ef4

0800cf70 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f002 fdad 	bl	800fadc <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7f3 f924 	bl	80001d0 <strlen>
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	e007      	b.n	800cf9c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	4413      	add	r3, r2
 800cf92:	2220      	movs	r2, #32
 800cf94:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	60fb      	str	r3, [r7, #12]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b0e      	cmp	r3, #14
 800cfa0:	d9f4      	bls.n	800cf8c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	4413      	add	r3, r2
	}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
	...

0800cfbc <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800cfbc:	b590      	push	{r4, r7, lr}
 800cfbe:	b089      	sub	sp, #36	; 0x24
 800cfc0:	af02      	add	r7, sp, #8
 800cfc2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800cfca:	4b45      	ldr	r3, [pc, #276]	; (800d0e0 <vTaskList+0x124>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800cfd0:	4b43      	ldr	r3, [pc, #268]	; (800d0e0 <vTaskList+0x124>)
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	4413      	add	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 fefb 	bl	800ddd8 <pvPortMalloc>
 800cfe2:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d076      	beq.n	800d0d8 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800cfea:	2200      	movs	r2, #0
 800cfec:	68f9      	ldr	r1, [r7, #12]
 800cfee:	68b8      	ldr	r0, [r7, #8]
 800cff0:	f7ff fa80 	bl	800c4f4 <uxTaskGetSystemState>
 800cff4:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800cff6:	2300      	movs	r3, #0
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	e066      	b.n	800d0ca <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	4613      	mov	r3, r2
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	4413      	add	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	461a      	mov	r2, r3
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	4413      	add	r3, r2
 800d00c:	7b1b      	ldrb	r3, [r3, #12]
 800d00e:	2b04      	cmp	r3, #4
 800d010:	d81b      	bhi.n	800d04a <vTaskList+0x8e>
 800d012:	a201      	add	r2, pc, #4	; (adr r2, 800d018 <vTaskList+0x5c>)
 800d014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d018:	0800d02d 	.word	0x0800d02d
 800d01c:	0800d033 	.word	0x0800d033
 800d020:	0800d039 	.word	0x0800d039
 800d024:	0800d03f 	.word	0x0800d03f
 800d028:	0800d045 	.word	0x0800d045
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800d02c:	2358      	movs	r3, #88	; 0x58
 800d02e:	74fb      	strb	r3, [r7, #19]
										break;
 800d030:	e00e      	b.n	800d050 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800d032:	2352      	movs	r3, #82	; 0x52
 800d034:	74fb      	strb	r3, [r7, #19]
										break;
 800d036:	e00b      	b.n	800d050 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800d038:	2342      	movs	r3, #66	; 0x42
 800d03a:	74fb      	strb	r3, [r7, #19]
										break;
 800d03c:	e008      	b.n	800d050 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800d03e:	2353      	movs	r3, #83	; 0x53
 800d040:	74fb      	strb	r3, [r7, #19]
										break;
 800d042:	e005      	b.n	800d050 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800d044:	2344      	movs	r3, #68	; 0x44
 800d046:	74fb      	strb	r3, [r7, #19]
										break;
 800d048:	e002      	b.n	800d050 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800d04a:	2300      	movs	r3, #0
 800d04c:	74fb      	strb	r3, [r7, #19]
										break;
 800d04e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800d050:	697a      	ldr	r2, [r7, #20]
 800d052:	4613      	mov	r3, r2
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	4413      	add	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	461a      	mov	r2, r3
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	4413      	add	r3, r2
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7ff ff83 	bl	800cf70 <prvWriteNameToBuffer>
 800d06a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800d06c:	7cf9      	ldrb	r1, [r7, #19]
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	4613      	mov	r3, r2
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	4413      	add	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	461a      	mov	r2, r3
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	4413      	add	r3, r2
 800d07e:	6918      	ldr	r0, [r3, #16]
 800d080:	697a      	ldr	r2, [r7, #20]
 800d082:	4613      	mov	r3, r2
 800d084:	00db      	lsls	r3, r3, #3
 800d086:	4413      	add	r3, r2
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	461a      	mov	r2, r3
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	4413      	add	r3, r2
 800d090:	8c1b      	ldrh	r3, [r3, #32]
 800d092:	461c      	mov	r4, r3
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	4613      	mov	r3, r2
 800d098:	00db      	lsls	r3, r3, #3
 800d09a:	4413      	add	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	461a      	mov	r2, r3
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	9400      	str	r4, [sp, #0]
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	460a      	mov	r2, r1
 800d0ae:	490d      	ldr	r1, [pc, #52]	; (800d0e4 <vTaskList+0x128>)
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f002 fca1 	bl	800f9f8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7f3 f88a 	bl	80001d0 <strlen>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	617b      	str	r3, [r7, #20]
 800d0ca:	697a      	ldr	r2, [r7, #20]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d394      	bcc.n	800cffc <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800d0d2:	68b8      	ldr	r0, [r7, #8]
 800d0d4:	f000 ff4c 	bl	800df70 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0d8:	bf00      	nop
 800d0da:	371c      	adds	r7, #28
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd90      	pop	{r4, r7, pc}
 800d0e0:	200013c4 	.word	0x200013c4
 800d0e4:	08011d30 	.word	0x08011d30

0800d0e8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800d0f6:	4b3a      	ldr	r3, [pc, #232]	; (800d1e0 <vTaskGetRunTimeStats+0xf8>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800d0fc:	4b38      	ldr	r3, [pc, #224]	; (800d1e0 <vTaskGetRunTimeStats+0xf8>)
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	4613      	mov	r3, r2
 800d102:	00db      	lsls	r3, r3, #3
 800d104:	4413      	add	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 fe65 	bl	800ddd8 <pvPortMalloc>
 800d10e:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d05f      	beq.n	800d1d6 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800d116:	f107 030c 	add.w	r3, r7, #12
 800d11a:	461a      	mov	r2, r3
 800d11c:	69b9      	ldr	r1, [r7, #24]
 800d11e:	6978      	ldr	r0, [r7, #20]
 800d120:	f7ff f9e8 	bl	800c4f4 <uxTaskGetSystemState>
 800d124:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	4a2e      	ldr	r2, [pc, #184]	; (800d1e4 <vTaskGetRunTimeStats+0xfc>)
 800d12a:	fba2 2303 	umull	r2, r3, r2, r3
 800d12e:	095b      	lsrs	r3, r3, #5
 800d130:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d04b      	beq.n	800d1d0 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800d138:	2300      	movs	r3, #0
 800d13a:	61fb      	str	r3, [r7, #28]
 800d13c:	e044      	b.n	800d1c8 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800d13e:	69fa      	ldr	r2, [r7, #28]
 800d140:	4613      	mov	r3, r2
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	4413      	add	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	461a      	mov	r2, r3
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	4413      	add	r3, r2
 800d14e:	699a      	ldr	r2, [r3, #24]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	fbb2 f3f3 	udiv	r3, r2, r3
 800d156:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800d158:	69fa      	ldr	r2, [r7, #28]
 800d15a:	4613      	mov	r3, r2
 800d15c:	00db      	lsls	r3, r3, #3
 800d15e:	4413      	add	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	461a      	mov	r2, r3
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	4413      	add	r3, r2
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	4619      	mov	r1, r3
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f7ff feff 	bl	800cf70 <prvWriteNameToBuffer>
 800d172:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00e      	beq.n	800d198 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800d17a:	69fa      	ldr	r2, [r7, #28]
 800d17c:	4613      	mov	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	461a      	mov	r2, r3
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	4413      	add	r3, r2
 800d18a:	699a      	ldr	r2, [r3, #24]
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	4916      	ldr	r1, [pc, #88]	; (800d1e8 <vTaskGetRunTimeStats+0x100>)
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f002 fc31 	bl	800f9f8 <siprintf>
 800d196:	e00d      	b.n	800d1b4 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800d198:	69fa      	ldr	r2, [r7, #28]
 800d19a:	4613      	mov	r3, r2
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	4413      	add	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	699b      	ldr	r3, [r3, #24]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	490f      	ldr	r1, [pc, #60]	; (800d1ec <vTaskGetRunTimeStats+0x104>)
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f002 fc22 	bl	800f9f8 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7f3 f80b 	bl	80001d0 <strlen>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4413      	add	r3, r2
 800d1c0:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	61fb      	str	r3, [r7, #28]
 800d1c8:	69fa      	ldr	r2, [r7, #28]
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d3b6      	bcc.n	800d13e <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800d1d0:	6978      	ldr	r0, [r7, #20]
 800d1d2:	f000 fecd 	bl	800df70 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1d6:	bf00      	nop
 800d1d8:	3720      	adds	r7, #32
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	200013c4 	.word	0x200013c4
 800d1e4:	51eb851f 	.word	0x51eb851f
 800d1e8:	08011d40 	.word	0x08011d40
 800d1ec:	08011d4c 	.word	0x08011d4c

0800d1f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1fa:	4b21      	ldr	r3, [pc, #132]	; (800d280 <prvAddCurrentTaskToDelayedList+0x90>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d200:	4b20      	ldr	r3, [pc, #128]	; (800d284 <prvAddCurrentTaskToDelayedList+0x94>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	3304      	adds	r3, #4
 800d206:	4618      	mov	r0, r3
 800d208:	f7fe f81e 	bl	800b248 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d212:	d10a      	bne.n	800d22a <prvAddCurrentTaskToDelayedList+0x3a>
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d007      	beq.n	800d22a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d21a:	4b1a      	ldr	r3, [pc, #104]	; (800d284 <prvAddCurrentTaskToDelayedList+0x94>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3304      	adds	r3, #4
 800d220:	4619      	mov	r1, r3
 800d222:	4819      	ldr	r0, [pc, #100]	; (800d288 <prvAddCurrentTaskToDelayedList+0x98>)
 800d224:	f7fd ffb3 	bl	800b18e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d228:	e026      	b.n	800d278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4413      	add	r3, r2
 800d230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d232:	4b14      	ldr	r3, [pc, #80]	; (800d284 <prvAddCurrentTaskToDelayedList+0x94>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d209      	bcs.n	800d256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d242:	4b12      	ldr	r3, [pc, #72]	; (800d28c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	4b0f      	ldr	r3, [pc, #60]	; (800d284 <prvAddCurrentTaskToDelayedList+0x94>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	3304      	adds	r3, #4
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f7fd ffc1 	bl	800b1d6 <vListInsert>
}
 800d254:	e010      	b.n	800d278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d256:	4b0e      	ldr	r3, [pc, #56]	; (800d290 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <prvAddCurrentTaskToDelayedList+0x94>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3304      	adds	r3, #4
 800d260:	4619      	mov	r1, r3
 800d262:	4610      	mov	r0, r2
 800d264:	f7fd ffb7 	bl	800b1d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d268:	4b0a      	ldr	r3, [pc, #40]	; (800d294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d202      	bcs.n	800d278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d272:	4a08      	ldr	r2, [pc, #32]	; (800d294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	6013      	str	r3, [r2, #0]
}
 800d278:	bf00      	nop
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	200013c8 	.word	0x200013c8
 800d284:	20000ef0 	.word	0x20000ef0
 800d288:	200013b0 	.word	0x200013b0
 800d28c:	20001380 	.word	0x20001380
 800d290:	2000137c 	.word	0x2000137c
 800d294:	200013e4 	.word	0x200013e4

0800d298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08a      	sub	sp, #40	; 0x28
 800d29c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d2a2:	f000 fb07 	bl	800d8b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d2a6:	4b1c      	ldr	r3, [pc, #112]	; (800d318 <xTimerCreateTimerTask+0x80>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d021      	beq.n	800d2f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d2b6:	1d3a      	adds	r2, r7, #4
 800d2b8:	f107 0108 	add.w	r1, r7, #8
 800d2bc:	f107 030c 	add.w	r3, r7, #12
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fd ff1d 	bl	800b100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d2c6:	6879      	ldr	r1, [r7, #4]
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	9202      	str	r2, [sp, #8]
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	460a      	mov	r2, r1
 800d2d8:	4910      	ldr	r1, [pc, #64]	; (800d31c <xTimerCreateTimerTask+0x84>)
 800d2da:	4811      	ldr	r0, [pc, #68]	; (800d320 <xTimerCreateTimerTask+0x88>)
 800d2dc:	f7fe fd84 	bl	800bde8 <xTaskCreateStatic>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	4a10      	ldr	r2, [pc, #64]	; (800d324 <xTimerCreateTimerTask+0x8c>)
 800d2e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d2e6:	4b0f      	ldr	r3, [pc, #60]	; (800d324 <xTimerCreateTimerTask+0x8c>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10a      	bne.n	800d30e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	613b      	str	r3, [r7, #16]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d30e:	697b      	ldr	r3, [r7, #20]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20001428 	.word	0x20001428
 800d31c:	08011d58 	.word	0x08011d58
 800d320:	0800d45d 	.word	0x0800d45d
 800d324:	2000142c 	.word	0x2000142c

0800d328 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08a      	sub	sp, #40	; 0x28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d336:	2300      	movs	r3, #0
 800d338:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10a      	bne.n	800d356 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	623b      	str	r3, [r7, #32]
}
 800d352:	bf00      	nop
 800d354:	e7fe      	b.n	800d354 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d356:	4b1a      	ldr	r3, [pc, #104]	; (800d3c0 <xTimerGenericCommand+0x98>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d02a      	beq.n	800d3b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	2b05      	cmp	r3, #5
 800d36e:	dc18      	bgt.n	800d3a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d370:	f7ff fd72 	bl	800ce58 <xTaskGetSchedulerState>
 800d374:	4603      	mov	r3, r0
 800d376:	2b02      	cmp	r3, #2
 800d378:	d109      	bne.n	800d38e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d37a:	4b11      	ldr	r3, [pc, #68]	; (800d3c0 <xTimerGenericCommand+0x98>)
 800d37c:	6818      	ldr	r0, [r3, #0]
 800d37e:	f107 0110 	add.w	r1, r7, #16
 800d382:	2300      	movs	r3, #0
 800d384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d386:	f7fe f8c7 	bl	800b518 <xQueueGenericSend>
 800d38a:	6278      	str	r0, [r7, #36]	; 0x24
 800d38c:	e012      	b.n	800d3b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d38e:	4b0c      	ldr	r3, [pc, #48]	; (800d3c0 <xTimerGenericCommand+0x98>)
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	f107 0110 	add.w	r1, r7, #16
 800d396:	2300      	movs	r3, #0
 800d398:	2200      	movs	r2, #0
 800d39a:	f7fe f8bd 	bl	800b518 <xQueueGenericSend>
 800d39e:	6278      	str	r0, [r7, #36]	; 0x24
 800d3a0:	e008      	b.n	800d3b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d3a2:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <xTimerGenericCommand+0x98>)
 800d3a4:	6818      	ldr	r0, [r3, #0]
 800d3a6:	f107 0110 	add.w	r1, r7, #16
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	683a      	ldr	r2, [r7, #0]
 800d3ae:	f7fe f9b1 	bl	800b714 <xQueueGenericSendFromISR>
 800d3b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3728      	adds	r7, #40	; 0x28
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	20001428 	.word	0x20001428

0800d3c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af02      	add	r7, sp, #8
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ce:	4b22      	ldr	r3, [pc, #136]	; (800d458 <prvProcessExpiredTimer+0x94>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	3304      	adds	r3, #4
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fd ff33 	bl	800b248 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3e8:	f003 0304 	and.w	r3, r3, #4
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d022      	beq.n	800d436 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	699a      	ldr	r2, [r3, #24]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	18d1      	adds	r1, r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	6978      	ldr	r0, [r7, #20]
 800d3fe:	f000 f8d1 	bl	800d5a4 <prvInsertTimerInActiveList>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01f      	beq.n	800d448 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d408:	2300      	movs	r3, #0
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	2300      	movs	r3, #0
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	2100      	movs	r1, #0
 800d412:	6978      	ldr	r0, [r7, #20]
 800d414:	f7ff ff88 	bl	800d328 <xTimerGenericCommand>
 800d418:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d113      	bne.n	800d448 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	60fb      	str	r3, [r7, #12]
}
 800d432:	bf00      	nop
 800d434:	e7fe      	b.n	800d434 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	b2da      	uxtb	r2, r3
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	6a1b      	ldr	r3, [r3, #32]
 800d44c:	6978      	ldr	r0, [r7, #20]
 800d44e:	4798      	blx	r3
}
 800d450:	bf00      	nop
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20001420 	.word	0x20001420

0800d45c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d464:	f107 0308 	add.w	r3, r7, #8
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 f857 	bl	800d51c <prvGetNextExpireTime>
 800d46e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	4619      	mov	r1, r3
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f000 f803 	bl	800d480 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d47a:	f000 f8d5 	bl	800d628 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d47e:	e7f1      	b.n	800d464 <prvTimerTask+0x8>

0800d480 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d48a:	f7fe ff77 	bl	800c37c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d48e:	f107 0308 	add.w	r3, r7, #8
 800d492:	4618      	mov	r0, r3
 800d494:	f000 f866 	bl	800d564 <prvSampleTimeNow>
 800d498:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d130      	bne.n	800d502 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10a      	bne.n	800d4bc <prvProcessTimerOrBlockTask+0x3c>
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d806      	bhi.n	800d4bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d4ae:	f7fe ff73 	bl	800c398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d4b2:	68f9      	ldr	r1, [r7, #12]
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7ff ff85 	bl	800d3c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d4ba:	e024      	b.n	800d506 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d008      	beq.n	800d4d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4c2:	4b13      	ldr	r3, [pc, #76]	; (800d510 <prvProcessTimerOrBlockTask+0x90>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <prvProcessTimerOrBlockTask+0x50>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e000      	b.n	800d4d2 <prvProcessTimerOrBlockTask+0x52>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d4d4:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <prvProcessTimerOrBlockTask+0x94>)
 800d4d6:	6818      	ldr	r0, [r3, #0]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	f7fe fc4d 	bl	800bd80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d4e6:	f7fe ff57 	bl	800c398 <xTaskResumeAll>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <prvProcessTimerOrBlockTask+0x98>)
 800d4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4f6:	601a      	str	r2, [r3, #0]
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	f3bf 8f6f 	isb	sy
}
 800d500:	e001      	b.n	800d506 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d502:	f7fe ff49 	bl	800c398 <xTaskResumeAll>
}
 800d506:	bf00      	nop
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	20001424 	.word	0x20001424
 800d514:	20001428 	.word	0x20001428
 800d518:	e000ed04 	.word	0xe000ed04

0800d51c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d51c:	b480      	push	{r7}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d524:	4b0e      	ldr	r3, [pc, #56]	; (800d560 <prvGetNextExpireTime+0x44>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <prvGetNextExpireTime+0x16>
 800d52e:	2201      	movs	r2, #1
 800d530:	e000      	b.n	800d534 <prvGetNextExpireTime+0x18>
 800d532:	2200      	movs	r2, #0
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d105      	bne.n	800d54c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d540:	4b07      	ldr	r3, [pc, #28]	; (800d560 <prvGetNextExpireTime+0x44>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	e001      	b.n	800d550 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d54c:	2300      	movs	r3, #0
 800d54e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d550:	68fb      	ldr	r3, [r7, #12]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	20001420 	.word	0x20001420

0800d564 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d56c:	f7fe ffb2 	bl	800c4d4 <xTaskGetTickCount>
 800d570:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d572:	4b0b      	ldr	r3, [pc, #44]	; (800d5a0 <prvSampleTimeNow+0x3c>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d205      	bcs.n	800d588 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d57c:	f000 f936 	bl	800d7ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	e002      	b.n	800d58e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d58e:	4a04      	ldr	r2, [pc, #16]	; (800d5a0 <prvSampleTimeNow+0x3c>)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d594:	68fb      	ldr	r3, [r7, #12]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	20001430 	.word	0x20001430

0800d5a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b086      	sub	sp, #24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
 800d5b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5c2:	68ba      	ldr	r2, [r7, #8]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d812      	bhi.n	800d5f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	1ad2      	subs	r2, r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d302      	bcc.n	800d5de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	617b      	str	r3, [r7, #20]
 800d5dc:	e01b      	b.n	800d616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d5de:	4b10      	ldr	r3, [pc, #64]	; (800d620 <prvInsertTimerInActiveList+0x7c>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	3304      	adds	r3, #4
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	f7fd fdf4 	bl	800b1d6 <vListInsert>
 800d5ee:	e012      	b.n	800d616 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d206      	bcs.n	800d606 <prvInsertTimerInActiveList+0x62>
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d302      	bcc.n	800d606 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d600:	2301      	movs	r3, #1
 800d602:	617b      	str	r3, [r7, #20]
 800d604:	e007      	b.n	800d616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d606:	4b07      	ldr	r3, [pc, #28]	; (800d624 <prvInsertTimerInActiveList+0x80>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3304      	adds	r3, #4
 800d60e:	4619      	mov	r1, r3
 800d610:	4610      	mov	r0, r2
 800d612:	f7fd fde0 	bl	800b1d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d616:	697b      	ldr	r3, [r7, #20]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3718      	adds	r7, #24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	20001424 	.word	0x20001424
 800d624:	20001420 	.word	0x20001420

0800d628 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08e      	sub	sp, #56	; 0x38
 800d62c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d62e:	e0ca      	b.n	800d7c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	da18      	bge.n	800d668 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d636:	1d3b      	adds	r3, r7, #4
 800d638:	3304      	adds	r3, #4
 800d63a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10a      	bne.n	800d658 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	61fb      	str	r3, [r7, #28]
}
 800d654:	bf00      	nop
 800d656:	e7fe      	b.n	800d656 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d65e:	6850      	ldr	r0, [r2, #4]
 800d660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d662:	6892      	ldr	r2, [r2, #8]
 800d664:	4611      	mov	r1, r2
 800d666:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f2c0 80aa 	blt.w	800d7c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	695b      	ldr	r3, [r3, #20]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d004      	beq.n	800d686 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67e:	3304      	adds	r3, #4
 800d680:	4618      	mov	r0, r3
 800d682:	f7fd fde1 	bl	800b248 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d686:	463b      	mov	r3, r7
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff ff6b 	bl	800d564 <prvSampleTimeNow>
 800d68e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b09      	cmp	r3, #9
 800d694:	f200 8097 	bhi.w	800d7c6 <prvProcessReceivedCommands+0x19e>
 800d698:	a201      	add	r2, pc, #4	; (adr r2, 800d6a0 <prvProcessReceivedCommands+0x78>)
 800d69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d69e:	bf00      	nop
 800d6a0:	0800d6c9 	.word	0x0800d6c9
 800d6a4:	0800d6c9 	.word	0x0800d6c9
 800d6a8:	0800d6c9 	.word	0x0800d6c9
 800d6ac:	0800d73d 	.word	0x0800d73d
 800d6b0:	0800d751 	.word	0x0800d751
 800d6b4:	0800d79b 	.word	0x0800d79b
 800d6b8:	0800d6c9 	.word	0x0800d6c9
 800d6bc:	0800d6c9 	.word	0x0800d6c9
 800d6c0:	0800d73d 	.word	0x0800d73d
 800d6c4:	0800d751 	.word	0x0800d751
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6ce:	f043 0301 	orr.w	r3, r3, #1
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	699b      	ldr	r3, [r3, #24]
 800d6e0:	18d1      	adds	r1, r2, r3
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6e8:	f7ff ff5c 	bl	800d5a4 <prvInsertTimerInActiveList>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d069      	beq.n	800d7c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	6a1b      	ldr	r3, [r3, #32]
 800d6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d700:	f003 0304 	and.w	r3, r3, #4
 800d704:	2b00      	cmp	r3, #0
 800d706:	d05e      	beq.n	800d7c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70c:	699b      	ldr	r3, [r3, #24]
 800d70e:	441a      	add	r2, r3
 800d710:	2300      	movs	r3, #0
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	2300      	movs	r3, #0
 800d716:	2100      	movs	r1, #0
 800d718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d71a:	f7ff fe05 	bl	800d328 <xTimerGenericCommand>
 800d71e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d720:	6a3b      	ldr	r3, [r7, #32]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d14f      	bne.n	800d7c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	61bb      	str	r3, [r7, #24]
}
 800d738:	bf00      	nop
 800d73a:	e7fe      	b.n	800d73a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d742:	f023 0301 	bic.w	r3, r3, #1
 800d746:	b2da      	uxtb	r2, r3
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d74e:	e03a      	b.n	800d7c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d756:	f043 0301 	orr.w	r3, r3, #1
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d762:	68ba      	ldr	r2, [r7, #8]
 800d764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d766:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d10a      	bne.n	800d786 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	617b      	str	r3, [r7, #20]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	699a      	ldr	r2, [r3, #24]
 800d78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78c:	18d1      	adds	r1, r2, r3
 800d78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d794:	f7ff ff06 	bl	800d5a4 <prvInsertTimerInActiveList>
					break;
 800d798:	e015      	b.n	800d7c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a0:	f003 0302 	and.w	r3, r3, #2
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d103      	bne.n	800d7b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d7a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7aa:	f000 fbe1 	bl	800df70 <vPortFree>
 800d7ae:	e00a      	b.n	800d7c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7b6:	f023 0301 	bic.w	r3, r3, #1
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d7c2:	e000      	b.n	800d7c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d7c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7c6:	4b08      	ldr	r3, [pc, #32]	; (800d7e8 <prvProcessReceivedCommands+0x1c0>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	1d39      	adds	r1, r7, #4
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe f83c 	bl	800b84c <xQueueReceive>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	f47f af2a 	bne.w	800d630 <prvProcessReceivedCommands+0x8>
	}
}
 800d7dc:	bf00      	nop
 800d7de:	bf00      	nop
 800d7e0:	3730      	adds	r7, #48	; 0x30
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20001428 	.word	0x20001428

0800d7ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b088      	sub	sp, #32
 800d7f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7f2:	e048      	b.n	800d886 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7f4:	4b2d      	ldr	r3, [pc, #180]	; (800d8ac <prvSwitchTimerLists+0xc0>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7fe:	4b2b      	ldr	r3, [pc, #172]	; (800d8ac <prvSwitchTimerLists+0xc0>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	3304      	adds	r3, #4
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7fd fd1b 	bl	800b248 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d820:	f003 0304 	and.w	r3, r3, #4
 800d824:	2b00      	cmp	r3, #0
 800d826:	d02e      	beq.n	800d886 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	699b      	ldr	r3, [r3, #24]
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	4413      	add	r3, r2
 800d830:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	429a      	cmp	r2, r3
 800d838:	d90e      	bls.n	800d858 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	68ba      	ldr	r2, [r7, #8]
 800d83e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d846:	4b19      	ldr	r3, [pc, #100]	; (800d8ac <prvSwitchTimerLists+0xc0>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	3304      	adds	r3, #4
 800d84e:	4619      	mov	r1, r3
 800d850:	4610      	mov	r0, r2
 800d852:	f7fd fcc0 	bl	800b1d6 <vListInsert>
 800d856:	e016      	b.n	800d886 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d858:	2300      	movs	r3, #0
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	2300      	movs	r3, #0
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	2100      	movs	r1, #0
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f7ff fd60 	bl	800d328 <xTimerGenericCommand>
 800d868:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10a      	bne.n	800d886 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	603b      	str	r3, [r7, #0]
}
 800d882:	bf00      	nop
 800d884:	e7fe      	b.n	800d884 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d886:	4b09      	ldr	r3, [pc, #36]	; (800d8ac <prvSwitchTimerLists+0xc0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1b1      	bne.n	800d7f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d890:	4b06      	ldr	r3, [pc, #24]	; (800d8ac <prvSwitchTimerLists+0xc0>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d896:	4b06      	ldr	r3, [pc, #24]	; (800d8b0 <prvSwitchTimerLists+0xc4>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a04      	ldr	r2, [pc, #16]	; (800d8ac <prvSwitchTimerLists+0xc0>)
 800d89c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d89e:	4a04      	ldr	r2, [pc, #16]	; (800d8b0 <prvSwitchTimerLists+0xc4>)
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	6013      	str	r3, [r2, #0]
}
 800d8a4:	bf00      	nop
 800d8a6:	3718      	adds	r7, #24
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	20001420 	.word	0x20001420
 800d8b0:	20001424 	.word	0x20001424

0800d8b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8ba:	f000 f96b 	bl	800db94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8be:	4b15      	ldr	r3, [pc, #84]	; (800d914 <prvCheckForValidListAndQueue+0x60>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d120      	bne.n	800d908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8c6:	4814      	ldr	r0, [pc, #80]	; (800d918 <prvCheckForValidListAndQueue+0x64>)
 800d8c8:	f7fd fc34 	bl	800b134 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d8cc:	4813      	ldr	r0, [pc, #76]	; (800d91c <prvCheckForValidListAndQueue+0x68>)
 800d8ce:	f7fd fc31 	bl	800b134 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d8d2:	4b13      	ldr	r3, [pc, #76]	; (800d920 <prvCheckForValidListAndQueue+0x6c>)
 800d8d4:	4a10      	ldr	r2, [pc, #64]	; (800d918 <prvCheckForValidListAndQueue+0x64>)
 800d8d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d8d8:	4b12      	ldr	r3, [pc, #72]	; (800d924 <prvCheckForValidListAndQueue+0x70>)
 800d8da:	4a10      	ldr	r2, [pc, #64]	; (800d91c <prvCheckForValidListAndQueue+0x68>)
 800d8dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8de:	2300      	movs	r3, #0
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	4b11      	ldr	r3, [pc, #68]	; (800d928 <prvCheckForValidListAndQueue+0x74>)
 800d8e4:	4a11      	ldr	r2, [pc, #68]	; (800d92c <prvCheckForValidListAndQueue+0x78>)
 800d8e6:	2110      	movs	r1, #16
 800d8e8:	200a      	movs	r0, #10
 800d8ea:	f7fd fd3f 	bl	800b36c <xQueueGenericCreateStatic>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	4a08      	ldr	r2, [pc, #32]	; (800d914 <prvCheckForValidListAndQueue+0x60>)
 800d8f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d8f4:	4b07      	ldr	r3, [pc, #28]	; (800d914 <prvCheckForValidListAndQueue+0x60>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d005      	beq.n	800d908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d8fc:	4b05      	ldr	r3, [pc, #20]	; (800d914 <prvCheckForValidListAndQueue+0x60>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	490b      	ldr	r1, [pc, #44]	; (800d930 <prvCheckForValidListAndQueue+0x7c>)
 800d902:	4618      	mov	r0, r3
 800d904:	f7fe fa12 	bl	800bd2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d908:	f000 f974 	bl	800dbf4 <vPortExitCritical>
}
 800d90c:	bf00      	nop
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	20001428 	.word	0x20001428
 800d918:	200013f8 	.word	0x200013f8
 800d91c:	2000140c 	.word	0x2000140c
 800d920:	20001420 	.word	0x20001420
 800d924:	20001424 	.word	0x20001424
 800d928:	200014d4 	.word	0x200014d4
 800d92c:	20001434 	.word	0x20001434
 800d930:	08011d60 	.word	0x08011d60

0800d934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	3b04      	subs	r3, #4
 800d944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d94c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3b04      	subs	r3, #4
 800d952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f023 0201 	bic.w	r2, r3, #1
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3b04      	subs	r3, #4
 800d962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d964:	4a0c      	ldr	r2, [pc, #48]	; (800d998 <pxPortInitialiseStack+0x64>)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	3b14      	subs	r3, #20
 800d96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	3b04      	subs	r3, #4
 800d97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f06f 0202 	mvn.w	r2, #2
 800d982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	3b20      	subs	r3, #32
 800d988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d98a:	68fb      	ldr	r3, [r7, #12]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr
 800d998:	0800d99d 	.word	0x0800d99d

0800d99c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d9a6:	4b12      	ldr	r3, [pc, #72]	; (800d9f0 <prvTaskExitError+0x54>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9ae:	d00a      	beq.n	800d9c6 <prvTaskExitError+0x2a>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	60fb      	str	r3, [r7, #12]
}
 800d9c2:	bf00      	nop
 800d9c4:	e7fe      	b.n	800d9c4 <prvTaskExitError+0x28>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	60bb      	str	r3, [r7, #8]
}
 800d9d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9da:	bf00      	nop
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d0fc      	beq.n	800d9dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9e2:	bf00      	nop
 800d9e4:	bf00      	nop
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	2000011c 	.word	0x2000011c
	...

0800da00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da00:	4b07      	ldr	r3, [pc, #28]	; (800da20 <pxCurrentTCBConst2>)
 800da02:	6819      	ldr	r1, [r3, #0]
 800da04:	6808      	ldr	r0, [r1, #0]
 800da06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0a:	f380 8809 	msr	PSP, r0
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f04f 0000 	mov.w	r0, #0
 800da16:	f380 8811 	msr	BASEPRI, r0
 800da1a:	4770      	bx	lr
 800da1c:	f3af 8000 	nop.w

0800da20 <pxCurrentTCBConst2>:
 800da20:	20000ef0 	.word	0x20000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop

0800da28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da28:	4808      	ldr	r0, [pc, #32]	; (800da4c <prvPortStartFirstTask+0x24>)
 800da2a:	6800      	ldr	r0, [r0, #0]
 800da2c:	6800      	ldr	r0, [r0, #0]
 800da2e:	f380 8808 	msr	MSP, r0
 800da32:	f04f 0000 	mov.w	r0, #0
 800da36:	f380 8814 	msr	CONTROL, r0
 800da3a:	b662      	cpsie	i
 800da3c:	b661      	cpsie	f
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	df00      	svc	0
 800da48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da4a:	bf00      	nop
 800da4c:	e000ed08 	.word	0xe000ed08

0800da50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da56:	4b46      	ldr	r3, [pc, #280]	; (800db70 <xPortStartScheduler+0x120>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a46      	ldr	r2, [pc, #280]	; (800db74 <xPortStartScheduler+0x124>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d10a      	bne.n	800da76 <xPortStartScheduler+0x26>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	613b      	str	r3, [r7, #16]
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da76:	4b3e      	ldr	r3, [pc, #248]	; (800db70 <xPortStartScheduler+0x120>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a3f      	ldr	r2, [pc, #252]	; (800db78 <xPortStartScheduler+0x128>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d10a      	bne.n	800da96 <xPortStartScheduler+0x46>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	60fb      	str	r3, [r7, #12]
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da96:	4b39      	ldr	r3, [pc, #228]	; (800db7c <xPortStartScheduler+0x12c>)
 800da98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	22ff      	movs	r2, #255	; 0xff
 800daa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	b2db      	uxtb	r3, r3
 800daae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dab8:	b2da      	uxtb	r2, r3
 800daba:	4b31      	ldr	r3, [pc, #196]	; (800db80 <xPortStartScheduler+0x130>)
 800dabc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dabe:	4b31      	ldr	r3, [pc, #196]	; (800db84 <xPortStartScheduler+0x134>)
 800dac0:	2207      	movs	r2, #7
 800dac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dac4:	e009      	b.n	800dada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dac6:	4b2f      	ldr	r3, [pc, #188]	; (800db84 <xPortStartScheduler+0x134>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3b01      	subs	r3, #1
 800dacc:	4a2d      	ldr	r2, [pc, #180]	; (800db84 <xPortStartScheduler+0x134>)
 800dace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dad0:	78fb      	ldrb	r3, [r7, #3]
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dada:	78fb      	ldrb	r3, [r7, #3]
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae2:	2b80      	cmp	r3, #128	; 0x80
 800dae4:	d0ef      	beq.n	800dac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dae6:	4b27      	ldr	r3, [pc, #156]	; (800db84 <xPortStartScheduler+0x134>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f1c3 0307 	rsb	r3, r3, #7
 800daee:	2b04      	cmp	r3, #4
 800daf0:	d00a      	beq.n	800db08 <xPortStartScheduler+0xb8>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	60bb      	str	r3, [r7, #8]
}
 800db04:	bf00      	nop
 800db06:	e7fe      	b.n	800db06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db08:	4b1e      	ldr	r3, [pc, #120]	; (800db84 <xPortStartScheduler+0x134>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	021b      	lsls	r3, r3, #8
 800db0e:	4a1d      	ldr	r2, [pc, #116]	; (800db84 <xPortStartScheduler+0x134>)
 800db10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db12:	4b1c      	ldr	r3, [pc, #112]	; (800db84 <xPortStartScheduler+0x134>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db1a:	4a1a      	ldr	r2, [pc, #104]	; (800db84 <xPortStartScheduler+0x134>)
 800db1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	b2da      	uxtb	r2, r3
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db26:	4b18      	ldr	r3, [pc, #96]	; (800db88 <xPortStartScheduler+0x138>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a17      	ldr	r2, [pc, #92]	; (800db88 <xPortStartScheduler+0x138>)
 800db2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db32:	4b15      	ldr	r3, [pc, #84]	; (800db88 <xPortStartScheduler+0x138>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a14      	ldr	r2, [pc, #80]	; (800db88 <xPortStartScheduler+0x138>)
 800db38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db3e:	f000 f8dd 	bl	800dcfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db42:	4b12      	ldr	r3, [pc, #72]	; (800db8c <xPortStartScheduler+0x13c>)
 800db44:	2200      	movs	r2, #0
 800db46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db48:	f000 f8fc 	bl	800dd44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db4c:	4b10      	ldr	r3, [pc, #64]	; (800db90 <xPortStartScheduler+0x140>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a0f      	ldr	r2, [pc, #60]	; (800db90 <xPortStartScheduler+0x140>)
 800db52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db58:	f7ff ff66 	bl	800da28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db5c:	f7fe fe14 	bl	800c788 <vTaskSwitchContext>
	prvTaskExitError();
 800db60:	f7ff ff1c 	bl	800d99c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	e000ed00 	.word	0xe000ed00
 800db74:	410fc271 	.word	0x410fc271
 800db78:	410fc270 	.word	0x410fc270
 800db7c:	e000e400 	.word	0xe000e400
 800db80:	20001524 	.word	0x20001524
 800db84:	20001528 	.word	0x20001528
 800db88:	e000ed20 	.word	0xe000ed20
 800db8c:	2000011c 	.word	0x2000011c
 800db90:	e000ef34 	.word	0xe000ef34

0800db94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
	__asm volatile
 800db9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	607b      	str	r3, [r7, #4]
}
 800dbac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbae:	4b0f      	ldr	r3, [pc, #60]	; (800dbec <vPortEnterCritical+0x58>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	4a0d      	ldr	r2, [pc, #52]	; (800dbec <vPortEnterCritical+0x58>)
 800dbb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbb8:	4b0c      	ldr	r3, [pc, #48]	; (800dbec <vPortEnterCritical+0x58>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d10f      	bne.n	800dbe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbc0:	4b0b      	ldr	r3, [pc, #44]	; (800dbf0 <vPortEnterCritical+0x5c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00a      	beq.n	800dbe0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	603b      	str	r3, [r7, #0]
}
 800dbdc:	bf00      	nop
 800dbde:	e7fe      	b.n	800dbde <vPortEnterCritical+0x4a>
	}
}
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	2000011c 	.word	0x2000011c
 800dbf0:	e000ed04 	.word	0xe000ed04

0800dbf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbfa:	4b12      	ldr	r3, [pc, #72]	; (800dc44 <vPortExitCritical+0x50>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10a      	bne.n	800dc18 <vPortExitCritical+0x24>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	607b      	str	r3, [r7, #4]
}
 800dc14:	bf00      	nop
 800dc16:	e7fe      	b.n	800dc16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc18:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <vPortExitCritical+0x50>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	4a09      	ldr	r2, [pc, #36]	; (800dc44 <vPortExitCritical+0x50>)
 800dc20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc22:	4b08      	ldr	r3, [pc, #32]	; (800dc44 <vPortExitCritical+0x50>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d105      	bne.n	800dc36 <vPortExitCritical+0x42>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	f383 8811 	msr	BASEPRI, r3
}
 800dc34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	2000011c 	.word	0x2000011c
	...

0800dc50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc50:	f3ef 8009 	mrs	r0, PSP
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <pxCurrentTCBConst>)
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	f01e 0f10 	tst.w	lr, #16
 800dc60:	bf08      	it	eq
 800dc62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6a:	6010      	str	r0, [r2, #0]
 800dc6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc74:	f380 8811 	msr	BASEPRI, r0
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	f3bf 8f6f 	isb	sy
 800dc80:	f7fe fd82 	bl	800c788 <vTaskSwitchContext>
 800dc84:	f04f 0000 	mov.w	r0, #0
 800dc88:	f380 8811 	msr	BASEPRI, r0
 800dc8c:	bc09      	pop	{r0, r3}
 800dc8e:	6819      	ldr	r1, [r3, #0]
 800dc90:	6808      	ldr	r0, [r1, #0]
 800dc92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc96:	f01e 0f10 	tst.w	lr, #16
 800dc9a:	bf08      	it	eq
 800dc9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dca0:	f380 8809 	msr	PSP, r0
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	f3af 8000 	nop.w

0800dcb0 <pxCurrentTCBConst>:
 800dcb0:	20000ef0 	.word	0x20000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop

0800dcb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
	__asm volatile
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	607b      	str	r3, [r7, #4]
}
 800dcd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcd2:	f7fe fc9f 	bl	800c614 <xTaskIncrementTick>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dcdc:	4b06      	ldr	r3, [pc, #24]	; (800dcf8 <xPortSysTickHandler+0x40>)
 800dcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	2300      	movs	r3, #0
 800dce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	f383 8811 	msr	BASEPRI, r3
}
 800dcee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcf0:	bf00      	nop
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	e000ed04 	.word	0xe000ed04

0800dcfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <vPortSetupTimerInterrupt+0x34>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd06:	4b0b      	ldr	r3, [pc, #44]	; (800dd34 <vPortSetupTimerInterrupt+0x38>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd0c:	4b0a      	ldr	r3, [pc, #40]	; (800dd38 <vPortSetupTimerInterrupt+0x3c>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a0a      	ldr	r2, [pc, #40]	; (800dd3c <vPortSetupTimerInterrupt+0x40>)
 800dd12:	fba2 2303 	umull	r2, r3, r2, r3
 800dd16:	099b      	lsrs	r3, r3, #6
 800dd18:	4a09      	ldr	r2, [pc, #36]	; (800dd40 <vPortSetupTimerInterrupt+0x44>)
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd1e:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <vPortSetupTimerInterrupt+0x34>)
 800dd20:	2207      	movs	r2, #7
 800dd22:	601a      	str	r2, [r3, #0]
}
 800dd24:	bf00      	nop
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	e000e010 	.word	0xe000e010
 800dd34:	e000e018 	.word	0xe000e018
 800dd38:	20000000 	.word	0x20000000
 800dd3c:	10624dd3 	.word	0x10624dd3
 800dd40:	e000e014 	.word	0xe000e014

0800dd44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd54 <vPortEnableVFP+0x10>
 800dd48:	6801      	ldr	r1, [r0, #0]
 800dd4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd4e:	6001      	str	r1, [r0, #0]
 800dd50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd52:	bf00      	nop
 800dd54:	e000ed88 	.word	0xe000ed88

0800dd58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd5e:	f3ef 8305 	mrs	r3, IPSR
 800dd62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b0f      	cmp	r3, #15
 800dd68:	d914      	bls.n	800dd94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd6a:	4a17      	ldr	r2, [pc, #92]	; (800ddc8 <vPortValidateInterruptPriority+0x70>)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	4413      	add	r3, r2
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd74:	4b15      	ldr	r3, [pc, #84]	; (800ddcc <vPortValidateInterruptPriority+0x74>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	7afa      	ldrb	r2, [r7, #11]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d20a      	bcs.n	800dd94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	607b      	str	r3, [r7, #4]
}
 800dd90:	bf00      	nop
 800dd92:	e7fe      	b.n	800dd92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd94:	4b0e      	ldr	r3, [pc, #56]	; (800ddd0 <vPortValidateInterruptPriority+0x78>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd9c:	4b0d      	ldr	r3, [pc, #52]	; (800ddd4 <vPortValidateInterruptPriority+0x7c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d90a      	bls.n	800ddba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	603b      	str	r3, [r7, #0]
}
 800ddb6:	bf00      	nop
 800ddb8:	e7fe      	b.n	800ddb8 <vPortValidateInterruptPriority+0x60>
	}
 800ddba:	bf00      	nop
 800ddbc:	3714      	adds	r7, #20
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	e000e3f0 	.word	0xe000e3f0
 800ddcc:	20001524 	.word	0x20001524
 800ddd0:	e000ed0c 	.word	0xe000ed0c
 800ddd4:	20001528 	.word	0x20001528

0800ddd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	; 0x28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dde0:	2300      	movs	r3, #0
 800dde2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dde4:	f7fe faca 	bl	800c37c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dde8:	4b5b      	ldr	r3, [pc, #364]	; (800df58 <pvPortMalloc+0x180>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ddf0:	f000 f92c 	bl	800e04c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ddf4:	4b59      	ldr	r3, [pc, #356]	; (800df5c <pvPortMalloc+0x184>)
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f040 8093 	bne.w	800df28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d01d      	beq.n	800de44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800de08:	2208      	movs	r2, #8
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4413      	add	r3, r2
 800de0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f003 0307 	and.w	r3, r3, #7
 800de16:	2b00      	cmp	r3, #0
 800de18:	d014      	beq.n	800de44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f023 0307 	bic.w	r3, r3, #7
 800de20:	3308      	adds	r3, #8
 800de22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f003 0307 	and.w	r3, r3, #7
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00a      	beq.n	800de44 <pvPortMalloc+0x6c>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	617b      	str	r3, [r7, #20]
}
 800de40:	bf00      	nop
 800de42:	e7fe      	b.n	800de42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d06e      	beq.n	800df28 <pvPortMalloc+0x150>
 800de4a:	4b45      	ldr	r3, [pc, #276]	; (800df60 <pvPortMalloc+0x188>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	429a      	cmp	r2, r3
 800de52:	d869      	bhi.n	800df28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de54:	4b43      	ldr	r3, [pc, #268]	; (800df64 <pvPortMalloc+0x18c>)
 800de56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de58:	4b42      	ldr	r3, [pc, #264]	; (800df64 <pvPortMalloc+0x18c>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de5e:	e004      	b.n	800de6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	429a      	cmp	r2, r3
 800de72:	d903      	bls.n	800de7c <pvPortMalloc+0xa4>
 800de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1f1      	bne.n	800de60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de7c:	4b36      	ldr	r3, [pc, #216]	; (800df58 <pvPortMalloc+0x180>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de82:	429a      	cmp	r2, r3
 800de84:	d050      	beq.n	800df28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2208      	movs	r2, #8
 800de8c:	4413      	add	r3, r2
 800de8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	6a3b      	ldr	r3, [r7, #32]
 800de96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	1ad2      	subs	r2, r2, r3
 800dea0:	2308      	movs	r3, #8
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d91f      	bls.n	800dee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4413      	add	r3, r2
 800deae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	f003 0307 	and.w	r3, r3, #7
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00a      	beq.n	800ded0 <pvPortMalloc+0xf8>
	__asm volatile
 800deba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debe:	f383 8811 	msr	BASEPRI, r3
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	f3bf 8f4f 	dsb	sy
 800deca:	613b      	str	r3, [r7, #16]
}
 800decc:	bf00      	nop
 800dece:	e7fe      	b.n	800dece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	685a      	ldr	r2, [r3, #4]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	1ad2      	subs	r2, r2, r3
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dee2:	69b8      	ldr	r0, [r7, #24]
 800dee4:	f000 f914 	bl	800e110 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dee8:	4b1d      	ldr	r3, [pc, #116]	; (800df60 <pvPortMalloc+0x188>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	4a1b      	ldr	r2, [pc, #108]	; (800df60 <pvPortMalloc+0x188>)
 800def4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800def6:	4b1a      	ldr	r3, [pc, #104]	; (800df60 <pvPortMalloc+0x188>)
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	4b1b      	ldr	r3, [pc, #108]	; (800df68 <pvPortMalloc+0x190>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	429a      	cmp	r2, r3
 800df00:	d203      	bcs.n	800df0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df02:	4b17      	ldr	r3, [pc, #92]	; (800df60 <pvPortMalloc+0x188>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a18      	ldr	r2, [pc, #96]	; (800df68 <pvPortMalloc+0x190>)
 800df08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	685a      	ldr	r2, [r3, #4]
 800df0e:	4b13      	ldr	r3, [pc, #76]	; (800df5c <pvPortMalloc+0x184>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	431a      	orrs	r2, r3
 800df14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1a:	2200      	movs	r2, #0
 800df1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df1e:	4b13      	ldr	r3, [pc, #76]	; (800df6c <pvPortMalloc+0x194>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	3301      	adds	r3, #1
 800df24:	4a11      	ldr	r2, [pc, #68]	; (800df6c <pvPortMalloc+0x194>)
 800df26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df28:	f7fe fa36 	bl	800c398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	f003 0307 	and.w	r3, r3, #7
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00a      	beq.n	800df4c <pvPortMalloc+0x174>
	__asm volatile
 800df36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3a:	f383 8811 	msr	BASEPRI, r3
 800df3e:	f3bf 8f6f 	isb	sy
 800df42:	f3bf 8f4f 	dsb	sy
 800df46:	60fb      	str	r3, [r7, #12]
}
 800df48:	bf00      	nop
 800df4a:	e7fe      	b.n	800df4a <pvPortMalloc+0x172>
	return pvReturn;
 800df4c:	69fb      	ldr	r3, [r7, #28]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3728      	adds	r7, #40	; 0x28
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	20005134 	.word	0x20005134
 800df5c:	20005148 	.word	0x20005148
 800df60:	20005138 	.word	0x20005138
 800df64:	2000512c 	.word	0x2000512c
 800df68:	2000513c 	.word	0x2000513c
 800df6c:	20005140 	.word	0x20005140

0800df70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d04d      	beq.n	800e01e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df82:	2308      	movs	r3, #8
 800df84:	425b      	negs	r3, r3
 800df86:	697a      	ldr	r2, [r7, #20]
 800df88:	4413      	add	r3, r2
 800df8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	685a      	ldr	r2, [r3, #4]
 800df94:	4b24      	ldr	r3, [pc, #144]	; (800e028 <vPortFree+0xb8>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4013      	ands	r3, r2
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10a      	bne.n	800dfb4 <vPortFree+0x44>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	60fb      	str	r3, [r7, #12]
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00a      	beq.n	800dfd2 <vPortFree+0x62>
	__asm volatile
 800dfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	60bb      	str	r3, [r7, #8]
}
 800dfce:	bf00      	nop
 800dfd0:	e7fe      	b.n	800dfd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	4b14      	ldr	r3, [pc, #80]	; (800e028 <vPortFree+0xb8>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4013      	ands	r3, r2
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d01e      	beq.n	800e01e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d11a      	bne.n	800e01e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	4b0e      	ldr	r3, [pc, #56]	; (800e028 <vPortFree+0xb8>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	43db      	mvns	r3, r3
 800dff2:	401a      	ands	r2, r3
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dff8:	f7fe f9c0 	bl	800c37c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	685a      	ldr	r2, [r3, #4]
 800e000:	4b0a      	ldr	r3, [pc, #40]	; (800e02c <vPortFree+0xbc>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4413      	add	r3, r2
 800e006:	4a09      	ldr	r2, [pc, #36]	; (800e02c <vPortFree+0xbc>)
 800e008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e00a:	6938      	ldr	r0, [r7, #16]
 800e00c:	f000 f880 	bl	800e110 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <vPortFree+0xc0>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3301      	adds	r3, #1
 800e016:	4a06      	ldr	r2, [pc, #24]	; (800e030 <vPortFree+0xc0>)
 800e018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e01a:	f7fe f9bd 	bl	800c398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e01e:	bf00      	nop
 800e020:	3718      	adds	r7, #24
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	20005148 	.word	0x20005148
 800e02c:	20005138 	.word	0x20005138
 800e030:	20005144 	.word	0x20005144

0800e034 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800e034:	b480      	push	{r7}
 800e036:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800e038:	4b03      	ldr	r3, [pc, #12]	; (800e048 <xPortGetFreeHeapSize+0x14>)
 800e03a:	681b      	ldr	r3, [r3, #0]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	20005138 	.word	0x20005138

0800e04c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e052:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e056:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e058:	4b27      	ldr	r3, [pc, #156]	; (800e0f8 <prvHeapInit+0xac>)
 800e05a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f003 0307 	and.w	r3, r3, #7
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00c      	beq.n	800e080 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3307      	adds	r3, #7
 800e06a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f023 0307 	bic.w	r3, r3, #7
 800e072:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	4a1f      	ldr	r2, [pc, #124]	; (800e0f8 <prvHeapInit+0xac>)
 800e07c:	4413      	add	r3, r2
 800e07e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e084:	4a1d      	ldr	r2, [pc, #116]	; (800e0fc <prvHeapInit+0xb0>)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e08a:	4b1c      	ldr	r3, [pc, #112]	; (800e0fc <prvHeapInit+0xb0>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	4413      	add	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e098:	2208      	movs	r2, #8
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1a9b      	subs	r3, r3, r2
 800e09e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f023 0307 	bic.w	r3, r3, #7
 800e0a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	4a15      	ldr	r2, [pc, #84]	; (800e100 <prvHeapInit+0xb4>)
 800e0ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0ae:	4b14      	ldr	r3, [pc, #80]	; (800e100 <prvHeapInit+0xb4>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <prvHeapInit+0xb4>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	1ad2      	subs	r2, r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0cc:	4b0c      	ldr	r3, [pc, #48]	; (800e100 <prvHeapInit+0xb4>)
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	4a0a      	ldr	r2, [pc, #40]	; (800e104 <prvHeapInit+0xb8>)
 800e0da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	4a09      	ldr	r2, [pc, #36]	; (800e108 <prvHeapInit+0xbc>)
 800e0e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0e4:	4b09      	ldr	r3, [pc, #36]	; (800e10c <prvHeapInit+0xc0>)
 800e0e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e0ea:	601a      	str	r2, [r3, #0]
}
 800e0ec:	bf00      	nop
 800e0ee:	3714      	adds	r7, #20
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	2000152c 	.word	0x2000152c
 800e0fc:	2000512c 	.word	0x2000512c
 800e100:	20005134 	.word	0x20005134
 800e104:	2000513c 	.word	0x2000513c
 800e108:	20005138 	.word	0x20005138
 800e10c:	20005148 	.word	0x20005148

0800e110 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e118:	4b28      	ldr	r3, [pc, #160]	; (800e1bc <prvInsertBlockIntoFreeList+0xac>)
 800e11a:	60fb      	str	r3, [r7, #12]
 800e11c:	e002      	b.n	800e124 <prvInsertBlockIntoFreeList+0x14>
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d8f7      	bhi.n	800e11e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	4413      	add	r3, r2
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d108      	bne.n	800e152 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	441a      	add	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	441a      	add	r2, r3
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	429a      	cmp	r2, r3
 800e164:	d118      	bne.n	800e198 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	4b15      	ldr	r3, [pc, #84]	; (800e1c0 <prvInsertBlockIntoFreeList+0xb0>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d00d      	beq.n	800e18e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	441a      	add	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	e008      	b.n	800e1a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e18e:	4b0c      	ldr	r3, [pc, #48]	; (800e1c0 <prvInsertBlockIntoFreeList+0xb0>)
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	e003      	b.n	800e1a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d002      	beq.n	800e1ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1ae:	bf00      	nop
 800e1b0:	3714      	adds	r7, #20
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	2000512c 	.word	0x2000512c
 800e1c0:	20005134 	.word	0x20005134

0800e1c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	4912      	ldr	r1, [pc, #72]	; (800e214 <MX_USB_DEVICE_Init+0x50>)
 800e1cc:	4812      	ldr	r0, [pc, #72]	; (800e218 <MX_USB_DEVICE_Init+0x54>)
 800e1ce:	f7fb fba7 	bl	8009920 <USBD_Init>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e1d8:	f7f5 f9ec 	bl	80035b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e1dc:	490f      	ldr	r1, [pc, #60]	; (800e21c <MX_USB_DEVICE_Init+0x58>)
 800e1de:	480e      	ldr	r0, [pc, #56]	; (800e218 <MX_USB_DEVICE_Init+0x54>)
 800e1e0:	f7fb fbce 	bl	8009980 <USBD_RegisterClass>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e1ea:	f7f5 f9e3 	bl	80035b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e1ee:	490c      	ldr	r1, [pc, #48]	; (800e220 <MX_USB_DEVICE_Init+0x5c>)
 800e1f0:	4809      	ldr	r0, [pc, #36]	; (800e218 <MX_USB_DEVICE_Init+0x54>)
 800e1f2:	f7fb faef 	bl	80097d4 <USBD_CDC_RegisterInterface>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e1fc:	f7f5 f9da 	bl	80035b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e200:	4805      	ldr	r0, [pc, #20]	; (800e218 <MX_USB_DEVICE_Init+0x54>)
 800e202:	f7fb fbe4 	bl	80099ce <USBD_Start>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e20c:	f7f5 f9d2 	bl	80035b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e210:	bf00      	nop
 800e212:	bd80      	pop	{r7, pc}
 800e214:	20000134 	.word	0x20000134
 800e218:	2000c67c 	.word	0x2000c67c
 800e21c:	20000018 	.word	0x20000018
 800e220:	20000120 	.word	0x20000120

0800e224 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e228:	2200      	movs	r2, #0
 800e22a:	4905      	ldr	r1, [pc, #20]	; (800e240 <CDC_Init_FS+0x1c>)
 800e22c:	4805      	ldr	r0, [pc, #20]	; (800e244 <CDC_Init_FS+0x20>)
 800e22e:	f7fb fae6 	bl	80097fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e232:	4905      	ldr	r1, [pc, #20]	; (800e248 <CDC_Init_FS+0x24>)
 800e234:	4803      	ldr	r0, [pc, #12]	; (800e244 <CDC_Init_FS+0x20>)
 800e236:	f7fb fb00 	bl	800983a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e23a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	2000d14c 	.word	0x2000d14c
 800e244:	2000c67c 	.word	0x2000c67c
 800e248:	2000c94c 	.word	0x2000c94c

0800e24c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e24c:	b480      	push	{r7}
 800e24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e250:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e252:	4618      	mov	r0, r3
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b083      	sub	sp, #12
 800e260:	af00      	add	r7, sp, #0
 800e262:	4603      	mov	r3, r0
 800e264:	6039      	str	r1, [r7, #0]
 800e266:	71fb      	strb	r3, [r7, #7]
 800e268:	4613      	mov	r3, r2
 800e26a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e26c:	79fb      	ldrb	r3, [r7, #7]
 800e26e:	2b23      	cmp	r3, #35	; 0x23
 800e270:	d84a      	bhi.n	800e308 <CDC_Control_FS+0xac>
 800e272:	a201      	add	r2, pc, #4	; (adr r2, 800e278 <CDC_Control_FS+0x1c>)
 800e274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e278:	0800e309 	.word	0x0800e309
 800e27c:	0800e309 	.word	0x0800e309
 800e280:	0800e309 	.word	0x0800e309
 800e284:	0800e309 	.word	0x0800e309
 800e288:	0800e309 	.word	0x0800e309
 800e28c:	0800e309 	.word	0x0800e309
 800e290:	0800e309 	.word	0x0800e309
 800e294:	0800e309 	.word	0x0800e309
 800e298:	0800e309 	.word	0x0800e309
 800e29c:	0800e309 	.word	0x0800e309
 800e2a0:	0800e309 	.word	0x0800e309
 800e2a4:	0800e309 	.word	0x0800e309
 800e2a8:	0800e309 	.word	0x0800e309
 800e2ac:	0800e309 	.word	0x0800e309
 800e2b0:	0800e309 	.word	0x0800e309
 800e2b4:	0800e309 	.word	0x0800e309
 800e2b8:	0800e309 	.word	0x0800e309
 800e2bc:	0800e309 	.word	0x0800e309
 800e2c0:	0800e309 	.word	0x0800e309
 800e2c4:	0800e309 	.word	0x0800e309
 800e2c8:	0800e309 	.word	0x0800e309
 800e2cc:	0800e309 	.word	0x0800e309
 800e2d0:	0800e309 	.word	0x0800e309
 800e2d4:	0800e309 	.word	0x0800e309
 800e2d8:	0800e309 	.word	0x0800e309
 800e2dc:	0800e309 	.word	0x0800e309
 800e2e0:	0800e309 	.word	0x0800e309
 800e2e4:	0800e309 	.word	0x0800e309
 800e2e8:	0800e309 	.word	0x0800e309
 800e2ec:	0800e309 	.word	0x0800e309
 800e2f0:	0800e309 	.word	0x0800e309
 800e2f4:	0800e309 	.word	0x0800e309
 800e2f8:	0800e309 	.word	0x0800e309
 800e2fc:	0800e309 	.word	0x0800e309
 800e300:	0800e309 	.word	0x0800e309
 800e304:	0800e309 	.word	0x0800e309
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e308:	bf00      	nop
  }

  return (USBD_OK);
 800e30a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e322:	6879      	ldr	r1, [r7, #4]
 800e324:	4805      	ldr	r0, [pc, #20]	; (800e33c <CDC_Receive_FS+0x24>)
 800e326:	f7fb fa88 	bl	800983a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e32a:	4804      	ldr	r0, [pc, #16]	; (800e33c <CDC_Receive_FS+0x24>)
 800e32c:	f7fb face 	bl	80098cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e330:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e332:	4618      	mov	r0, r3
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	2000c67c 	.word	0x2000c67c

0800e340 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	460b      	mov	r3, r1
 800e34a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e350:	4b0d      	ldr	r3, [pc, #52]	; (800e388 <CDC_Transmit_FS+0x48>)
 800e352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e356:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e362:	2301      	movs	r3, #1
 800e364:	e00b      	b.n	800e37e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e366:	887b      	ldrh	r3, [r7, #2]
 800e368:	461a      	mov	r2, r3
 800e36a:	6879      	ldr	r1, [r7, #4]
 800e36c:	4806      	ldr	r0, [pc, #24]	; (800e388 <CDC_Transmit_FS+0x48>)
 800e36e:	f7fb fa46 	bl	80097fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e372:	4805      	ldr	r0, [pc, #20]	; (800e388 <CDC_Transmit_FS+0x48>)
 800e374:	f7fb fa7a 	bl	800986c <USBD_CDC_TransmitPacket>
 800e378:	4603      	mov	r3, r0
 800e37a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	2000c67c 	.word	0x2000c67c

0800e38c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e38c:	b480      	push	{r7}
 800e38e:	b087      	sub	sp, #28
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	4613      	mov	r3, r2
 800e398:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e39a:	2300      	movs	r3, #0
 800e39c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e39e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	371c      	adds	r7, #28
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
	...

0800e3b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	6039      	str	r1, [r7, #0]
 800e3ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2212      	movs	r2, #18
 800e3c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e3c2:	4b03      	ldr	r3, [pc, #12]	; (800e3d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	20000150 	.word	0x20000150

0800e3d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	6039      	str	r1, [r7, #0]
 800e3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2204      	movs	r2, #4
 800e3e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e3e6:	4b03      	ldr	r3, [pc, #12]	; (800e3f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	20000164 	.word	0x20000164

0800e3f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	6039      	str	r1, [r7, #0]
 800e402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e404:	79fb      	ldrb	r3, [r7, #7]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d105      	bne.n	800e416 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e40a:	683a      	ldr	r2, [r7, #0]
 800e40c:	4907      	ldr	r1, [pc, #28]	; (800e42c <USBD_FS_ProductStrDescriptor+0x34>)
 800e40e:	4808      	ldr	r0, [pc, #32]	; (800e430 <USBD_FS_ProductStrDescriptor+0x38>)
 800e410:	f7fc fb0f 	bl	800aa32 <USBD_GetString>
 800e414:	e004      	b.n	800e420 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e416:	683a      	ldr	r2, [r7, #0]
 800e418:	4904      	ldr	r1, [pc, #16]	; (800e42c <USBD_FS_ProductStrDescriptor+0x34>)
 800e41a:	4805      	ldr	r0, [pc, #20]	; (800e430 <USBD_FS_ProductStrDescriptor+0x38>)
 800e41c:	f7fc fb09 	bl	800aa32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e420:	4b02      	ldr	r3, [pc, #8]	; (800e42c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	2000d94c 	.word	0x2000d94c
 800e430:	08011d68 	.word	0x08011d68

0800e434 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	6039      	str	r1, [r7, #0]
 800e43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e440:	683a      	ldr	r2, [r7, #0]
 800e442:	4904      	ldr	r1, [pc, #16]	; (800e454 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e444:	4804      	ldr	r0, [pc, #16]	; (800e458 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e446:	f7fc faf4 	bl	800aa32 <USBD_GetString>
  return USBD_StrDesc;
 800e44a:	4b02      	ldr	r3, [pc, #8]	; (800e454 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	2000d94c 	.word	0x2000d94c
 800e458:	08011d80 	.word	0x08011d80

0800e45c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	6039      	str	r1, [r7, #0]
 800e466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	221a      	movs	r2, #26
 800e46c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e46e:	f000 f843 	bl	800e4f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e472:	4b02      	ldr	r3, [pc, #8]	; (800e47c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e474:	4618      	mov	r0, r3
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	20000168 	.word	0x20000168

0800e480 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	4603      	mov	r3, r0
 800e488:	6039      	str	r1, [r7, #0]
 800e48a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e48c:	79fb      	ldrb	r3, [r7, #7]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d105      	bne.n	800e49e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e492:	683a      	ldr	r2, [r7, #0]
 800e494:	4907      	ldr	r1, [pc, #28]	; (800e4b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e496:	4808      	ldr	r0, [pc, #32]	; (800e4b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e498:	f7fc facb 	bl	800aa32 <USBD_GetString>
 800e49c:	e004      	b.n	800e4a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	4904      	ldr	r1, [pc, #16]	; (800e4b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e4a2:	4805      	ldr	r0, [pc, #20]	; (800e4b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e4a4:	f7fc fac5 	bl	800aa32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4a8:	4b02      	ldr	r3, [pc, #8]	; (800e4b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	2000d94c 	.word	0x2000d94c
 800e4b8:	08011d94 	.word	0x08011d94

0800e4bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	6039      	str	r1, [r7, #0]
 800e4c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4c8:	79fb      	ldrb	r3, [r7, #7]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d105      	bne.n	800e4da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4ce:	683a      	ldr	r2, [r7, #0]
 800e4d0:	4907      	ldr	r1, [pc, #28]	; (800e4f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4d2:	4808      	ldr	r0, [pc, #32]	; (800e4f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4d4:	f7fc faad 	bl	800aa32 <USBD_GetString>
 800e4d8:	e004      	b.n	800e4e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4da:	683a      	ldr	r2, [r7, #0]
 800e4dc:	4904      	ldr	r1, [pc, #16]	; (800e4f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4de:	4805      	ldr	r0, [pc, #20]	; (800e4f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4e0:	f7fc faa7 	bl	800aa32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4e4:	4b02      	ldr	r3, [pc, #8]	; (800e4f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	2000d94c 	.word	0x2000d94c
 800e4f4:	08011da0 	.word	0x08011da0

0800e4f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e4fe:	4b0f      	ldr	r3, [pc, #60]	; (800e53c <Get_SerialNum+0x44>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e504:	4b0e      	ldr	r3, [pc, #56]	; (800e540 <Get_SerialNum+0x48>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e50a:	4b0e      	ldr	r3, [pc, #56]	; (800e544 <Get_SerialNum+0x4c>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4413      	add	r3, r2
 800e516:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d009      	beq.n	800e532 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e51e:	2208      	movs	r2, #8
 800e520:	4909      	ldr	r1, [pc, #36]	; (800e548 <Get_SerialNum+0x50>)
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f000 f814 	bl	800e550 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e528:	2204      	movs	r2, #4
 800e52a:	4908      	ldr	r1, [pc, #32]	; (800e54c <Get_SerialNum+0x54>)
 800e52c:	68b8      	ldr	r0, [r7, #8]
 800e52e:	f000 f80f 	bl	800e550 <IntToUnicode>
  }
}
 800e532:	bf00      	nop
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	1fff7a10 	.word	0x1fff7a10
 800e540:	1fff7a14 	.word	0x1fff7a14
 800e544:	1fff7a18 	.word	0x1fff7a18
 800e548:	2000016a 	.word	0x2000016a
 800e54c:	2000017a 	.word	0x2000017a

0800e550 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e550:	b480      	push	{r7}
 800e552:	b087      	sub	sp, #28
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	4613      	mov	r3, r2
 800e55c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e55e:	2300      	movs	r3, #0
 800e560:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e562:	2300      	movs	r3, #0
 800e564:	75fb      	strb	r3, [r7, #23]
 800e566:	e027      	b.n	800e5b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	0f1b      	lsrs	r3, r3, #28
 800e56c:	2b09      	cmp	r3, #9
 800e56e:	d80b      	bhi.n	800e588 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	0f1b      	lsrs	r3, r3, #28
 800e574:	b2da      	uxtb	r2, r3
 800e576:	7dfb      	ldrb	r3, [r7, #23]
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	4619      	mov	r1, r3
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	440b      	add	r3, r1
 800e580:	3230      	adds	r2, #48	; 0x30
 800e582:	b2d2      	uxtb	r2, r2
 800e584:	701a      	strb	r2, [r3, #0]
 800e586:	e00a      	b.n	800e59e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	0f1b      	lsrs	r3, r3, #28
 800e58c:	b2da      	uxtb	r2, r3
 800e58e:	7dfb      	ldrb	r3, [r7, #23]
 800e590:	005b      	lsls	r3, r3, #1
 800e592:	4619      	mov	r1, r3
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	440b      	add	r3, r1
 800e598:	3237      	adds	r2, #55	; 0x37
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	011b      	lsls	r3, r3, #4
 800e5a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e5a4:	7dfb      	ldrb	r3, [r7, #23]
 800e5a6:	005b      	lsls	r3, r3, #1
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	68ba      	ldr	r2, [r7, #8]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e5b2:	7dfb      	ldrb	r3, [r7, #23]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	75fb      	strb	r3, [r7, #23]
 800e5b8:	7dfa      	ldrb	r2, [r7, #23]
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d3d3      	bcc.n	800e568 <IntToUnicode+0x18>
  }
}
 800e5c0:	bf00      	nop
 800e5c2:	bf00      	nop
 800e5c4:	371c      	adds	r7, #28
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr
	...

0800e5d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08a      	sub	sp, #40	; 0x28
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5d8:	f107 0314 	add.w	r3, r7, #20
 800e5dc:	2200      	movs	r2, #0
 800e5de:	601a      	str	r2, [r3, #0]
 800e5e0:	605a      	str	r2, [r3, #4]
 800e5e2:	609a      	str	r2, [r3, #8]
 800e5e4:	60da      	str	r2, [r3, #12]
 800e5e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e5f0:	d147      	bne.n	800e682 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	613b      	str	r3, [r7, #16]
 800e5f6:	4b25      	ldr	r3, [pc, #148]	; (800e68c <HAL_PCD_MspInit+0xbc>)
 800e5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5fa:	4a24      	ldr	r2, [pc, #144]	; (800e68c <HAL_PCD_MspInit+0xbc>)
 800e5fc:	f043 0301 	orr.w	r3, r3, #1
 800e600:	6313      	str	r3, [r2, #48]	; 0x30
 800e602:	4b22      	ldr	r3, [pc, #136]	; (800e68c <HAL_PCD_MspInit+0xbc>)
 800e604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e606:	f003 0301 	and.w	r3, r3, #1
 800e60a:	613b      	str	r3, [r7, #16]
 800e60c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e60e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e614:	2300      	movs	r3, #0
 800e616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e618:	2300      	movs	r3, #0
 800e61a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e61c:	f107 0314 	add.w	r3, r7, #20
 800e620:	4619      	mov	r1, r3
 800e622:	481b      	ldr	r0, [pc, #108]	; (800e690 <HAL_PCD_MspInit+0xc0>)
 800e624:	f7f5 fbaa 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e628:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e62c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e62e:	2302      	movs	r3, #2
 800e630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e632:	2300      	movs	r3, #0
 800e634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e636:	2300      	movs	r3, #0
 800e638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e63a:	230a      	movs	r3, #10
 800e63c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e63e:	f107 0314 	add.w	r3, r7, #20
 800e642:	4619      	mov	r1, r3
 800e644:	4812      	ldr	r0, [pc, #72]	; (800e690 <HAL_PCD_MspInit+0xc0>)
 800e646:	f7f5 fb99 	bl	8003d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e64a:	4b10      	ldr	r3, [pc, #64]	; (800e68c <HAL_PCD_MspInit+0xbc>)
 800e64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e64e:	4a0f      	ldr	r2, [pc, #60]	; (800e68c <HAL_PCD_MspInit+0xbc>)
 800e650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e654:	6353      	str	r3, [r2, #52]	; 0x34
 800e656:	2300      	movs	r3, #0
 800e658:	60fb      	str	r3, [r7, #12]
 800e65a:	4b0c      	ldr	r3, [pc, #48]	; (800e68c <HAL_PCD_MspInit+0xbc>)
 800e65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e65e:	4a0b      	ldr	r2, [pc, #44]	; (800e68c <HAL_PCD_MspInit+0xbc>)
 800e660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e664:	6453      	str	r3, [r2, #68]	; 0x44
 800e666:	4b09      	ldr	r3, [pc, #36]	; (800e68c <HAL_PCD_MspInit+0xbc>)
 800e668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e66e:	60fb      	str	r3, [r7, #12]
 800e670:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e672:	2200      	movs	r2, #0
 800e674:	2105      	movs	r1, #5
 800e676:	2043      	movs	r0, #67	; 0x43
 800e678:	f7f5 fb56 	bl	8003d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e67c:	2043      	movs	r0, #67	; 0x43
 800e67e:	f7f5 fb6f 	bl	8003d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e682:	bf00      	nop
 800e684:	3728      	adds	r7, #40	; 0x28
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	40023800 	.word	0x40023800
 800e690:	40020000 	.word	0x40020000

0800e694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	4610      	mov	r0, r2
 800e6ac:	f7fb f9da 	bl	8009a64 <USBD_LL_SetupStage>
}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e6ca:	78fa      	ldrb	r2, [r7, #3]
 800e6cc:	6879      	ldr	r1, [r7, #4]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	00db      	lsls	r3, r3, #3
 800e6d2:	1a9b      	subs	r3, r3, r2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	440b      	add	r3, r1
 800e6d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	78fb      	ldrb	r3, [r7, #3]
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	f7fb fa14 	bl	8009b0e <USBD_LL_DataOutStage>
}
 800e6e6:	bf00      	nop
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b082      	sub	sp, #8
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e700:	78fa      	ldrb	r2, [r7, #3]
 800e702:	6879      	ldr	r1, [r7, #4]
 800e704:	4613      	mov	r3, r2
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	1a9b      	subs	r3, r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	440b      	add	r3, r1
 800e70e:	3348      	adds	r3, #72	; 0x48
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	78fb      	ldrb	r3, [r7, #3]
 800e714:	4619      	mov	r1, r3
 800e716:	f7fb fa5d 	bl	8009bd4 <USBD_LL_DataInStage>
}
 800e71a:	bf00      	nop
 800e71c:	3708      	adds	r7, #8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b082      	sub	sp, #8
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e730:	4618      	mov	r0, r3
 800e732:	f7fb fb71 	bl	8009e18 <USBD_LL_SOF>
}
 800e736:	bf00      	nop
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b084      	sub	sp, #16
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e746:	2301      	movs	r3, #1
 800e748:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d102      	bne.n	800e758 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e752:	2300      	movs	r3, #0
 800e754:	73fb      	strb	r3, [r7, #15]
 800e756:	e008      	b.n	800e76a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	d102      	bne.n	800e766 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e760:	2301      	movs	r3, #1
 800e762:	73fb      	strb	r3, [r7, #15]
 800e764:	e001      	b.n	800e76a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e766:	f7f4 ff25 	bl	80035b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e770:	7bfa      	ldrb	r2, [r7, #15]
 800e772:	4611      	mov	r1, r2
 800e774:	4618      	mov	r0, r3
 800e776:	f7fb fb11 	bl	8009d9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e780:	4618      	mov	r0, r3
 800e782:	f7fb fabd 	bl	8009d00 <USBD_LL_Reset>
}
 800e786:	bf00      	nop
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
	...

0800e790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fb fb0c 	bl	8009dbc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	6812      	ldr	r2, [r2, #0]
 800e7b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e7b6:	f043 0301 	orr.w	r3, r3, #1
 800e7ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a1b      	ldr	r3, [r3, #32]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d005      	beq.n	800e7d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e7c4:	4b04      	ldr	r3, [pc, #16]	; (800e7d8 <HAL_PCD_SuspendCallback+0x48>)
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	4a03      	ldr	r2, [pc, #12]	; (800e7d8 <HAL_PCD_SuspendCallback+0x48>)
 800e7ca:	f043 0306 	orr.w	r3, r3, #6
 800e7ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	e000ed00 	.word	0xe000ed00

0800e7dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fb fafc 	bl	8009de8 <USBD_LL_Resume>
}
 800e7f0:	bf00      	nop
 800e7f2:	3708      	adds	r7, #8
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	460b      	mov	r3, r1
 800e802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e80a:	78fa      	ldrb	r2, [r7, #3]
 800e80c:	4611      	mov	r1, r2
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fb fb4a 	bl	8009ea8 <USBD_LL_IsoOUTIncomplete>
}
 800e814:	bf00      	nop
 800e816:	3708      	adds	r7, #8
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	460b      	mov	r3, r1
 800e826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e82e:	78fa      	ldrb	r2, [r7, #3]
 800e830:	4611      	mov	r1, r2
 800e832:	4618      	mov	r0, r3
 800e834:	f7fb fb12 	bl	8009e5c <USBD_LL_IsoINIncomplete>
}
 800e838:	bf00      	nop
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e84e:	4618      	mov	r0, r3
 800e850:	f7fb fb50 	bl	8009ef4 <USBD_LL_DevConnected>
}
 800e854:	bf00      	nop
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fb fb4d 	bl	8009f0a <USBD_LL_DevDisconnected>
}
 800e870:	bf00      	nop
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d13c      	bne.n	800e902 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e888:	4a20      	ldr	r2, [pc, #128]	; (800e90c <USBD_LL_Init+0x94>)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	4a1e      	ldr	r2, [pc, #120]	; (800e90c <USBD_LL_Init+0x94>)
 800e894:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e898:	4b1c      	ldr	r3, [pc, #112]	; (800e90c <USBD_LL_Init+0x94>)
 800e89a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e89e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e8a0:	4b1a      	ldr	r3, [pc, #104]	; (800e90c <USBD_LL_Init+0x94>)
 800e8a2:	2204      	movs	r2, #4
 800e8a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e8a6:	4b19      	ldr	r3, [pc, #100]	; (800e90c <USBD_LL_Init+0x94>)
 800e8a8:	2202      	movs	r2, #2
 800e8aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e8ac:	4b17      	ldr	r3, [pc, #92]	; (800e90c <USBD_LL_Init+0x94>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e8b2:	4b16      	ldr	r3, [pc, #88]	; (800e90c <USBD_LL_Init+0x94>)
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e8b8:	4b14      	ldr	r3, [pc, #80]	; (800e90c <USBD_LL_Init+0x94>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e8be:	4b13      	ldr	r3, [pc, #76]	; (800e90c <USBD_LL_Init+0x94>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e8c4:	4b11      	ldr	r3, [pc, #68]	; (800e90c <USBD_LL_Init+0x94>)
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e8ca:	4b10      	ldr	r3, [pc, #64]	; (800e90c <USBD_LL_Init+0x94>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e8d0:	4b0e      	ldr	r3, [pc, #56]	; (800e90c <USBD_LL_Init+0x94>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e8d6:	480d      	ldr	r0, [pc, #52]	; (800e90c <USBD_LL_Init+0x94>)
 800e8d8:	f7f6 fea9 	bl	800562e <HAL_PCD_Init>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d001      	beq.n	800e8e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e8e2:	f7f4 fe67 	bl	80035b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e8e6:	2180      	movs	r1, #128	; 0x80
 800e8e8:	4808      	ldr	r0, [pc, #32]	; (800e90c <USBD_LL_Init+0x94>)
 800e8ea:	f7f8 f806 	bl	80068fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e8ee:	2240      	movs	r2, #64	; 0x40
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	4806      	ldr	r0, [pc, #24]	; (800e90c <USBD_LL_Init+0x94>)
 800e8f4:	f7f7 ffba 	bl	800686c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e8f8:	2280      	movs	r2, #128	; 0x80
 800e8fa:	2101      	movs	r1, #1
 800e8fc:	4803      	ldr	r0, [pc, #12]	; (800e90c <USBD_LL_Init+0x94>)
 800e8fe:	f7f7 ffb5 	bl	800686c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	2000db4c 	.word	0x2000db4c

0800e910 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e918:	2300      	movs	r3, #0
 800e91a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e926:	4618      	mov	r0, r3
 800e928:	f7f6 ff9e 	bl	8005868 <HAL_PCD_Start>
 800e92c:	4603      	mov	r3, r0
 800e92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e930:	7bfb      	ldrb	r3, [r7, #15]
 800e932:	4618      	mov	r0, r3
 800e934:	f000 f942 	bl	800ebbc <USBD_Get_USB_Status>
 800e938:	4603      	mov	r3, r0
 800e93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3710      	adds	r7, #16
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b084      	sub	sp, #16
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	4608      	mov	r0, r1
 800e950:	4611      	mov	r1, r2
 800e952:	461a      	mov	r2, r3
 800e954:	4603      	mov	r3, r0
 800e956:	70fb      	strb	r3, [r7, #3]
 800e958:	460b      	mov	r3, r1
 800e95a:	70bb      	strb	r3, [r7, #2]
 800e95c:	4613      	mov	r3, r2
 800e95e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e960:	2300      	movs	r3, #0
 800e962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e964:	2300      	movs	r3, #0
 800e966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e96e:	78bb      	ldrb	r3, [r7, #2]
 800e970:	883a      	ldrh	r2, [r7, #0]
 800e972:	78f9      	ldrb	r1, [r7, #3]
 800e974:	f7f7 fb82 	bl	800607c <HAL_PCD_EP_Open>
 800e978:	4603      	mov	r3, r0
 800e97a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e97c:	7bfb      	ldrb	r3, [r7, #15]
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 f91c 	bl	800ebbc <USBD_Get_USB_Status>
 800e984:	4603      	mov	r3, r0
 800e986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e988:	7bbb      	ldrb	r3, [r7, #14]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e992:	b580      	push	{r7, lr}
 800e994:	b084      	sub	sp, #16
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
 800e99a:	460b      	mov	r3, r1
 800e99c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9ac:	78fa      	ldrb	r2, [r7, #3]
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7f7 fbcb 	bl	800614c <HAL_PCD_EP_Close>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ba:	7bfb      	ldrb	r3, [r7, #15]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 f8fd 	bl	800ebbc <USBD_Get_USB_Status>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9ea:	78fa      	ldrb	r2, [r7, #3]
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7f7 fca3 	bl	800633a <HAL_PCD_EP_SetStall>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9f8:	7bfb      	ldrb	r3, [r7, #15]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 f8de 	bl	800ebbc <USBD_Get_USB_Status>
 800ea00:	4603      	mov	r3, r0
 800ea02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b084      	sub	sp, #16
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea28:	78fa      	ldrb	r2, [r7, #3]
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7f7 fce8 	bl	8006402 <HAL_PCD_EP_ClrStall>
 800ea32:	4603      	mov	r3, r0
 800ea34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea36:	7bfb      	ldrb	r3, [r7, #15]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f000 f8bf 	bl	800ebbc <USBD_Get_USB_Status>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3710      	adds	r7, #16
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ea60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	da0b      	bge.n	800ea80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ea68:	78fb      	ldrb	r3, [r7, #3]
 800ea6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea6e:	68f9      	ldr	r1, [r7, #12]
 800ea70:	4613      	mov	r3, r2
 800ea72:	00db      	lsls	r3, r3, #3
 800ea74:	1a9b      	subs	r3, r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	440b      	add	r3, r1
 800ea7a:	333e      	adds	r3, #62	; 0x3e
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	e00b      	b.n	800ea98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ea80:	78fb      	ldrb	r3, [r7, #3]
 800ea82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea86:	68f9      	ldr	r1, [r7, #12]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	00db      	lsls	r3, r3, #3
 800ea8c:	1a9b      	subs	r3, r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	440b      	add	r3, r1
 800ea92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3714      	adds	r7, #20
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	460b      	mov	r3, r1
 800eaae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eab0:	2300      	movs	r3, #0
 800eab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eab4:	2300      	movs	r3, #0
 800eab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eabe:	78fa      	ldrb	r2, [r7, #3]
 800eac0:	4611      	mov	r1, r2
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7f7 fab5 	bl	8006032 <HAL_PCD_SetAddress>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eacc:	7bfb      	ldrb	r3, [r7, #15]
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 f874 	bl	800ebbc <USBD_Get_USB_Status>
 800ead4:	4603      	mov	r3, r0
 800ead6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ead8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}

0800eae2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b086      	sub	sp, #24
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	60f8      	str	r0, [r7, #12]
 800eaea:	607a      	str	r2, [r7, #4]
 800eaec:	603b      	str	r3, [r7, #0]
 800eaee:	460b      	mov	r3, r1
 800eaf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb00:	7af9      	ldrb	r1, [r7, #11]
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	f7f7 fbce 	bl	80062a6 <HAL_PCD_EP_Transmit>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	4618      	mov	r0, r3
 800eb12:	f000 f853 	bl	800ebbc <USBD_Get_USB_Status>
 800eb16:	4603      	mov	r3, r0
 800eb18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	607a      	str	r2, [r7, #4]
 800eb2e:	603b      	str	r3, [r7, #0]
 800eb30:	460b      	mov	r3, r1
 800eb32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb34:	2300      	movs	r3, #0
 800eb36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb42:	7af9      	ldrb	r1, [r7, #11]
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	f7f7 fb4a 	bl	80061e0 <HAL_PCD_EP_Receive>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb50:	7dfb      	ldrb	r3, [r7, #23]
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 f832 	bl	800ebbc <USBD_Get_USB_Status>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3718      	adds	r7, #24
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b082      	sub	sp, #8
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	460b      	mov	r3, r1
 800eb70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb78:	78fa      	ldrb	r2, [r7, #3]
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7f7 fb7a 	bl	8006276 <HAL_PCD_EP_GetRxCount>
 800eb82:	4603      	mov	r3, r0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eb94:	4b03      	ldr	r3, [pc, #12]	; (800eba4 <USBD_static_malloc+0x18>)
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	2000514c 	.word	0x2000514c

0800eba8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]

}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ebca:	79fb      	ldrb	r3, [r7, #7]
 800ebcc:	2b03      	cmp	r3, #3
 800ebce:	d817      	bhi.n	800ec00 <USBD_Get_USB_Status+0x44>
 800ebd0:	a201      	add	r2, pc, #4	; (adr r2, 800ebd8 <USBD_Get_USB_Status+0x1c>)
 800ebd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd6:	bf00      	nop
 800ebd8:	0800ebe9 	.word	0x0800ebe9
 800ebdc:	0800ebef 	.word	0x0800ebef
 800ebe0:	0800ebf5 	.word	0x0800ebf5
 800ebe4:	0800ebfb 	.word	0x0800ebfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73fb      	strb	r3, [r7, #15]
    break;
 800ebec:	e00b      	b.n	800ec06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebee:	2303      	movs	r3, #3
 800ebf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf2:	e008      	b.n	800ec06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf8:	e005      	b.n	800ec06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebfa:	2303      	movs	r3, #3
 800ebfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ebfe:	e002      	b.n	800ec06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ec00:	2303      	movs	r3, #3
 800ec02:	73fb      	strb	r3, [r7, #15]
    break;
 800ec04:	bf00      	nop
  }
  return usb_status;
 800ec06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3714      	adds	r7, #20
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <__errno>:
 800ec14:	4b01      	ldr	r3, [pc, #4]	; (800ec1c <__errno+0x8>)
 800ec16:	6818      	ldr	r0, [r3, #0]
 800ec18:	4770      	bx	lr
 800ec1a:	bf00      	nop
 800ec1c:	20000184 	.word	0x20000184

0800ec20 <std>:
 800ec20:	2300      	movs	r3, #0
 800ec22:	b510      	push	{r4, lr}
 800ec24:	4604      	mov	r4, r0
 800ec26:	e9c0 3300 	strd	r3, r3, [r0]
 800ec2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec2e:	6083      	str	r3, [r0, #8]
 800ec30:	8181      	strh	r1, [r0, #12]
 800ec32:	6643      	str	r3, [r0, #100]	; 0x64
 800ec34:	81c2      	strh	r2, [r0, #14]
 800ec36:	6183      	str	r3, [r0, #24]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	2208      	movs	r2, #8
 800ec3c:	305c      	adds	r0, #92	; 0x5c
 800ec3e:	f000 f945 	bl	800eecc <memset>
 800ec42:	4b05      	ldr	r3, [pc, #20]	; (800ec58 <std+0x38>)
 800ec44:	6263      	str	r3, [r4, #36]	; 0x24
 800ec46:	4b05      	ldr	r3, [pc, #20]	; (800ec5c <std+0x3c>)
 800ec48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec4a:	4b05      	ldr	r3, [pc, #20]	; (800ec60 <std+0x40>)
 800ec4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec4e:	4b05      	ldr	r3, [pc, #20]	; (800ec64 <std+0x44>)
 800ec50:	6224      	str	r4, [r4, #32]
 800ec52:	6323      	str	r3, [r4, #48]	; 0x30
 800ec54:	bd10      	pop	{r4, pc}
 800ec56:	bf00      	nop
 800ec58:	0800fa39 	.word	0x0800fa39
 800ec5c:	0800fa5b 	.word	0x0800fa5b
 800ec60:	0800fa93 	.word	0x0800fa93
 800ec64:	0800fab7 	.word	0x0800fab7

0800ec68 <_cleanup_r>:
 800ec68:	4901      	ldr	r1, [pc, #4]	; (800ec70 <_cleanup_r+0x8>)
 800ec6a:	f000 b8af 	b.w	800edcc <_fwalk_reent>
 800ec6e:	bf00      	nop
 800ec70:	080109b5 	.word	0x080109b5

0800ec74 <__sfmoreglue>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	1e4a      	subs	r2, r1, #1
 800ec78:	2568      	movs	r5, #104	; 0x68
 800ec7a:	4355      	muls	r5, r2
 800ec7c:	460e      	mov	r6, r1
 800ec7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec82:	f000 f97b 	bl	800ef7c <_malloc_r>
 800ec86:	4604      	mov	r4, r0
 800ec88:	b140      	cbz	r0, 800ec9c <__sfmoreglue+0x28>
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ec90:	300c      	adds	r0, #12
 800ec92:	60a0      	str	r0, [r4, #8]
 800ec94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec98:	f000 f918 	bl	800eecc <memset>
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	bd70      	pop	{r4, r5, r6, pc}

0800eca0 <__sfp_lock_acquire>:
 800eca0:	4801      	ldr	r0, [pc, #4]	; (800eca8 <__sfp_lock_acquire+0x8>)
 800eca2:	f000 b8f2 	b.w	800ee8a <__retarget_lock_acquire_recursive>
 800eca6:	bf00      	nop
 800eca8:	2000df5c 	.word	0x2000df5c

0800ecac <__sfp_lock_release>:
 800ecac:	4801      	ldr	r0, [pc, #4]	; (800ecb4 <__sfp_lock_release+0x8>)
 800ecae:	f000 b8ed 	b.w	800ee8c <__retarget_lock_release_recursive>
 800ecb2:	bf00      	nop
 800ecb4:	2000df5c 	.word	0x2000df5c

0800ecb8 <__sinit_lock_acquire>:
 800ecb8:	4801      	ldr	r0, [pc, #4]	; (800ecc0 <__sinit_lock_acquire+0x8>)
 800ecba:	f000 b8e6 	b.w	800ee8a <__retarget_lock_acquire_recursive>
 800ecbe:	bf00      	nop
 800ecc0:	2000df57 	.word	0x2000df57

0800ecc4 <__sinit_lock_release>:
 800ecc4:	4801      	ldr	r0, [pc, #4]	; (800eccc <__sinit_lock_release+0x8>)
 800ecc6:	f000 b8e1 	b.w	800ee8c <__retarget_lock_release_recursive>
 800ecca:	bf00      	nop
 800eccc:	2000df57 	.word	0x2000df57

0800ecd0 <__sinit>:
 800ecd0:	b510      	push	{r4, lr}
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	f7ff fff0 	bl	800ecb8 <__sinit_lock_acquire>
 800ecd8:	69a3      	ldr	r3, [r4, #24]
 800ecda:	b11b      	cbz	r3, 800ece4 <__sinit+0x14>
 800ecdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ece0:	f7ff bff0 	b.w	800ecc4 <__sinit_lock_release>
 800ece4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ece8:	6523      	str	r3, [r4, #80]	; 0x50
 800ecea:	4b13      	ldr	r3, [pc, #76]	; (800ed38 <__sinit+0x68>)
 800ecec:	4a13      	ldr	r2, [pc, #76]	; (800ed3c <__sinit+0x6c>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ecf2:	42a3      	cmp	r3, r4
 800ecf4:	bf04      	itt	eq
 800ecf6:	2301      	moveq	r3, #1
 800ecf8:	61a3      	streq	r3, [r4, #24]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f000 f820 	bl	800ed40 <__sfp>
 800ed00:	6060      	str	r0, [r4, #4]
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 f81c 	bl	800ed40 <__sfp>
 800ed08:	60a0      	str	r0, [r4, #8]
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 f818 	bl	800ed40 <__sfp>
 800ed10:	2200      	movs	r2, #0
 800ed12:	60e0      	str	r0, [r4, #12]
 800ed14:	2104      	movs	r1, #4
 800ed16:	6860      	ldr	r0, [r4, #4]
 800ed18:	f7ff ff82 	bl	800ec20 <std>
 800ed1c:	68a0      	ldr	r0, [r4, #8]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	2109      	movs	r1, #9
 800ed22:	f7ff ff7d 	bl	800ec20 <std>
 800ed26:	68e0      	ldr	r0, [r4, #12]
 800ed28:	2202      	movs	r2, #2
 800ed2a:	2112      	movs	r1, #18
 800ed2c:	f7ff ff78 	bl	800ec20 <std>
 800ed30:	2301      	movs	r3, #1
 800ed32:	61a3      	str	r3, [r4, #24]
 800ed34:	e7d2      	b.n	800ecdc <__sinit+0xc>
 800ed36:	bf00      	nop
 800ed38:	08011f18 	.word	0x08011f18
 800ed3c:	0800ec69 	.word	0x0800ec69

0800ed40 <__sfp>:
 800ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed42:	4607      	mov	r7, r0
 800ed44:	f7ff ffac 	bl	800eca0 <__sfp_lock_acquire>
 800ed48:	4b1e      	ldr	r3, [pc, #120]	; (800edc4 <__sfp+0x84>)
 800ed4a:	681e      	ldr	r6, [r3, #0]
 800ed4c:	69b3      	ldr	r3, [r6, #24]
 800ed4e:	b913      	cbnz	r3, 800ed56 <__sfp+0x16>
 800ed50:	4630      	mov	r0, r6
 800ed52:	f7ff ffbd 	bl	800ecd0 <__sinit>
 800ed56:	3648      	adds	r6, #72	; 0x48
 800ed58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	d503      	bpl.n	800ed68 <__sfp+0x28>
 800ed60:	6833      	ldr	r3, [r6, #0]
 800ed62:	b30b      	cbz	r3, 800eda8 <__sfp+0x68>
 800ed64:	6836      	ldr	r6, [r6, #0]
 800ed66:	e7f7      	b.n	800ed58 <__sfp+0x18>
 800ed68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed6c:	b9d5      	cbnz	r5, 800eda4 <__sfp+0x64>
 800ed6e:	4b16      	ldr	r3, [pc, #88]	; (800edc8 <__sfp+0x88>)
 800ed70:	60e3      	str	r3, [r4, #12]
 800ed72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed76:	6665      	str	r5, [r4, #100]	; 0x64
 800ed78:	f000 f886 	bl	800ee88 <__retarget_lock_init_recursive>
 800ed7c:	f7ff ff96 	bl	800ecac <__sfp_lock_release>
 800ed80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed88:	6025      	str	r5, [r4, #0]
 800ed8a:	61a5      	str	r5, [r4, #24]
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	4629      	mov	r1, r5
 800ed90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed94:	f000 f89a 	bl	800eecc <memset>
 800ed98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eda0:	4620      	mov	r0, r4
 800eda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eda4:	3468      	adds	r4, #104	; 0x68
 800eda6:	e7d9      	b.n	800ed5c <__sfp+0x1c>
 800eda8:	2104      	movs	r1, #4
 800edaa:	4638      	mov	r0, r7
 800edac:	f7ff ff62 	bl	800ec74 <__sfmoreglue>
 800edb0:	4604      	mov	r4, r0
 800edb2:	6030      	str	r0, [r6, #0]
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d1d5      	bne.n	800ed64 <__sfp+0x24>
 800edb8:	f7ff ff78 	bl	800ecac <__sfp_lock_release>
 800edbc:	230c      	movs	r3, #12
 800edbe:	603b      	str	r3, [r7, #0]
 800edc0:	e7ee      	b.n	800eda0 <__sfp+0x60>
 800edc2:	bf00      	nop
 800edc4:	08011f18 	.word	0x08011f18
 800edc8:	ffff0001 	.word	0xffff0001

0800edcc <_fwalk_reent>:
 800edcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edd0:	4606      	mov	r6, r0
 800edd2:	4688      	mov	r8, r1
 800edd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800edd8:	2700      	movs	r7, #0
 800edda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edde:	f1b9 0901 	subs.w	r9, r9, #1
 800ede2:	d505      	bpl.n	800edf0 <_fwalk_reent+0x24>
 800ede4:	6824      	ldr	r4, [r4, #0]
 800ede6:	2c00      	cmp	r4, #0
 800ede8:	d1f7      	bne.n	800edda <_fwalk_reent+0xe>
 800edea:	4638      	mov	r0, r7
 800edec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edf0:	89ab      	ldrh	r3, [r5, #12]
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d907      	bls.n	800ee06 <_fwalk_reent+0x3a>
 800edf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edfa:	3301      	adds	r3, #1
 800edfc:	d003      	beq.n	800ee06 <_fwalk_reent+0x3a>
 800edfe:	4629      	mov	r1, r5
 800ee00:	4630      	mov	r0, r6
 800ee02:	47c0      	blx	r8
 800ee04:	4307      	orrs	r7, r0
 800ee06:	3568      	adds	r5, #104	; 0x68
 800ee08:	e7e9      	b.n	800edde <_fwalk_reent+0x12>
	...

0800ee0c <__libc_init_array>:
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	4d0d      	ldr	r5, [pc, #52]	; (800ee44 <__libc_init_array+0x38>)
 800ee10:	4c0d      	ldr	r4, [pc, #52]	; (800ee48 <__libc_init_array+0x3c>)
 800ee12:	1b64      	subs	r4, r4, r5
 800ee14:	10a4      	asrs	r4, r4, #2
 800ee16:	2600      	movs	r6, #0
 800ee18:	42a6      	cmp	r6, r4
 800ee1a:	d109      	bne.n	800ee30 <__libc_init_array+0x24>
 800ee1c:	4d0b      	ldr	r5, [pc, #44]	; (800ee4c <__libc_init_array+0x40>)
 800ee1e:	4c0c      	ldr	r4, [pc, #48]	; (800ee50 <__libc_init_array+0x44>)
 800ee20:	f002 fea4 	bl	8011b6c <_init>
 800ee24:	1b64      	subs	r4, r4, r5
 800ee26:	10a4      	asrs	r4, r4, #2
 800ee28:	2600      	movs	r6, #0
 800ee2a:	42a6      	cmp	r6, r4
 800ee2c:	d105      	bne.n	800ee3a <__libc_init_array+0x2e>
 800ee2e:	bd70      	pop	{r4, r5, r6, pc}
 800ee30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee34:	4798      	blx	r3
 800ee36:	3601      	adds	r6, #1
 800ee38:	e7ee      	b.n	800ee18 <__libc_init_array+0xc>
 800ee3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee3e:	4798      	blx	r3
 800ee40:	3601      	adds	r6, #1
 800ee42:	e7f2      	b.n	800ee2a <__libc_init_array+0x1e>
 800ee44:	080122cc 	.word	0x080122cc
 800ee48:	080122cc 	.word	0x080122cc
 800ee4c:	080122cc 	.word	0x080122cc
 800ee50:	080122d0 	.word	0x080122d0

0800ee54 <__itoa>:
 800ee54:	1e93      	subs	r3, r2, #2
 800ee56:	2b22      	cmp	r3, #34	; 0x22
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	d904      	bls.n	800ee68 <__itoa+0x14>
 800ee5e:	2300      	movs	r3, #0
 800ee60:	700b      	strb	r3, [r1, #0]
 800ee62:	461c      	mov	r4, r3
 800ee64:	4620      	mov	r0, r4
 800ee66:	bd10      	pop	{r4, pc}
 800ee68:	2a0a      	cmp	r2, #10
 800ee6a:	d109      	bne.n	800ee80 <__itoa+0x2c>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	da07      	bge.n	800ee80 <__itoa+0x2c>
 800ee70:	232d      	movs	r3, #45	; 0x2d
 800ee72:	700b      	strb	r3, [r1, #0]
 800ee74:	4240      	negs	r0, r0
 800ee76:	2101      	movs	r1, #1
 800ee78:	4421      	add	r1, r4
 800ee7a:	f000 fe37 	bl	800faec <__utoa>
 800ee7e:	e7f1      	b.n	800ee64 <__itoa+0x10>
 800ee80:	2100      	movs	r1, #0
 800ee82:	e7f9      	b.n	800ee78 <__itoa+0x24>

0800ee84 <itoa>:
 800ee84:	f7ff bfe6 	b.w	800ee54 <__itoa>

0800ee88 <__retarget_lock_init_recursive>:
 800ee88:	4770      	bx	lr

0800ee8a <__retarget_lock_acquire_recursive>:
 800ee8a:	4770      	bx	lr

0800ee8c <__retarget_lock_release_recursive>:
 800ee8c:	4770      	bx	lr
	...

0800ee90 <malloc>:
 800ee90:	4b02      	ldr	r3, [pc, #8]	; (800ee9c <malloc+0xc>)
 800ee92:	4601      	mov	r1, r0
 800ee94:	6818      	ldr	r0, [r3, #0]
 800ee96:	f000 b871 	b.w	800ef7c <_malloc_r>
 800ee9a:	bf00      	nop
 800ee9c:	20000184 	.word	0x20000184

0800eea0 <free>:
 800eea0:	4b02      	ldr	r3, [pc, #8]	; (800eeac <free+0xc>)
 800eea2:	4601      	mov	r1, r0
 800eea4:	6818      	ldr	r0, [r3, #0]
 800eea6:	f000 b819 	b.w	800eedc <_free_r>
 800eeaa:	bf00      	nop
 800eeac:	20000184 	.word	0x20000184

0800eeb0 <memcpy>:
 800eeb0:	440a      	add	r2, r1
 800eeb2:	4291      	cmp	r1, r2
 800eeb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eeb8:	d100      	bne.n	800eebc <memcpy+0xc>
 800eeba:	4770      	bx	lr
 800eebc:	b510      	push	{r4, lr}
 800eebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eec6:	4291      	cmp	r1, r2
 800eec8:	d1f9      	bne.n	800eebe <memcpy+0xe>
 800eeca:	bd10      	pop	{r4, pc}

0800eecc <memset>:
 800eecc:	4402      	add	r2, r0
 800eece:	4603      	mov	r3, r0
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d100      	bne.n	800eed6 <memset+0xa>
 800eed4:	4770      	bx	lr
 800eed6:	f803 1b01 	strb.w	r1, [r3], #1
 800eeda:	e7f9      	b.n	800eed0 <memset+0x4>

0800eedc <_free_r>:
 800eedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eede:	2900      	cmp	r1, #0
 800eee0:	d048      	beq.n	800ef74 <_free_r+0x98>
 800eee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eee6:	9001      	str	r0, [sp, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f1a1 0404 	sub.w	r4, r1, #4
 800eeee:	bfb8      	it	lt
 800eef0:	18e4      	addlt	r4, r4, r3
 800eef2:	f001 fdb1 	bl	8010a58 <__malloc_lock>
 800eef6:	4a20      	ldr	r2, [pc, #128]	; (800ef78 <_free_r+0x9c>)
 800eef8:	9801      	ldr	r0, [sp, #4]
 800eefa:	6813      	ldr	r3, [r2, #0]
 800eefc:	4615      	mov	r5, r2
 800eefe:	b933      	cbnz	r3, 800ef0e <_free_r+0x32>
 800ef00:	6063      	str	r3, [r4, #4]
 800ef02:	6014      	str	r4, [r2, #0]
 800ef04:	b003      	add	sp, #12
 800ef06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef0a:	f001 bdab 	b.w	8010a64 <__malloc_unlock>
 800ef0e:	42a3      	cmp	r3, r4
 800ef10:	d90b      	bls.n	800ef2a <_free_r+0x4e>
 800ef12:	6821      	ldr	r1, [r4, #0]
 800ef14:	1862      	adds	r2, r4, r1
 800ef16:	4293      	cmp	r3, r2
 800ef18:	bf04      	itt	eq
 800ef1a:	681a      	ldreq	r2, [r3, #0]
 800ef1c:	685b      	ldreq	r3, [r3, #4]
 800ef1e:	6063      	str	r3, [r4, #4]
 800ef20:	bf04      	itt	eq
 800ef22:	1852      	addeq	r2, r2, r1
 800ef24:	6022      	streq	r2, [r4, #0]
 800ef26:	602c      	str	r4, [r5, #0]
 800ef28:	e7ec      	b.n	800ef04 <_free_r+0x28>
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	b10b      	cbz	r3, 800ef34 <_free_r+0x58>
 800ef30:	42a3      	cmp	r3, r4
 800ef32:	d9fa      	bls.n	800ef2a <_free_r+0x4e>
 800ef34:	6811      	ldr	r1, [r2, #0]
 800ef36:	1855      	adds	r5, r2, r1
 800ef38:	42a5      	cmp	r5, r4
 800ef3a:	d10b      	bne.n	800ef54 <_free_r+0x78>
 800ef3c:	6824      	ldr	r4, [r4, #0]
 800ef3e:	4421      	add	r1, r4
 800ef40:	1854      	adds	r4, r2, r1
 800ef42:	42a3      	cmp	r3, r4
 800ef44:	6011      	str	r1, [r2, #0]
 800ef46:	d1dd      	bne.n	800ef04 <_free_r+0x28>
 800ef48:	681c      	ldr	r4, [r3, #0]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	6053      	str	r3, [r2, #4]
 800ef4e:	4421      	add	r1, r4
 800ef50:	6011      	str	r1, [r2, #0]
 800ef52:	e7d7      	b.n	800ef04 <_free_r+0x28>
 800ef54:	d902      	bls.n	800ef5c <_free_r+0x80>
 800ef56:	230c      	movs	r3, #12
 800ef58:	6003      	str	r3, [r0, #0]
 800ef5a:	e7d3      	b.n	800ef04 <_free_r+0x28>
 800ef5c:	6825      	ldr	r5, [r4, #0]
 800ef5e:	1961      	adds	r1, r4, r5
 800ef60:	428b      	cmp	r3, r1
 800ef62:	bf04      	itt	eq
 800ef64:	6819      	ldreq	r1, [r3, #0]
 800ef66:	685b      	ldreq	r3, [r3, #4]
 800ef68:	6063      	str	r3, [r4, #4]
 800ef6a:	bf04      	itt	eq
 800ef6c:	1949      	addeq	r1, r1, r5
 800ef6e:	6021      	streq	r1, [r4, #0]
 800ef70:	6054      	str	r4, [r2, #4]
 800ef72:	e7c7      	b.n	800ef04 <_free_r+0x28>
 800ef74:	b003      	add	sp, #12
 800ef76:	bd30      	pop	{r4, r5, pc}
 800ef78:	2000536c 	.word	0x2000536c

0800ef7c <_malloc_r>:
 800ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7e:	1ccd      	adds	r5, r1, #3
 800ef80:	f025 0503 	bic.w	r5, r5, #3
 800ef84:	3508      	adds	r5, #8
 800ef86:	2d0c      	cmp	r5, #12
 800ef88:	bf38      	it	cc
 800ef8a:	250c      	movcc	r5, #12
 800ef8c:	2d00      	cmp	r5, #0
 800ef8e:	4606      	mov	r6, r0
 800ef90:	db01      	blt.n	800ef96 <_malloc_r+0x1a>
 800ef92:	42a9      	cmp	r1, r5
 800ef94:	d903      	bls.n	800ef9e <_malloc_r+0x22>
 800ef96:	230c      	movs	r3, #12
 800ef98:	6033      	str	r3, [r6, #0]
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef9e:	f001 fd5b 	bl	8010a58 <__malloc_lock>
 800efa2:	4921      	ldr	r1, [pc, #132]	; (800f028 <_malloc_r+0xac>)
 800efa4:	680a      	ldr	r2, [r1, #0]
 800efa6:	4614      	mov	r4, r2
 800efa8:	b99c      	cbnz	r4, 800efd2 <_malloc_r+0x56>
 800efaa:	4f20      	ldr	r7, [pc, #128]	; (800f02c <_malloc_r+0xb0>)
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	b923      	cbnz	r3, 800efba <_malloc_r+0x3e>
 800efb0:	4621      	mov	r1, r4
 800efb2:	4630      	mov	r0, r6
 800efb4:	f000 fd10 	bl	800f9d8 <_sbrk_r>
 800efb8:	6038      	str	r0, [r7, #0]
 800efba:	4629      	mov	r1, r5
 800efbc:	4630      	mov	r0, r6
 800efbe:	f000 fd0b 	bl	800f9d8 <_sbrk_r>
 800efc2:	1c43      	adds	r3, r0, #1
 800efc4:	d123      	bne.n	800f00e <_malloc_r+0x92>
 800efc6:	230c      	movs	r3, #12
 800efc8:	6033      	str	r3, [r6, #0]
 800efca:	4630      	mov	r0, r6
 800efcc:	f001 fd4a 	bl	8010a64 <__malloc_unlock>
 800efd0:	e7e3      	b.n	800ef9a <_malloc_r+0x1e>
 800efd2:	6823      	ldr	r3, [r4, #0]
 800efd4:	1b5b      	subs	r3, r3, r5
 800efd6:	d417      	bmi.n	800f008 <_malloc_r+0x8c>
 800efd8:	2b0b      	cmp	r3, #11
 800efda:	d903      	bls.n	800efe4 <_malloc_r+0x68>
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	441c      	add	r4, r3
 800efe0:	6025      	str	r5, [r4, #0]
 800efe2:	e004      	b.n	800efee <_malloc_r+0x72>
 800efe4:	6863      	ldr	r3, [r4, #4]
 800efe6:	42a2      	cmp	r2, r4
 800efe8:	bf0c      	ite	eq
 800efea:	600b      	streq	r3, [r1, #0]
 800efec:	6053      	strne	r3, [r2, #4]
 800efee:	4630      	mov	r0, r6
 800eff0:	f001 fd38 	bl	8010a64 <__malloc_unlock>
 800eff4:	f104 000b 	add.w	r0, r4, #11
 800eff8:	1d23      	adds	r3, r4, #4
 800effa:	f020 0007 	bic.w	r0, r0, #7
 800effe:	1ac2      	subs	r2, r0, r3
 800f000:	d0cc      	beq.n	800ef9c <_malloc_r+0x20>
 800f002:	1a1b      	subs	r3, r3, r0
 800f004:	50a3      	str	r3, [r4, r2]
 800f006:	e7c9      	b.n	800ef9c <_malloc_r+0x20>
 800f008:	4622      	mov	r2, r4
 800f00a:	6864      	ldr	r4, [r4, #4]
 800f00c:	e7cc      	b.n	800efa8 <_malloc_r+0x2c>
 800f00e:	1cc4      	adds	r4, r0, #3
 800f010:	f024 0403 	bic.w	r4, r4, #3
 800f014:	42a0      	cmp	r0, r4
 800f016:	d0e3      	beq.n	800efe0 <_malloc_r+0x64>
 800f018:	1a21      	subs	r1, r4, r0
 800f01a:	4630      	mov	r0, r6
 800f01c:	f000 fcdc 	bl	800f9d8 <_sbrk_r>
 800f020:	3001      	adds	r0, #1
 800f022:	d1dd      	bne.n	800efe0 <_malloc_r+0x64>
 800f024:	e7cf      	b.n	800efc6 <_malloc_r+0x4a>
 800f026:	bf00      	nop
 800f028:	2000536c 	.word	0x2000536c
 800f02c:	20005370 	.word	0x20005370

0800f030 <__cvt>:
 800f030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f034:	ec55 4b10 	vmov	r4, r5, d0
 800f038:	2d00      	cmp	r5, #0
 800f03a:	460e      	mov	r6, r1
 800f03c:	4619      	mov	r1, r3
 800f03e:	462b      	mov	r3, r5
 800f040:	bfbb      	ittet	lt
 800f042:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f046:	461d      	movlt	r5, r3
 800f048:	2300      	movge	r3, #0
 800f04a:	232d      	movlt	r3, #45	; 0x2d
 800f04c:	700b      	strb	r3, [r1, #0]
 800f04e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f050:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f054:	4691      	mov	r9, r2
 800f056:	f023 0820 	bic.w	r8, r3, #32
 800f05a:	bfbc      	itt	lt
 800f05c:	4622      	movlt	r2, r4
 800f05e:	4614      	movlt	r4, r2
 800f060:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f064:	d005      	beq.n	800f072 <__cvt+0x42>
 800f066:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f06a:	d100      	bne.n	800f06e <__cvt+0x3e>
 800f06c:	3601      	adds	r6, #1
 800f06e:	2102      	movs	r1, #2
 800f070:	e000      	b.n	800f074 <__cvt+0x44>
 800f072:	2103      	movs	r1, #3
 800f074:	ab03      	add	r3, sp, #12
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	ab02      	add	r3, sp, #8
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	ec45 4b10 	vmov	d0, r4, r5
 800f080:	4653      	mov	r3, sl
 800f082:	4632      	mov	r2, r6
 800f084:	f000 fe24 	bl	800fcd0 <_dtoa_r>
 800f088:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f08c:	4607      	mov	r7, r0
 800f08e:	d102      	bne.n	800f096 <__cvt+0x66>
 800f090:	f019 0f01 	tst.w	r9, #1
 800f094:	d022      	beq.n	800f0dc <__cvt+0xac>
 800f096:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f09a:	eb07 0906 	add.w	r9, r7, r6
 800f09e:	d110      	bne.n	800f0c2 <__cvt+0x92>
 800f0a0:	783b      	ldrb	r3, [r7, #0]
 800f0a2:	2b30      	cmp	r3, #48	; 0x30
 800f0a4:	d10a      	bne.n	800f0bc <__cvt+0x8c>
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	4629      	mov	r1, r5
 800f0ae:	f7f1 fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0b2:	b918      	cbnz	r0, 800f0bc <__cvt+0x8c>
 800f0b4:	f1c6 0601 	rsb	r6, r6, #1
 800f0b8:	f8ca 6000 	str.w	r6, [sl]
 800f0bc:	f8da 3000 	ldr.w	r3, [sl]
 800f0c0:	4499      	add	r9, r3
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	f7f1 fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0ce:	b108      	cbz	r0, 800f0d4 <__cvt+0xa4>
 800f0d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0d4:	2230      	movs	r2, #48	; 0x30
 800f0d6:	9b03      	ldr	r3, [sp, #12]
 800f0d8:	454b      	cmp	r3, r9
 800f0da:	d307      	bcc.n	800f0ec <__cvt+0xbc>
 800f0dc:	9b03      	ldr	r3, [sp, #12]
 800f0de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0e0:	1bdb      	subs	r3, r3, r7
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	b004      	add	sp, #16
 800f0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ec:	1c59      	adds	r1, r3, #1
 800f0ee:	9103      	str	r1, [sp, #12]
 800f0f0:	701a      	strb	r2, [r3, #0]
 800f0f2:	e7f0      	b.n	800f0d6 <__cvt+0xa6>

0800f0f4 <__exponent>:
 800f0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2900      	cmp	r1, #0
 800f0fa:	bfb8      	it	lt
 800f0fc:	4249      	neglt	r1, r1
 800f0fe:	f803 2b02 	strb.w	r2, [r3], #2
 800f102:	bfb4      	ite	lt
 800f104:	222d      	movlt	r2, #45	; 0x2d
 800f106:	222b      	movge	r2, #43	; 0x2b
 800f108:	2909      	cmp	r1, #9
 800f10a:	7042      	strb	r2, [r0, #1]
 800f10c:	dd2a      	ble.n	800f164 <__exponent+0x70>
 800f10e:	f10d 0407 	add.w	r4, sp, #7
 800f112:	46a4      	mov	ip, r4
 800f114:	270a      	movs	r7, #10
 800f116:	46a6      	mov	lr, r4
 800f118:	460a      	mov	r2, r1
 800f11a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f11e:	fb07 1516 	mls	r5, r7, r6, r1
 800f122:	3530      	adds	r5, #48	; 0x30
 800f124:	2a63      	cmp	r2, #99	; 0x63
 800f126:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f12a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f12e:	4631      	mov	r1, r6
 800f130:	dcf1      	bgt.n	800f116 <__exponent+0x22>
 800f132:	3130      	adds	r1, #48	; 0x30
 800f134:	f1ae 0502 	sub.w	r5, lr, #2
 800f138:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f13c:	1c44      	adds	r4, r0, #1
 800f13e:	4629      	mov	r1, r5
 800f140:	4561      	cmp	r1, ip
 800f142:	d30a      	bcc.n	800f15a <__exponent+0x66>
 800f144:	f10d 0209 	add.w	r2, sp, #9
 800f148:	eba2 020e 	sub.w	r2, r2, lr
 800f14c:	4565      	cmp	r5, ip
 800f14e:	bf88      	it	hi
 800f150:	2200      	movhi	r2, #0
 800f152:	4413      	add	r3, r2
 800f154:	1a18      	subs	r0, r3, r0
 800f156:	b003      	add	sp, #12
 800f158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f15a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f15e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f162:	e7ed      	b.n	800f140 <__exponent+0x4c>
 800f164:	2330      	movs	r3, #48	; 0x30
 800f166:	3130      	adds	r1, #48	; 0x30
 800f168:	7083      	strb	r3, [r0, #2]
 800f16a:	70c1      	strb	r1, [r0, #3]
 800f16c:	1d03      	adds	r3, r0, #4
 800f16e:	e7f1      	b.n	800f154 <__exponent+0x60>

0800f170 <_printf_float>:
 800f170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f174:	ed2d 8b02 	vpush	{d8}
 800f178:	b08d      	sub	sp, #52	; 0x34
 800f17a:	460c      	mov	r4, r1
 800f17c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f180:	4616      	mov	r6, r2
 800f182:	461f      	mov	r7, r3
 800f184:	4605      	mov	r5, r0
 800f186:	f001 fc51 	bl	8010a2c <_localeconv_r>
 800f18a:	f8d0 a000 	ldr.w	sl, [r0]
 800f18e:	4650      	mov	r0, sl
 800f190:	f7f1 f81e 	bl	80001d0 <strlen>
 800f194:	2300      	movs	r3, #0
 800f196:	930a      	str	r3, [sp, #40]	; 0x28
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	9305      	str	r3, [sp, #20]
 800f19c:	f8d8 3000 	ldr.w	r3, [r8]
 800f1a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f1a4:	3307      	adds	r3, #7
 800f1a6:	f023 0307 	bic.w	r3, r3, #7
 800f1aa:	f103 0208 	add.w	r2, r3, #8
 800f1ae:	f8c8 2000 	str.w	r2, [r8]
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f1ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f1be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f1c2:	9307      	str	r3, [sp, #28]
 800f1c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1c8:	ee08 0a10 	vmov	s16, r0
 800f1cc:	4b9f      	ldr	r3, [pc, #636]	; (800f44c <_printf_float+0x2dc>)
 800f1ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1d6:	f7f1 fca9 	bl	8000b2c <__aeabi_dcmpun>
 800f1da:	bb88      	cbnz	r0, 800f240 <_printf_float+0xd0>
 800f1dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1e0:	4b9a      	ldr	r3, [pc, #616]	; (800f44c <_printf_float+0x2dc>)
 800f1e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1e6:	f7f1 fc83 	bl	8000af0 <__aeabi_dcmple>
 800f1ea:	bb48      	cbnz	r0, 800f240 <_printf_float+0xd0>
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	4640      	mov	r0, r8
 800f1f2:	4649      	mov	r1, r9
 800f1f4:	f7f1 fc72 	bl	8000adc <__aeabi_dcmplt>
 800f1f8:	b110      	cbz	r0, 800f200 <_printf_float+0x90>
 800f1fa:	232d      	movs	r3, #45	; 0x2d
 800f1fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f200:	4b93      	ldr	r3, [pc, #588]	; (800f450 <_printf_float+0x2e0>)
 800f202:	4894      	ldr	r0, [pc, #592]	; (800f454 <_printf_float+0x2e4>)
 800f204:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f208:	bf94      	ite	ls
 800f20a:	4698      	movls	r8, r3
 800f20c:	4680      	movhi	r8, r0
 800f20e:	2303      	movs	r3, #3
 800f210:	6123      	str	r3, [r4, #16]
 800f212:	9b05      	ldr	r3, [sp, #20]
 800f214:	f023 0204 	bic.w	r2, r3, #4
 800f218:	6022      	str	r2, [r4, #0]
 800f21a:	f04f 0900 	mov.w	r9, #0
 800f21e:	9700      	str	r7, [sp, #0]
 800f220:	4633      	mov	r3, r6
 800f222:	aa0b      	add	r2, sp, #44	; 0x2c
 800f224:	4621      	mov	r1, r4
 800f226:	4628      	mov	r0, r5
 800f228:	f000 f9d8 	bl	800f5dc <_printf_common>
 800f22c:	3001      	adds	r0, #1
 800f22e:	f040 8090 	bne.w	800f352 <_printf_float+0x1e2>
 800f232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f236:	b00d      	add	sp, #52	; 0x34
 800f238:	ecbd 8b02 	vpop	{d8}
 800f23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f240:	4642      	mov	r2, r8
 800f242:	464b      	mov	r3, r9
 800f244:	4640      	mov	r0, r8
 800f246:	4649      	mov	r1, r9
 800f248:	f7f1 fc70 	bl	8000b2c <__aeabi_dcmpun>
 800f24c:	b140      	cbz	r0, 800f260 <_printf_float+0xf0>
 800f24e:	464b      	mov	r3, r9
 800f250:	2b00      	cmp	r3, #0
 800f252:	bfbc      	itt	lt
 800f254:	232d      	movlt	r3, #45	; 0x2d
 800f256:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f25a:	487f      	ldr	r0, [pc, #508]	; (800f458 <_printf_float+0x2e8>)
 800f25c:	4b7f      	ldr	r3, [pc, #508]	; (800f45c <_printf_float+0x2ec>)
 800f25e:	e7d1      	b.n	800f204 <_printf_float+0x94>
 800f260:	6863      	ldr	r3, [r4, #4]
 800f262:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f266:	9206      	str	r2, [sp, #24]
 800f268:	1c5a      	adds	r2, r3, #1
 800f26a:	d13f      	bne.n	800f2ec <_printf_float+0x17c>
 800f26c:	2306      	movs	r3, #6
 800f26e:	6063      	str	r3, [r4, #4]
 800f270:	9b05      	ldr	r3, [sp, #20]
 800f272:	6861      	ldr	r1, [r4, #4]
 800f274:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f278:	2300      	movs	r3, #0
 800f27a:	9303      	str	r3, [sp, #12]
 800f27c:	ab0a      	add	r3, sp, #40	; 0x28
 800f27e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f282:	ab09      	add	r3, sp, #36	; 0x24
 800f284:	ec49 8b10 	vmov	d0, r8, r9
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	6022      	str	r2, [r4, #0]
 800f28c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f290:	4628      	mov	r0, r5
 800f292:	f7ff fecd 	bl	800f030 <__cvt>
 800f296:	9b06      	ldr	r3, [sp, #24]
 800f298:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f29a:	2b47      	cmp	r3, #71	; 0x47
 800f29c:	4680      	mov	r8, r0
 800f29e:	d108      	bne.n	800f2b2 <_printf_float+0x142>
 800f2a0:	1cc8      	adds	r0, r1, #3
 800f2a2:	db02      	blt.n	800f2aa <_printf_float+0x13a>
 800f2a4:	6863      	ldr	r3, [r4, #4]
 800f2a6:	4299      	cmp	r1, r3
 800f2a8:	dd41      	ble.n	800f32e <_printf_float+0x1be>
 800f2aa:	f1ab 0b02 	sub.w	fp, fp, #2
 800f2ae:	fa5f fb8b 	uxtb.w	fp, fp
 800f2b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2b6:	d820      	bhi.n	800f2fa <_printf_float+0x18a>
 800f2b8:	3901      	subs	r1, #1
 800f2ba:	465a      	mov	r2, fp
 800f2bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f2c0:	9109      	str	r1, [sp, #36]	; 0x24
 800f2c2:	f7ff ff17 	bl	800f0f4 <__exponent>
 800f2c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2c8:	1813      	adds	r3, r2, r0
 800f2ca:	2a01      	cmp	r2, #1
 800f2cc:	4681      	mov	r9, r0
 800f2ce:	6123      	str	r3, [r4, #16]
 800f2d0:	dc02      	bgt.n	800f2d8 <_printf_float+0x168>
 800f2d2:	6822      	ldr	r2, [r4, #0]
 800f2d4:	07d2      	lsls	r2, r2, #31
 800f2d6:	d501      	bpl.n	800f2dc <_printf_float+0x16c>
 800f2d8:	3301      	adds	r3, #1
 800f2da:	6123      	str	r3, [r4, #16]
 800f2dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d09c      	beq.n	800f21e <_printf_float+0xae>
 800f2e4:	232d      	movs	r3, #45	; 0x2d
 800f2e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2ea:	e798      	b.n	800f21e <_printf_float+0xae>
 800f2ec:	9a06      	ldr	r2, [sp, #24]
 800f2ee:	2a47      	cmp	r2, #71	; 0x47
 800f2f0:	d1be      	bne.n	800f270 <_printf_float+0x100>
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1bc      	bne.n	800f270 <_printf_float+0x100>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e7b9      	b.n	800f26e <_printf_float+0xfe>
 800f2fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2fe:	d118      	bne.n	800f332 <_printf_float+0x1c2>
 800f300:	2900      	cmp	r1, #0
 800f302:	6863      	ldr	r3, [r4, #4]
 800f304:	dd0b      	ble.n	800f31e <_printf_float+0x1ae>
 800f306:	6121      	str	r1, [r4, #16]
 800f308:	b913      	cbnz	r3, 800f310 <_printf_float+0x1a0>
 800f30a:	6822      	ldr	r2, [r4, #0]
 800f30c:	07d0      	lsls	r0, r2, #31
 800f30e:	d502      	bpl.n	800f316 <_printf_float+0x1a6>
 800f310:	3301      	adds	r3, #1
 800f312:	440b      	add	r3, r1
 800f314:	6123      	str	r3, [r4, #16]
 800f316:	65a1      	str	r1, [r4, #88]	; 0x58
 800f318:	f04f 0900 	mov.w	r9, #0
 800f31c:	e7de      	b.n	800f2dc <_printf_float+0x16c>
 800f31e:	b913      	cbnz	r3, 800f326 <_printf_float+0x1b6>
 800f320:	6822      	ldr	r2, [r4, #0]
 800f322:	07d2      	lsls	r2, r2, #31
 800f324:	d501      	bpl.n	800f32a <_printf_float+0x1ba>
 800f326:	3302      	adds	r3, #2
 800f328:	e7f4      	b.n	800f314 <_printf_float+0x1a4>
 800f32a:	2301      	movs	r3, #1
 800f32c:	e7f2      	b.n	800f314 <_printf_float+0x1a4>
 800f32e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f334:	4299      	cmp	r1, r3
 800f336:	db05      	blt.n	800f344 <_printf_float+0x1d4>
 800f338:	6823      	ldr	r3, [r4, #0]
 800f33a:	6121      	str	r1, [r4, #16]
 800f33c:	07d8      	lsls	r0, r3, #31
 800f33e:	d5ea      	bpl.n	800f316 <_printf_float+0x1a6>
 800f340:	1c4b      	adds	r3, r1, #1
 800f342:	e7e7      	b.n	800f314 <_printf_float+0x1a4>
 800f344:	2900      	cmp	r1, #0
 800f346:	bfd4      	ite	le
 800f348:	f1c1 0202 	rsble	r2, r1, #2
 800f34c:	2201      	movgt	r2, #1
 800f34e:	4413      	add	r3, r2
 800f350:	e7e0      	b.n	800f314 <_printf_float+0x1a4>
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	055a      	lsls	r2, r3, #21
 800f356:	d407      	bmi.n	800f368 <_printf_float+0x1f8>
 800f358:	6923      	ldr	r3, [r4, #16]
 800f35a:	4642      	mov	r2, r8
 800f35c:	4631      	mov	r1, r6
 800f35e:	4628      	mov	r0, r5
 800f360:	47b8      	blx	r7
 800f362:	3001      	adds	r0, #1
 800f364:	d12c      	bne.n	800f3c0 <_printf_float+0x250>
 800f366:	e764      	b.n	800f232 <_printf_float+0xc2>
 800f368:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f36c:	f240 80e0 	bls.w	800f530 <_printf_float+0x3c0>
 800f370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f374:	2200      	movs	r2, #0
 800f376:	2300      	movs	r3, #0
 800f378:	f7f1 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d034      	beq.n	800f3ea <_printf_float+0x27a>
 800f380:	4a37      	ldr	r2, [pc, #220]	; (800f460 <_printf_float+0x2f0>)
 800f382:	2301      	movs	r3, #1
 800f384:	4631      	mov	r1, r6
 800f386:	4628      	mov	r0, r5
 800f388:	47b8      	blx	r7
 800f38a:	3001      	adds	r0, #1
 800f38c:	f43f af51 	beq.w	800f232 <_printf_float+0xc2>
 800f390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f394:	429a      	cmp	r2, r3
 800f396:	db02      	blt.n	800f39e <_printf_float+0x22e>
 800f398:	6823      	ldr	r3, [r4, #0]
 800f39a:	07d8      	lsls	r0, r3, #31
 800f39c:	d510      	bpl.n	800f3c0 <_printf_float+0x250>
 800f39e:	ee18 3a10 	vmov	r3, s16
 800f3a2:	4652      	mov	r2, sl
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	47b8      	blx	r7
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	f43f af41 	beq.w	800f232 <_printf_float+0xc2>
 800f3b0:	f04f 0800 	mov.w	r8, #0
 800f3b4:	f104 091a 	add.w	r9, r4, #26
 800f3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	4543      	cmp	r3, r8
 800f3be:	dc09      	bgt.n	800f3d4 <_printf_float+0x264>
 800f3c0:	6823      	ldr	r3, [r4, #0]
 800f3c2:	079b      	lsls	r3, r3, #30
 800f3c4:	f100 8105 	bmi.w	800f5d2 <_printf_float+0x462>
 800f3c8:	68e0      	ldr	r0, [r4, #12]
 800f3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3cc:	4298      	cmp	r0, r3
 800f3ce:	bfb8      	it	lt
 800f3d0:	4618      	movlt	r0, r3
 800f3d2:	e730      	b.n	800f236 <_printf_float+0xc6>
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	464a      	mov	r2, r9
 800f3d8:	4631      	mov	r1, r6
 800f3da:	4628      	mov	r0, r5
 800f3dc:	47b8      	blx	r7
 800f3de:	3001      	adds	r0, #1
 800f3e0:	f43f af27 	beq.w	800f232 <_printf_float+0xc2>
 800f3e4:	f108 0801 	add.w	r8, r8, #1
 800f3e8:	e7e6      	b.n	800f3b8 <_printf_float+0x248>
 800f3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	dc39      	bgt.n	800f464 <_printf_float+0x2f4>
 800f3f0:	4a1b      	ldr	r2, [pc, #108]	; (800f460 <_printf_float+0x2f0>)
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	4631      	mov	r1, r6
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	47b8      	blx	r7
 800f3fa:	3001      	adds	r0, #1
 800f3fc:	f43f af19 	beq.w	800f232 <_printf_float+0xc2>
 800f400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f404:	4313      	orrs	r3, r2
 800f406:	d102      	bne.n	800f40e <_printf_float+0x29e>
 800f408:	6823      	ldr	r3, [r4, #0]
 800f40a:	07d9      	lsls	r1, r3, #31
 800f40c:	d5d8      	bpl.n	800f3c0 <_printf_float+0x250>
 800f40e:	ee18 3a10 	vmov	r3, s16
 800f412:	4652      	mov	r2, sl
 800f414:	4631      	mov	r1, r6
 800f416:	4628      	mov	r0, r5
 800f418:	47b8      	blx	r7
 800f41a:	3001      	adds	r0, #1
 800f41c:	f43f af09 	beq.w	800f232 <_printf_float+0xc2>
 800f420:	f04f 0900 	mov.w	r9, #0
 800f424:	f104 0a1a 	add.w	sl, r4, #26
 800f428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f42a:	425b      	negs	r3, r3
 800f42c:	454b      	cmp	r3, r9
 800f42e:	dc01      	bgt.n	800f434 <_printf_float+0x2c4>
 800f430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f432:	e792      	b.n	800f35a <_printf_float+0x1ea>
 800f434:	2301      	movs	r3, #1
 800f436:	4652      	mov	r2, sl
 800f438:	4631      	mov	r1, r6
 800f43a:	4628      	mov	r0, r5
 800f43c:	47b8      	blx	r7
 800f43e:	3001      	adds	r0, #1
 800f440:	f43f aef7 	beq.w	800f232 <_printf_float+0xc2>
 800f444:	f109 0901 	add.w	r9, r9, #1
 800f448:	e7ee      	b.n	800f428 <_printf_float+0x2b8>
 800f44a:	bf00      	nop
 800f44c:	7fefffff 	.word	0x7fefffff
 800f450:	08011f1c 	.word	0x08011f1c
 800f454:	08011f20 	.word	0x08011f20
 800f458:	08011f28 	.word	0x08011f28
 800f45c:	08011f24 	.word	0x08011f24
 800f460:	08011f2c 	.word	0x08011f2c
 800f464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f468:	429a      	cmp	r2, r3
 800f46a:	bfa8      	it	ge
 800f46c:	461a      	movge	r2, r3
 800f46e:	2a00      	cmp	r2, #0
 800f470:	4691      	mov	r9, r2
 800f472:	dc37      	bgt.n	800f4e4 <_printf_float+0x374>
 800f474:	f04f 0b00 	mov.w	fp, #0
 800f478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f47c:	f104 021a 	add.w	r2, r4, #26
 800f480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f482:	9305      	str	r3, [sp, #20]
 800f484:	eba3 0309 	sub.w	r3, r3, r9
 800f488:	455b      	cmp	r3, fp
 800f48a:	dc33      	bgt.n	800f4f4 <_printf_float+0x384>
 800f48c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f490:	429a      	cmp	r2, r3
 800f492:	db3b      	blt.n	800f50c <_printf_float+0x39c>
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	07da      	lsls	r2, r3, #31
 800f498:	d438      	bmi.n	800f50c <_printf_float+0x39c>
 800f49a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f49c:	9b05      	ldr	r3, [sp, #20]
 800f49e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	eba2 0901 	sub.w	r9, r2, r1
 800f4a6:	4599      	cmp	r9, r3
 800f4a8:	bfa8      	it	ge
 800f4aa:	4699      	movge	r9, r3
 800f4ac:	f1b9 0f00 	cmp.w	r9, #0
 800f4b0:	dc35      	bgt.n	800f51e <_printf_float+0x3ae>
 800f4b2:	f04f 0800 	mov.w	r8, #0
 800f4b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4ba:	f104 0a1a 	add.w	sl, r4, #26
 800f4be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4c2:	1a9b      	subs	r3, r3, r2
 800f4c4:	eba3 0309 	sub.w	r3, r3, r9
 800f4c8:	4543      	cmp	r3, r8
 800f4ca:	f77f af79 	ble.w	800f3c0 <_printf_float+0x250>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	4652      	mov	r2, sl
 800f4d2:	4631      	mov	r1, r6
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	47b8      	blx	r7
 800f4d8:	3001      	adds	r0, #1
 800f4da:	f43f aeaa 	beq.w	800f232 <_printf_float+0xc2>
 800f4de:	f108 0801 	add.w	r8, r8, #1
 800f4e2:	e7ec      	b.n	800f4be <_printf_float+0x34e>
 800f4e4:	4613      	mov	r3, r2
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	4642      	mov	r2, r8
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	47b8      	blx	r7
 800f4ee:	3001      	adds	r0, #1
 800f4f0:	d1c0      	bne.n	800f474 <_printf_float+0x304>
 800f4f2:	e69e      	b.n	800f232 <_printf_float+0xc2>
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	4631      	mov	r1, r6
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	9205      	str	r2, [sp, #20]
 800f4fc:	47b8      	blx	r7
 800f4fe:	3001      	adds	r0, #1
 800f500:	f43f ae97 	beq.w	800f232 <_printf_float+0xc2>
 800f504:	9a05      	ldr	r2, [sp, #20]
 800f506:	f10b 0b01 	add.w	fp, fp, #1
 800f50a:	e7b9      	b.n	800f480 <_printf_float+0x310>
 800f50c:	ee18 3a10 	vmov	r3, s16
 800f510:	4652      	mov	r2, sl
 800f512:	4631      	mov	r1, r6
 800f514:	4628      	mov	r0, r5
 800f516:	47b8      	blx	r7
 800f518:	3001      	adds	r0, #1
 800f51a:	d1be      	bne.n	800f49a <_printf_float+0x32a>
 800f51c:	e689      	b.n	800f232 <_printf_float+0xc2>
 800f51e:	9a05      	ldr	r2, [sp, #20]
 800f520:	464b      	mov	r3, r9
 800f522:	4442      	add	r2, r8
 800f524:	4631      	mov	r1, r6
 800f526:	4628      	mov	r0, r5
 800f528:	47b8      	blx	r7
 800f52a:	3001      	adds	r0, #1
 800f52c:	d1c1      	bne.n	800f4b2 <_printf_float+0x342>
 800f52e:	e680      	b.n	800f232 <_printf_float+0xc2>
 800f530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f532:	2a01      	cmp	r2, #1
 800f534:	dc01      	bgt.n	800f53a <_printf_float+0x3ca>
 800f536:	07db      	lsls	r3, r3, #31
 800f538:	d538      	bpl.n	800f5ac <_printf_float+0x43c>
 800f53a:	2301      	movs	r3, #1
 800f53c:	4642      	mov	r2, r8
 800f53e:	4631      	mov	r1, r6
 800f540:	4628      	mov	r0, r5
 800f542:	47b8      	blx	r7
 800f544:	3001      	adds	r0, #1
 800f546:	f43f ae74 	beq.w	800f232 <_printf_float+0xc2>
 800f54a:	ee18 3a10 	vmov	r3, s16
 800f54e:	4652      	mov	r2, sl
 800f550:	4631      	mov	r1, r6
 800f552:	4628      	mov	r0, r5
 800f554:	47b8      	blx	r7
 800f556:	3001      	adds	r0, #1
 800f558:	f43f ae6b 	beq.w	800f232 <_printf_float+0xc2>
 800f55c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f560:	2200      	movs	r2, #0
 800f562:	2300      	movs	r3, #0
 800f564:	f7f1 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f568:	b9d8      	cbnz	r0, 800f5a2 <_printf_float+0x432>
 800f56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f56c:	f108 0201 	add.w	r2, r8, #1
 800f570:	3b01      	subs	r3, #1
 800f572:	4631      	mov	r1, r6
 800f574:	4628      	mov	r0, r5
 800f576:	47b8      	blx	r7
 800f578:	3001      	adds	r0, #1
 800f57a:	d10e      	bne.n	800f59a <_printf_float+0x42a>
 800f57c:	e659      	b.n	800f232 <_printf_float+0xc2>
 800f57e:	2301      	movs	r3, #1
 800f580:	4652      	mov	r2, sl
 800f582:	4631      	mov	r1, r6
 800f584:	4628      	mov	r0, r5
 800f586:	47b8      	blx	r7
 800f588:	3001      	adds	r0, #1
 800f58a:	f43f ae52 	beq.w	800f232 <_printf_float+0xc2>
 800f58e:	f108 0801 	add.w	r8, r8, #1
 800f592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f594:	3b01      	subs	r3, #1
 800f596:	4543      	cmp	r3, r8
 800f598:	dcf1      	bgt.n	800f57e <_printf_float+0x40e>
 800f59a:	464b      	mov	r3, r9
 800f59c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f5a0:	e6dc      	b.n	800f35c <_printf_float+0x1ec>
 800f5a2:	f04f 0800 	mov.w	r8, #0
 800f5a6:	f104 0a1a 	add.w	sl, r4, #26
 800f5aa:	e7f2      	b.n	800f592 <_printf_float+0x422>
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	4642      	mov	r2, r8
 800f5b0:	e7df      	b.n	800f572 <_printf_float+0x402>
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	464a      	mov	r2, r9
 800f5b6:	4631      	mov	r1, r6
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	47b8      	blx	r7
 800f5bc:	3001      	adds	r0, #1
 800f5be:	f43f ae38 	beq.w	800f232 <_printf_float+0xc2>
 800f5c2:	f108 0801 	add.w	r8, r8, #1
 800f5c6:	68e3      	ldr	r3, [r4, #12]
 800f5c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5ca:	1a5b      	subs	r3, r3, r1
 800f5cc:	4543      	cmp	r3, r8
 800f5ce:	dcf0      	bgt.n	800f5b2 <_printf_float+0x442>
 800f5d0:	e6fa      	b.n	800f3c8 <_printf_float+0x258>
 800f5d2:	f04f 0800 	mov.w	r8, #0
 800f5d6:	f104 0919 	add.w	r9, r4, #25
 800f5da:	e7f4      	b.n	800f5c6 <_printf_float+0x456>

0800f5dc <_printf_common>:
 800f5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e0:	4616      	mov	r6, r2
 800f5e2:	4699      	mov	r9, r3
 800f5e4:	688a      	ldr	r2, [r1, #8]
 800f5e6:	690b      	ldr	r3, [r1, #16]
 800f5e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	bfb8      	it	lt
 800f5f0:	4613      	movlt	r3, r2
 800f5f2:	6033      	str	r3, [r6, #0]
 800f5f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5f8:	4607      	mov	r7, r0
 800f5fa:	460c      	mov	r4, r1
 800f5fc:	b10a      	cbz	r2, 800f602 <_printf_common+0x26>
 800f5fe:	3301      	adds	r3, #1
 800f600:	6033      	str	r3, [r6, #0]
 800f602:	6823      	ldr	r3, [r4, #0]
 800f604:	0699      	lsls	r1, r3, #26
 800f606:	bf42      	ittt	mi
 800f608:	6833      	ldrmi	r3, [r6, #0]
 800f60a:	3302      	addmi	r3, #2
 800f60c:	6033      	strmi	r3, [r6, #0]
 800f60e:	6825      	ldr	r5, [r4, #0]
 800f610:	f015 0506 	ands.w	r5, r5, #6
 800f614:	d106      	bne.n	800f624 <_printf_common+0x48>
 800f616:	f104 0a19 	add.w	sl, r4, #25
 800f61a:	68e3      	ldr	r3, [r4, #12]
 800f61c:	6832      	ldr	r2, [r6, #0]
 800f61e:	1a9b      	subs	r3, r3, r2
 800f620:	42ab      	cmp	r3, r5
 800f622:	dc26      	bgt.n	800f672 <_printf_common+0x96>
 800f624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f628:	1e13      	subs	r3, r2, #0
 800f62a:	6822      	ldr	r2, [r4, #0]
 800f62c:	bf18      	it	ne
 800f62e:	2301      	movne	r3, #1
 800f630:	0692      	lsls	r2, r2, #26
 800f632:	d42b      	bmi.n	800f68c <_printf_common+0xb0>
 800f634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f638:	4649      	mov	r1, r9
 800f63a:	4638      	mov	r0, r7
 800f63c:	47c0      	blx	r8
 800f63e:	3001      	adds	r0, #1
 800f640:	d01e      	beq.n	800f680 <_printf_common+0xa4>
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	68e5      	ldr	r5, [r4, #12]
 800f646:	6832      	ldr	r2, [r6, #0]
 800f648:	f003 0306 	and.w	r3, r3, #6
 800f64c:	2b04      	cmp	r3, #4
 800f64e:	bf08      	it	eq
 800f650:	1aad      	subeq	r5, r5, r2
 800f652:	68a3      	ldr	r3, [r4, #8]
 800f654:	6922      	ldr	r2, [r4, #16]
 800f656:	bf0c      	ite	eq
 800f658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f65c:	2500      	movne	r5, #0
 800f65e:	4293      	cmp	r3, r2
 800f660:	bfc4      	itt	gt
 800f662:	1a9b      	subgt	r3, r3, r2
 800f664:	18ed      	addgt	r5, r5, r3
 800f666:	2600      	movs	r6, #0
 800f668:	341a      	adds	r4, #26
 800f66a:	42b5      	cmp	r5, r6
 800f66c:	d11a      	bne.n	800f6a4 <_printf_common+0xc8>
 800f66e:	2000      	movs	r0, #0
 800f670:	e008      	b.n	800f684 <_printf_common+0xa8>
 800f672:	2301      	movs	r3, #1
 800f674:	4652      	mov	r2, sl
 800f676:	4649      	mov	r1, r9
 800f678:	4638      	mov	r0, r7
 800f67a:	47c0      	blx	r8
 800f67c:	3001      	adds	r0, #1
 800f67e:	d103      	bne.n	800f688 <_printf_common+0xac>
 800f680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f688:	3501      	adds	r5, #1
 800f68a:	e7c6      	b.n	800f61a <_printf_common+0x3e>
 800f68c:	18e1      	adds	r1, r4, r3
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	2030      	movs	r0, #48	; 0x30
 800f692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f696:	4422      	add	r2, r4
 800f698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f69c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6a0:	3302      	adds	r3, #2
 800f6a2:	e7c7      	b.n	800f634 <_printf_common+0x58>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	4622      	mov	r2, r4
 800f6a8:	4649      	mov	r1, r9
 800f6aa:	4638      	mov	r0, r7
 800f6ac:	47c0      	blx	r8
 800f6ae:	3001      	adds	r0, #1
 800f6b0:	d0e6      	beq.n	800f680 <_printf_common+0xa4>
 800f6b2:	3601      	adds	r6, #1
 800f6b4:	e7d9      	b.n	800f66a <_printf_common+0x8e>
	...

0800f6b8 <_printf_i>:
 800f6b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6bc:	460c      	mov	r4, r1
 800f6be:	4691      	mov	r9, r2
 800f6c0:	7e27      	ldrb	r7, [r4, #24]
 800f6c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f6c4:	2f78      	cmp	r7, #120	; 0x78
 800f6c6:	4680      	mov	r8, r0
 800f6c8:	469a      	mov	sl, r3
 800f6ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6ce:	d807      	bhi.n	800f6e0 <_printf_i+0x28>
 800f6d0:	2f62      	cmp	r7, #98	; 0x62
 800f6d2:	d80a      	bhi.n	800f6ea <_printf_i+0x32>
 800f6d4:	2f00      	cmp	r7, #0
 800f6d6:	f000 80d8 	beq.w	800f88a <_printf_i+0x1d2>
 800f6da:	2f58      	cmp	r7, #88	; 0x58
 800f6dc:	f000 80a3 	beq.w	800f826 <_printf_i+0x16e>
 800f6e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f6e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6e8:	e03a      	b.n	800f760 <_printf_i+0xa8>
 800f6ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6ee:	2b15      	cmp	r3, #21
 800f6f0:	d8f6      	bhi.n	800f6e0 <_printf_i+0x28>
 800f6f2:	a001      	add	r0, pc, #4	; (adr r0, 800f6f8 <_printf_i+0x40>)
 800f6f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f6f8:	0800f751 	.word	0x0800f751
 800f6fc:	0800f765 	.word	0x0800f765
 800f700:	0800f6e1 	.word	0x0800f6e1
 800f704:	0800f6e1 	.word	0x0800f6e1
 800f708:	0800f6e1 	.word	0x0800f6e1
 800f70c:	0800f6e1 	.word	0x0800f6e1
 800f710:	0800f765 	.word	0x0800f765
 800f714:	0800f6e1 	.word	0x0800f6e1
 800f718:	0800f6e1 	.word	0x0800f6e1
 800f71c:	0800f6e1 	.word	0x0800f6e1
 800f720:	0800f6e1 	.word	0x0800f6e1
 800f724:	0800f871 	.word	0x0800f871
 800f728:	0800f795 	.word	0x0800f795
 800f72c:	0800f853 	.word	0x0800f853
 800f730:	0800f6e1 	.word	0x0800f6e1
 800f734:	0800f6e1 	.word	0x0800f6e1
 800f738:	0800f893 	.word	0x0800f893
 800f73c:	0800f6e1 	.word	0x0800f6e1
 800f740:	0800f795 	.word	0x0800f795
 800f744:	0800f6e1 	.word	0x0800f6e1
 800f748:	0800f6e1 	.word	0x0800f6e1
 800f74c:	0800f85b 	.word	0x0800f85b
 800f750:	680b      	ldr	r3, [r1, #0]
 800f752:	1d1a      	adds	r2, r3, #4
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	600a      	str	r2, [r1, #0]
 800f758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f75c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f760:	2301      	movs	r3, #1
 800f762:	e0a3      	b.n	800f8ac <_printf_i+0x1f4>
 800f764:	6825      	ldr	r5, [r4, #0]
 800f766:	6808      	ldr	r0, [r1, #0]
 800f768:	062e      	lsls	r6, r5, #24
 800f76a:	f100 0304 	add.w	r3, r0, #4
 800f76e:	d50a      	bpl.n	800f786 <_printf_i+0xce>
 800f770:	6805      	ldr	r5, [r0, #0]
 800f772:	600b      	str	r3, [r1, #0]
 800f774:	2d00      	cmp	r5, #0
 800f776:	da03      	bge.n	800f780 <_printf_i+0xc8>
 800f778:	232d      	movs	r3, #45	; 0x2d
 800f77a:	426d      	negs	r5, r5
 800f77c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f780:	485e      	ldr	r0, [pc, #376]	; (800f8fc <_printf_i+0x244>)
 800f782:	230a      	movs	r3, #10
 800f784:	e019      	b.n	800f7ba <_printf_i+0x102>
 800f786:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f78a:	6805      	ldr	r5, [r0, #0]
 800f78c:	600b      	str	r3, [r1, #0]
 800f78e:	bf18      	it	ne
 800f790:	b22d      	sxthne	r5, r5
 800f792:	e7ef      	b.n	800f774 <_printf_i+0xbc>
 800f794:	680b      	ldr	r3, [r1, #0]
 800f796:	6825      	ldr	r5, [r4, #0]
 800f798:	1d18      	adds	r0, r3, #4
 800f79a:	6008      	str	r0, [r1, #0]
 800f79c:	0628      	lsls	r0, r5, #24
 800f79e:	d501      	bpl.n	800f7a4 <_printf_i+0xec>
 800f7a0:	681d      	ldr	r5, [r3, #0]
 800f7a2:	e002      	b.n	800f7aa <_printf_i+0xf2>
 800f7a4:	0669      	lsls	r1, r5, #25
 800f7a6:	d5fb      	bpl.n	800f7a0 <_printf_i+0xe8>
 800f7a8:	881d      	ldrh	r5, [r3, #0]
 800f7aa:	4854      	ldr	r0, [pc, #336]	; (800f8fc <_printf_i+0x244>)
 800f7ac:	2f6f      	cmp	r7, #111	; 0x6f
 800f7ae:	bf0c      	ite	eq
 800f7b0:	2308      	moveq	r3, #8
 800f7b2:	230a      	movne	r3, #10
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7ba:	6866      	ldr	r6, [r4, #4]
 800f7bc:	60a6      	str	r6, [r4, #8]
 800f7be:	2e00      	cmp	r6, #0
 800f7c0:	bfa2      	ittt	ge
 800f7c2:	6821      	ldrge	r1, [r4, #0]
 800f7c4:	f021 0104 	bicge.w	r1, r1, #4
 800f7c8:	6021      	strge	r1, [r4, #0]
 800f7ca:	b90d      	cbnz	r5, 800f7d0 <_printf_i+0x118>
 800f7cc:	2e00      	cmp	r6, #0
 800f7ce:	d04d      	beq.n	800f86c <_printf_i+0x1b4>
 800f7d0:	4616      	mov	r6, r2
 800f7d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7d6:	fb03 5711 	mls	r7, r3, r1, r5
 800f7da:	5dc7      	ldrb	r7, [r0, r7]
 800f7dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f7e0:	462f      	mov	r7, r5
 800f7e2:	42bb      	cmp	r3, r7
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	d9f4      	bls.n	800f7d2 <_printf_i+0x11a>
 800f7e8:	2b08      	cmp	r3, #8
 800f7ea:	d10b      	bne.n	800f804 <_printf_i+0x14c>
 800f7ec:	6823      	ldr	r3, [r4, #0]
 800f7ee:	07df      	lsls	r7, r3, #31
 800f7f0:	d508      	bpl.n	800f804 <_printf_i+0x14c>
 800f7f2:	6923      	ldr	r3, [r4, #16]
 800f7f4:	6861      	ldr	r1, [r4, #4]
 800f7f6:	4299      	cmp	r1, r3
 800f7f8:	bfde      	ittt	le
 800f7fa:	2330      	movle	r3, #48	; 0x30
 800f7fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f800:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f804:	1b92      	subs	r2, r2, r6
 800f806:	6122      	str	r2, [r4, #16]
 800f808:	f8cd a000 	str.w	sl, [sp]
 800f80c:	464b      	mov	r3, r9
 800f80e:	aa03      	add	r2, sp, #12
 800f810:	4621      	mov	r1, r4
 800f812:	4640      	mov	r0, r8
 800f814:	f7ff fee2 	bl	800f5dc <_printf_common>
 800f818:	3001      	adds	r0, #1
 800f81a:	d14c      	bne.n	800f8b6 <_printf_i+0x1fe>
 800f81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f820:	b004      	add	sp, #16
 800f822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f826:	4835      	ldr	r0, [pc, #212]	; (800f8fc <_printf_i+0x244>)
 800f828:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f82c:	6823      	ldr	r3, [r4, #0]
 800f82e:	680e      	ldr	r6, [r1, #0]
 800f830:	061f      	lsls	r7, r3, #24
 800f832:	f856 5b04 	ldr.w	r5, [r6], #4
 800f836:	600e      	str	r6, [r1, #0]
 800f838:	d514      	bpl.n	800f864 <_printf_i+0x1ac>
 800f83a:	07d9      	lsls	r1, r3, #31
 800f83c:	bf44      	itt	mi
 800f83e:	f043 0320 	orrmi.w	r3, r3, #32
 800f842:	6023      	strmi	r3, [r4, #0]
 800f844:	b91d      	cbnz	r5, 800f84e <_printf_i+0x196>
 800f846:	6823      	ldr	r3, [r4, #0]
 800f848:	f023 0320 	bic.w	r3, r3, #32
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	2310      	movs	r3, #16
 800f850:	e7b0      	b.n	800f7b4 <_printf_i+0xfc>
 800f852:	6823      	ldr	r3, [r4, #0]
 800f854:	f043 0320 	orr.w	r3, r3, #32
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	2378      	movs	r3, #120	; 0x78
 800f85c:	4828      	ldr	r0, [pc, #160]	; (800f900 <_printf_i+0x248>)
 800f85e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f862:	e7e3      	b.n	800f82c <_printf_i+0x174>
 800f864:	065e      	lsls	r6, r3, #25
 800f866:	bf48      	it	mi
 800f868:	b2ad      	uxthmi	r5, r5
 800f86a:	e7e6      	b.n	800f83a <_printf_i+0x182>
 800f86c:	4616      	mov	r6, r2
 800f86e:	e7bb      	b.n	800f7e8 <_printf_i+0x130>
 800f870:	680b      	ldr	r3, [r1, #0]
 800f872:	6826      	ldr	r6, [r4, #0]
 800f874:	6960      	ldr	r0, [r4, #20]
 800f876:	1d1d      	adds	r5, r3, #4
 800f878:	600d      	str	r5, [r1, #0]
 800f87a:	0635      	lsls	r5, r6, #24
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	d501      	bpl.n	800f884 <_printf_i+0x1cc>
 800f880:	6018      	str	r0, [r3, #0]
 800f882:	e002      	b.n	800f88a <_printf_i+0x1d2>
 800f884:	0671      	lsls	r1, r6, #25
 800f886:	d5fb      	bpl.n	800f880 <_printf_i+0x1c8>
 800f888:	8018      	strh	r0, [r3, #0]
 800f88a:	2300      	movs	r3, #0
 800f88c:	6123      	str	r3, [r4, #16]
 800f88e:	4616      	mov	r6, r2
 800f890:	e7ba      	b.n	800f808 <_printf_i+0x150>
 800f892:	680b      	ldr	r3, [r1, #0]
 800f894:	1d1a      	adds	r2, r3, #4
 800f896:	600a      	str	r2, [r1, #0]
 800f898:	681e      	ldr	r6, [r3, #0]
 800f89a:	6862      	ldr	r2, [r4, #4]
 800f89c:	2100      	movs	r1, #0
 800f89e:	4630      	mov	r0, r6
 800f8a0:	f7f0 fc9e 	bl	80001e0 <memchr>
 800f8a4:	b108      	cbz	r0, 800f8aa <_printf_i+0x1f2>
 800f8a6:	1b80      	subs	r0, r0, r6
 800f8a8:	6060      	str	r0, [r4, #4]
 800f8aa:	6863      	ldr	r3, [r4, #4]
 800f8ac:	6123      	str	r3, [r4, #16]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8b4:	e7a8      	b.n	800f808 <_printf_i+0x150>
 800f8b6:	6923      	ldr	r3, [r4, #16]
 800f8b8:	4632      	mov	r2, r6
 800f8ba:	4649      	mov	r1, r9
 800f8bc:	4640      	mov	r0, r8
 800f8be:	47d0      	blx	sl
 800f8c0:	3001      	adds	r0, #1
 800f8c2:	d0ab      	beq.n	800f81c <_printf_i+0x164>
 800f8c4:	6823      	ldr	r3, [r4, #0]
 800f8c6:	079b      	lsls	r3, r3, #30
 800f8c8:	d413      	bmi.n	800f8f2 <_printf_i+0x23a>
 800f8ca:	68e0      	ldr	r0, [r4, #12]
 800f8cc:	9b03      	ldr	r3, [sp, #12]
 800f8ce:	4298      	cmp	r0, r3
 800f8d0:	bfb8      	it	lt
 800f8d2:	4618      	movlt	r0, r3
 800f8d4:	e7a4      	b.n	800f820 <_printf_i+0x168>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	4632      	mov	r2, r6
 800f8da:	4649      	mov	r1, r9
 800f8dc:	4640      	mov	r0, r8
 800f8de:	47d0      	blx	sl
 800f8e0:	3001      	adds	r0, #1
 800f8e2:	d09b      	beq.n	800f81c <_printf_i+0x164>
 800f8e4:	3501      	adds	r5, #1
 800f8e6:	68e3      	ldr	r3, [r4, #12]
 800f8e8:	9903      	ldr	r1, [sp, #12]
 800f8ea:	1a5b      	subs	r3, r3, r1
 800f8ec:	42ab      	cmp	r3, r5
 800f8ee:	dcf2      	bgt.n	800f8d6 <_printf_i+0x21e>
 800f8f0:	e7eb      	b.n	800f8ca <_printf_i+0x212>
 800f8f2:	2500      	movs	r5, #0
 800f8f4:	f104 0619 	add.w	r6, r4, #25
 800f8f8:	e7f5      	b.n	800f8e6 <_printf_i+0x22e>
 800f8fa:	bf00      	nop
 800f8fc:	08011f2e 	.word	0x08011f2e
 800f900:	08011f3f 	.word	0x08011f3f

0800f904 <cleanup_glue>:
 800f904:	b538      	push	{r3, r4, r5, lr}
 800f906:	460c      	mov	r4, r1
 800f908:	6809      	ldr	r1, [r1, #0]
 800f90a:	4605      	mov	r5, r0
 800f90c:	b109      	cbz	r1, 800f912 <cleanup_glue+0xe>
 800f90e:	f7ff fff9 	bl	800f904 <cleanup_glue>
 800f912:	4621      	mov	r1, r4
 800f914:	4628      	mov	r0, r5
 800f916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f91a:	f7ff badf 	b.w	800eedc <_free_r>
	...

0800f920 <_reclaim_reent>:
 800f920:	4b2c      	ldr	r3, [pc, #176]	; (800f9d4 <_reclaim_reent+0xb4>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4283      	cmp	r3, r0
 800f926:	b570      	push	{r4, r5, r6, lr}
 800f928:	4604      	mov	r4, r0
 800f92a:	d051      	beq.n	800f9d0 <_reclaim_reent+0xb0>
 800f92c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f92e:	b143      	cbz	r3, 800f942 <_reclaim_reent+0x22>
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d14a      	bne.n	800f9cc <_reclaim_reent+0xac>
 800f936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f938:	6819      	ldr	r1, [r3, #0]
 800f93a:	b111      	cbz	r1, 800f942 <_reclaim_reent+0x22>
 800f93c:	4620      	mov	r0, r4
 800f93e:	f7ff facd 	bl	800eedc <_free_r>
 800f942:	6961      	ldr	r1, [r4, #20]
 800f944:	b111      	cbz	r1, 800f94c <_reclaim_reent+0x2c>
 800f946:	4620      	mov	r0, r4
 800f948:	f7ff fac8 	bl	800eedc <_free_r>
 800f94c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f94e:	b111      	cbz	r1, 800f956 <_reclaim_reent+0x36>
 800f950:	4620      	mov	r0, r4
 800f952:	f7ff fac3 	bl	800eedc <_free_r>
 800f956:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f958:	b111      	cbz	r1, 800f960 <_reclaim_reent+0x40>
 800f95a:	4620      	mov	r0, r4
 800f95c:	f7ff fabe 	bl	800eedc <_free_r>
 800f960:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f962:	b111      	cbz	r1, 800f96a <_reclaim_reent+0x4a>
 800f964:	4620      	mov	r0, r4
 800f966:	f7ff fab9 	bl	800eedc <_free_r>
 800f96a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f96c:	b111      	cbz	r1, 800f974 <_reclaim_reent+0x54>
 800f96e:	4620      	mov	r0, r4
 800f970:	f7ff fab4 	bl	800eedc <_free_r>
 800f974:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f976:	b111      	cbz	r1, 800f97e <_reclaim_reent+0x5e>
 800f978:	4620      	mov	r0, r4
 800f97a:	f7ff faaf 	bl	800eedc <_free_r>
 800f97e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f980:	b111      	cbz	r1, 800f988 <_reclaim_reent+0x68>
 800f982:	4620      	mov	r0, r4
 800f984:	f7ff faaa 	bl	800eedc <_free_r>
 800f988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f98a:	b111      	cbz	r1, 800f992 <_reclaim_reent+0x72>
 800f98c:	4620      	mov	r0, r4
 800f98e:	f7ff faa5 	bl	800eedc <_free_r>
 800f992:	69a3      	ldr	r3, [r4, #24]
 800f994:	b1e3      	cbz	r3, 800f9d0 <_reclaim_reent+0xb0>
 800f996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f998:	4620      	mov	r0, r4
 800f99a:	4798      	blx	r3
 800f99c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f99e:	b1b9      	cbz	r1, 800f9d0 <_reclaim_reent+0xb0>
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9a6:	f7ff bfad 	b.w	800f904 <cleanup_glue>
 800f9aa:	5949      	ldr	r1, [r1, r5]
 800f9ac:	b941      	cbnz	r1, 800f9c0 <_reclaim_reent+0xa0>
 800f9ae:	3504      	adds	r5, #4
 800f9b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9b2:	2d80      	cmp	r5, #128	; 0x80
 800f9b4:	68d9      	ldr	r1, [r3, #12]
 800f9b6:	d1f8      	bne.n	800f9aa <_reclaim_reent+0x8a>
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f7ff fa8f 	bl	800eedc <_free_r>
 800f9be:	e7ba      	b.n	800f936 <_reclaim_reent+0x16>
 800f9c0:	680e      	ldr	r6, [r1, #0]
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f7ff fa8a 	bl	800eedc <_free_r>
 800f9c8:	4631      	mov	r1, r6
 800f9ca:	e7ef      	b.n	800f9ac <_reclaim_reent+0x8c>
 800f9cc:	2500      	movs	r5, #0
 800f9ce:	e7ef      	b.n	800f9b0 <_reclaim_reent+0x90>
 800f9d0:	bd70      	pop	{r4, r5, r6, pc}
 800f9d2:	bf00      	nop
 800f9d4:	20000184 	.word	0x20000184

0800f9d8 <_sbrk_r>:
 800f9d8:	b538      	push	{r3, r4, r5, lr}
 800f9da:	4d06      	ldr	r5, [pc, #24]	; (800f9f4 <_sbrk_r+0x1c>)
 800f9dc:	2300      	movs	r3, #0
 800f9de:	4604      	mov	r4, r0
 800f9e0:	4608      	mov	r0, r1
 800f9e2:	602b      	str	r3, [r5, #0]
 800f9e4:	f7f4 f810 	bl	8003a08 <_sbrk>
 800f9e8:	1c43      	adds	r3, r0, #1
 800f9ea:	d102      	bne.n	800f9f2 <_sbrk_r+0x1a>
 800f9ec:	682b      	ldr	r3, [r5, #0]
 800f9ee:	b103      	cbz	r3, 800f9f2 <_sbrk_r+0x1a>
 800f9f0:	6023      	str	r3, [r4, #0]
 800f9f2:	bd38      	pop	{r3, r4, r5, pc}
 800f9f4:	2000df60 	.word	0x2000df60

0800f9f8 <siprintf>:
 800f9f8:	b40e      	push	{r1, r2, r3}
 800f9fa:	b500      	push	{lr}
 800f9fc:	b09c      	sub	sp, #112	; 0x70
 800f9fe:	ab1d      	add	r3, sp, #116	; 0x74
 800fa00:	9002      	str	r0, [sp, #8]
 800fa02:	9006      	str	r0, [sp, #24]
 800fa04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa08:	4809      	ldr	r0, [pc, #36]	; (800fa30 <siprintf+0x38>)
 800fa0a:	9107      	str	r1, [sp, #28]
 800fa0c:	9104      	str	r1, [sp, #16]
 800fa0e:	4909      	ldr	r1, [pc, #36]	; (800fa34 <siprintf+0x3c>)
 800fa10:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa14:	9105      	str	r1, [sp, #20]
 800fa16:	6800      	ldr	r0, [r0, #0]
 800fa18:	9301      	str	r3, [sp, #4]
 800fa1a:	a902      	add	r1, sp, #8
 800fa1c:	f001 fc10 	bl	8011240 <_svfiprintf_r>
 800fa20:	9b02      	ldr	r3, [sp, #8]
 800fa22:	2200      	movs	r2, #0
 800fa24:	701a      	strb	r2, [r3, #0]
 800fa26:	b01c      	add	sp, #112	; 0x70
 800fa28:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa2c:	b003      	add	sp, #12
 800fa2e:	4770      	bx	lr
 800fa30:	20000184 	.word	0x20000184
 800fa34:	ffff0208 	.word	0xffff0208

0800fa38 <__sread>:
 800fa38:	b510      	push	{r4, lr}
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa40:	f001 fcfe 	bl	8011440 <_read_r>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	bfab      	itete	ge
 800fa48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa4a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa4c:	181b      	addge	r3, r3, r0
 800fa4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa52:	bfac      	ite	ge
 800fa54:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa56:	81a3      	strhlt	r3, [r4, #12]
 800fa58:	bd10      	pop	{r4, pc}

0800fa5a <__swrite>:
 800fa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa5e:	461f      	mov	r7, r3
 800fa60:	898b      	ldrh	r3, [r1, #12]
 800fa62:	05db      	lsls	r3, r3, #23
 800fa64:	4605      	mov	r5, r0
 800fa66:	460c      	mov	r4, r1
 800fa68:	4616      	mov	r6, r2
 800fa6a:	d505      	bpl.n	800fa78 <__swrite+0x1e>
 800fa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa70:	2302      	movs	r3, #2
 800fa72:	2200      	movs	r2, #0
 800fa74:	f000 ffde 	bl	8010a34 <_lseek_r>
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa82:	81a3      	strh	r3, [r4, #12]
 800fa84:	4632      	mov	r2, r6
 800fa86:	463b      	mov	r3, r7
 800fa88:	4628      	mov	r0, r5
 800fa8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8e:	f000 b86f 	b.w	800fb70 <_write_r>

0800fa92 <__sseek>:
 800fa92:	b510      	push	{r4, lr}
 800fa94:	460c      	mov	r4, r1
 800fa96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa9a:	f000 ffcb 	bl	8010a34 <_lseek_r>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	bf15      	itete	ne
 800faa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800faa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800faaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800faae:	81a3      	strheq	r3, [r4, #12]
 800fab0:	bf18      	it	ne
 800fab2:	81a3      	strhne	r3, [r4, #12]
 800fab4:	bd10      	pop	{r4, pc}

0800fab6 <__sclose>:
 800fab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faba:	f000 b86b 	b.w	800fb94 <_close_r>

0800fabe <strcat>:
 800fabe:	b510      	push	{r4, lr}
 800fac0:	4602      	mov	r2, r0
 800fac2:	7814      	ldrb	r4, [r2, #0]
 800fac4:	4613      	mov	r3, r2
 800fac6:	3201      	adds	r2, #1
 800fac8:	2c00      	cmp	r4, #0
 800faca:	d1fa      	bne.n	800fac2 <strcat+0x4>
 800facc:	3b01      	subs	r3, #1
 800face:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fad6:	2a00      	cmp	r2, #0
 800fad8:	d1f9      	bne.n	800face <strcat+0x10>
 800fada:	bd10      	pop	{r4, pc}

0800fadc <strcpy>:
 800fadc:	4603      	mov	r3, r0
 800fade:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fae2:	f803 2b01 	strb.w	r2, [r3], #1
 800fae6:	2a00      	cmp	r2, #0
 800fae8:	d1f9      	bne.n	800fade <strcpy+0x2>
 800faea:	4770      	bx	lr

0800faec <__utoa>:
 800faec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faee:	4c1f      	ldr	r4, [pc, #124]	; (800fb6c <__utoa+0x80>)
 800faf0:	b08b      	sub	sp, #44	; 0x2c
 800faf2:	4605      	mov	r5, r0
 800faf4:	460b      	mov	r3, r1
 800faf6:	466e      	mov	r6, sp
 800faf8:	f104 0c20 	add.w	ip, r4, #32
 800fafc:	6820      	ldr	r0, [r4, #0]
 800fafe:	6861      	ldr	r1, [r4, #4]
 800fb00:	4637      	mov	r7, r6
 800fb02:	c703      	stmia	r7!, {r0, r1}
 800fb04:	3408      	adds	r4, #8
 800fb06:	4564      	cmp	r4, ip
 800fb08:	463e      	mov	r6, r7
 800fb0a:	d1f7      	bne.n	800fafc <__utoa+0x10>
 800fb0c:	7921      	ldrb	r1, [r4, #4]
 800fb0e:	7139      	strb	r1, [r7, #4]
 800fb10:	1e91      	subs	r1, r2, #2
 800fb12:	6820      	ldr	r0, [r4, #0]
 800fb14:	6038      	str	r0, [r7, #0]
 800fb16:	2922      	cmp	r1, #34	; 0x22
 800fb18:	f04f 0100 	mov.w	r1, #0
 800fb1c:	d904      	bls.n	800fb28 <__utoa+0x3c>
 800fb1e:	7019      	strb	r1, [r3, #0]
 800fb20:	460b      	mov	r3, r1
 800fb22:	4618      	mov	r0, r3
 800fb24:	b00b      	add	sp, #44	; 0x2c
 800fb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb28:	1e58      	subs	r0, r3, #1
 800fb2a:	4684      	mov	ip, r0
 800fb2c:	fbb5 f7f2 	udiv	r7, r5, r2
 800fb30:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800fb34:	fb02 5617 	mls	r6, r2, r7, r5
 800fb38:	4476      	add	r6, lr
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800fb40:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800fb44:	462e      	mov	r6, r5
 800fb46:	42b2      	cmp	r2, r6
 800fb48:	f101 0101 	add.w	r1, r1, #1
 800fb4c:	463d      	mov	r5, r7
 800fb4e:	d9ed      	bls.n	800fb2c <__utoa+0x40>
 800fb50:	2200      	movs	r2, #0
 800fb52:	545a      	strb	r2, [r3, r1]
 800fb54:	1919      	adds	r1, r3, r4
 800fb56:	1aa5      	subs	r5, r4, r2
 800fb58:	42aa      	cmp	r2, r5
 800fb5a:	dae2      	bge.n	800fb22 <__utoa+0x36>
 800fb5c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800fb60:	780e      	ldrb	r6, [r1, #0]
 800fb62:	7006      	strb	r6, [r0, #0]
 800fb64:	3201      	adds	r2, #1
 800fb66:	f801 5901 	strb.w	r5, [r1], #-1
 800fb6a:	e7f4      	b.n	800fb56 <__utoa+0x6a>
 800fb6c:	08011f50 	.word	0x08011f50

0800fb70 <_write_r>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	4d07      	ldr	r5, [pc, #28]	; (800fb90 <_write_r+0x20>)
 800fb74:	4604      	mov	r4, r0
 800fb76:	4608      	mov	r0, r1
 800fb78:	4611      	mov	r1, r2
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	602a      	str	r2, [r5, #0]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	f7f3 fef1 	bl	8003966 <_write>
 800fb84:	1c43      	adds	r3, r0, #1
 800fb86:	d102      	bne.n	800fb8e <_write_r+0x1e>
 800fb88:	682b      	ldr	r3, [r5, #0]
 800fb8a:	b103      	cbz	r3, 800fb8e <_write_r+0x1e>
 800fb8c:	6023      	str	r3, [r4, #0]
 800fb8e:	bd38      	pop	{r3, r4, r5, pc}
 800fb90:	2000df60 	.word	0x2000df60

0800fb94 <_close_r>:
 800fb94:	b538      	push	{r3, r4, r5, lr}
 800fb96:	4d06      	ldr	r5, [pc, #24]	; (800fbb0 <_close_r+0x1c>)
 800fb98:	2300      	movs	r3, #0
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	4608      	mov	r0, r1
 800fb9e:	602b      	str	r3, [r5, #0]
 800fba0:	f7f3 fefd 	bl	800399e <_close>
 800fba4:	1c43      	adds	r3, r0, #1
 800fba6:	d102      	bne.n	800fbae <_close_r+0x1a>
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	b103      	cbz	r3, 800fbae <_close_r+0x1a>
 800fbac:	6023      	str	r3, [r4, #0]
 800fbae:	bd38      	pop	{r3, r4, r5, pc}
 800fbb0:	2000df60 	.word	0x2000df60

0800fbb4 <quorem>:
 800fbb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb8:	6903      	ldr	r3, [r0, #16]
 800fbba:	690c      	ldr	r4, [r1, #16]
 800fbbc:	42a3      	cmp	r3, r4
 800fbbe:	4607      	mov	r7, r0
 800fbc0:	f2c0 8081 	blt.w	800fcc6 <quorem+0x112>
 800fbc4:	3c01      	subs	r4, #1
 800fbc6:	f101 0814 	add.w	r8, r1, #20
 800fbca:	f100 0514 	add.w	r5, r0, #20
 800fbce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbd2:	9301      	str	r3, [sp, #4]
 800fbd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fbd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fbe4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbe8:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbec:	d331      	bcc.n	800fc52 <quorem+0x9e>
 800fbee:	f04f 0e00 	mov.w	lr, #0
 800fbf2:	4640      	mov	r0, r8
 800fbf4:	46ac      	mov	ip, r5
 800fbf6:	46f2      	mov	sl, lr
 800fbf8:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbfc:	b293      	uxth	r3, r2
 800fbfe:	fb06 e303 	mla	r3, r6, r3, lr
 800fc02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	ebaa 0303 	sub.w	r3, sl, r3
 800fc0c:	0c12      	lsrs	r2, r2, #16
 800fc0e:	f8dc a000 	ldr.w	sl, [ip]
 800fc12:	fb06 e202 	mla	r2, r6, r2, lr
 800fc16:	fa13 f38a 	uxtah	r3, r3, sl
 800fc1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc1e:	fa1f fa82 	uxth.w	sl, r2
 800fc22:	f8dc 2000 	ldr.w	r2, [ip]
 800fc26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fc2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc34:	4581      	cmp	r9, r0
 800fc36:	f84c 3b04 	str.w	r3, [ip], #4
 800fc3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fc3e:	d2db      	bcs.n	800fbf8 <quorem+0x44>
 800fc40:	f855 300b 	ldr.w	r3, [r5, fp]
 800fc44:	b92b      	cbnz	r3, 800fc52 <quorem+0x9e>
 800fc46:	9b01      	ldr	r3, [sp, #4]
 800fc48:	3b04      	subs	r3, #4
 800fc4a:	429d      	cmp	r5, r3
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	d32e      	bcc.n	800fcae <quorem+0xfa>
 800fc50:	613c      	str	r4, [r7, #16]
 800fc52:	4638      	mov	r0, r7
 800fc54:	f001 f98a 	bl	8010f6c <__mcmp>
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	db24      	blt.n	800fca6 <quorem+0xf2>
 800fc5c:	3601      	adds	r6, #1
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f04f 0c00 	mov.w	ip, #0
 800fc64:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc68:	f8d0 e000 	ldr.w	lr, [r0]
 800fc6c:	b293      	uxth	r3, r2
 800fc6e:	ebac 0303 	sub.w	r3, ip, r3
 800fc72:	0c12      	lsrs	r2, r2, #16
 800fc74:	fa13 f38e 	uxtah	r3, r3, lr
 800fc78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc86:	45c1      	cmp	r9, r8
 800fc88:	f840 3b04 	str.w	r3, [r0], #4
 800fc8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc90:	d2e8      	bcs.n	800fc64 <quorem+0xb0>
 800fc92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc9a:	b922      	cbnz	r2, 800fca6 <quorem+0xf2>
 800fc9c:	3b04      	subs	r3, #4
 800fc9e:	429d      	cmp	r5, r3
 800fca0:	461a      	mov	r2, r3
 800fca2:	d30a      	bcc.n	800fcba <quorem+0x106>
 800fca4:	613c      	str	r4, [r7, #16]
 800fca6:	4630      	mov	r0, r6
 800fca8:	b003      	add	sp, #12
 800fcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcae:	6812      	ldr	r2, [r2, #0]
 800fcb0:	3b04      	subs	r3, #4
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	d1cc      	bne.n	800fc50 <quorem+0x9c>
 800fcb6:	3c01      	subs	r4, #1
 800fcb8:	e7c7      	b.n	800fc4a <quorem+0x96>
 800fcba:	6812      	ldr	r2, [r2, #0]
 800fcbc:	3b04      	subs	r3, #4
 800fcbe:	2a00      	cmp	r2, #0
 800fcc0:	d1f0      	bne.n	800fca4 <quorem+0xf0>
 800fcc2:	3c01      	subs	r4, #1
 800fcc4:	e7eb      	b.n	800fc9e <quorem+0xea>
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	e7ee      	b.n	800fca8 <quorem+0xf4>
 800fcca:	0000      	movs	r0, r0
 800fccc:	0000      	movs	r0, r0
	...

0800fcd0 <_dtoa_r>:
 800fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	ed2d 8b02 	vpush	{d8}
 800fcd8:	ec57 6b10 	vmov	r6, r7, d0
 800fcdc:	b095      	sub	sp, #84	; 0x54
 800fcde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fce0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fce4:	9105      	str	r1, [sp, #20]
 800fce6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fcea:	4604      	mov	r4, r0
 800fcec:	9209      	str	r2, [sp, #36]	; 0x24
 800fcee:	930f      	str	r3, [sp, #60]	; 0x3c
 800fcf0:	b975      	cbnz	r5, 800fd10 <_dtoa_r+0x40>
 800fcf2:	2010      	movs	r0, #16
 800fcf4:	f7ff f8cc 	bl	800ee90 <malloc>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	6260      	str	r0, [r4, #36]	; 0x24
 800fcfc:	b920      	cbnz	r0, 800fd08 <_dtoa_r+0x38>
 800fcfe:	4bb2      	ldr	r3, [pc, #712]	; (800ffc8 <_dtoa_r+0x2f8>)
 800fd00:	21ea      	movs	r1, #234	; 0xea
 800fd02:	48b2      	ldr	r0, [pc, #712]	; (800ffcc <_dtoa_r+0x2fc>)
 800fd04:	f001 fbae 	bl	8011464 <__assert_func>
 800fd08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd0c:	6005      	str	r5, [r0, #0]
 800fd0e:	60c5      	str	r5, [r0, #12]
 800fd10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd12:	6819      	ldr	r1, [r3, #0]
 800fd14:	b151      	cbz	r1, 800fd2c <_dtoa_r+0x5c>
 800fd16:	685a      	ldr	r2, [r3, #4]
 800fd18:	604a      	str	r2, [r1, #4]
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	4093      	lsls	r3, r2
 800fd1e:	608b      	str	r3, [r1, #8]
 800fd20:	4620      	mov	r0, r4
 800fd22:	f000 fee5 	bl	8010af0 <_Bfree>
 800fd26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd28:	2200      	movs	r2, #0
 800fd2a:	601a      	str	r2, [r3, #0]
 800fd2c:	1e3b      	subs	r3, r7, #0
 800fd2e:	bfb9      	ittee	lt
 800fd30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fd34:	9303      	strlt	r3, [sp, #12]
 800fd36:	2300      	movge	r3, #0
 800fd38:	f8c8 3000 	strge.w	r3, [r8]
 800fd3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fd40:	4ba3      	ldr	r3, [pc, #652]	; (800ffd0 <_dtoa_r+0x300>)
 800fd42:	bfbc      	itt	lt
 800fd44:	2201      	movlt	r2, #1
 800fd46:	f8c8 2000 	strlt.w	r2, [r8]
 800fd4a:	ea33 0309 	bics.w	r3, r3, r9
 800fd4e:	d11b      	bne.n	800fd88 <_dtoa_r+0xb8>
 800fd50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd52:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd56:	6013      	str	r3, [r2, #0]
 800fd58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd5c:	4333      	orrs	r3, r6
 800fd5e:	f000 857a 	beq.w	8010856 <_dtoa_r+0xb86>
 800fd62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd64:	b963      	cbnz	r3, 800fd80 <_dtoa_r+0xb0>
 800fd66:	4b9b      	ldr	r3, [pc, #620]	; (800ffd4 <_dtoa_r+0x304>)
 800fd68:	e024      	b.n	800fdb4 <_dtoa_r+0xe4>
 800fd6a:	4b9b      	ldr	r3, [pc, #620]	; (800ffd8 <_dtoa_r+0x308>)
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	3308      	adds	r3, #8
 800fd70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd72:	6013      	str	r3, [r2, #0]
 800fd74:	9800      	ldr	r0, [sp, #0]
 800fd76:	b015      	add	sp, #84	; 0x54
 800fd78:	ecbd 8b02 	vpop	{d8}
 800fd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd80:	4b94      	ldr	r3, [pc, #592]	; (800ffd4 <_dtoa_r+0x304>)
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	3303      	adds	r3, #3
 800fd86:	e7f3      	b.n	800fd70 <_dtoa_r+0xa0>
 800fd88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	ec51 0b17 	vmov	r0, r1, d7
 800fd92:	2300      	movs	r3, #0
 800fd94:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fd98:	f7f0 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd9c:	4680      	mov	r8, r0
 800fd9e:	b158      	cbz	r0, 800fdb8 <_dtoa_r+0xe8>
 800fda0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fda2:	2301      	movs	r3, #1
 800fda4:	6013      	str	r3, [r2, #0]
 800fda6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f000 8551 	beq.w	8010850 <_dtoa_r+0xb80>
 800fdae:	488b      	ldr	r0, [pc, #556]	; (800ffdc <_dtoa_r+0x30c>)
 800fdb0:	6018      	str	r0, [r3, #0]
 800fdb2:	1e43      	subs	r3, r0, #1
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	e7dd      	b.n	800fd74 <_dtoa_r+0xa4>
 800fdb8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fdbc:	aa12      	add	r2, sp, #72	; 0x48
 800fdbe:	a913      	add	r1, sp, #76	; 0x4c
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f001 f977 	bl	80110b4 <__d2b>
 800fdc6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fdca:	4683      	mov	fp, r0
 800fdcc:	2d00      	cmp	r5, #0
 800fdce:	d07c      	beq.n	800feca <_dtoa_r+0x1fa>
 800fdd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdd2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fdd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdda:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fdde:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fde2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fde6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fdea:	4b7d      	ldr	r3, [pc, #500]	; (800ffe0 <_dtoa_r+0x310>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	4630      	mov	r0, r6
 800fdf0:	4639      	mov	r1, r7
 800fdf2:	f7f0 fa49 	bl	8000288 <__aeabi_dsub>
 800fdf6:	a36e      	add	r3, pc, #440	; (adr r3, 800ffb0 <_dtoa_r+0x2e0>)
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	f7f0 fbfc 	bl	80005f8 <__aeabi_dmul>
 800fe00:	a36d      	add	r3, pc, #436	; (adr r3, 800ffb8 <_dtoa_r+0x2e8>)
 800fe02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe06:	f7f0 fa41 	bl	800028c <__adddf3>
 800fe0a:	4606      	mov	r6, r0
 800fe0c:	4628      	mov	r0, r5
 800fe0e:	460f      	mov	r7, r1
 800fe10:	f7f0 fb88 	bl	8000524 <__aeabi_i2d>
 800fe14:	a36a      	add	r3, pc, #424	; (adr r3, 800ffc0 <_dtoa_r+0x2f0>)
 800fe16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1a:	f7f0 fbed 	bl	80005f8 <__aeabi_dmul>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	460b      	mov	r3, r1
 800fe22:	4630      	mov	r0, r6
 800fe24:	4639      	mov	r1, r7
 800fe26:	f7f0 fa31 	bl	800028c <__adddf3>
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	460f      	mov	r7, r1
 800fe2e:	f7f0 fe93 	bl	8000b58 <__aeabi_d2iz>
 800fe32:	2200      	movs	r2, #0
 800fe34:	4682      	mov	sl, r0
 800fe36:	2300      	movs	r3, #0
 800fe38:	4630      	mov	r0, r6
 800fe3a:	4639      	mov	r1, r7
 800fe3c:	f7f0 fe4e 	bl	8000adc <__aeabi_dcmplt>
 800fe40:	b148      	cbz	r0, 800fe56 <_dtoa_r+0x186>
 800fe42:	4650      	mov	r0, sl
 800fe44:	f7f0 fb6e 	bl	8000524 <__aeabi_i2d>
 800fe48:	4632      	mov	r2, r6
 800fe4a:	463b      	mov	r3, r7
 800fe4c:	f7f0 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe50:	b908      	cbnz	r0, 800fe56 <_dtoa_r+0x186>
 800fe52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fe56:	f1ba 0f16 	cmp.w	sl, #22
 800fe5a:	d854      	bhi.n	800ff06 <_dtoa_r+0x236>
 800fe5c:	4b61      	ldr	r3, [pc, #388]	; (800ffe4 <_dtoa_r+0x314>)
 800fe5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fe62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe6a:	f7f0 fe37 	bl	8000adc <__aeabi_dcmplt>
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	d04b      	beq.n	800ff0a <_dtoa_r+0x23a>
 800fe72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fe76:	2300      	movs	r3, #0
 800fe78:	930e      	str	r3, [sp, #56]	; 0x38
 800fe7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe7c:	1b5d      	subs	r5, r3, r5
 800fe7e:	1e6b      	subs	r3, r5, #1
 800fe80:	9304      	str	r3, [sp, #16]
 800fe82:	bf43      	ittte	mi
 800fe84:	2300      	movmi	r3, #0
 800fe86:	f1c5 0801 	rsbmi	r8, r5, #1
 800fe8a:	9304      	strmi	r3, [sp, #16]
 800fe8c:	f04f 0800 	movpl.w	r8, #0
 800fe90:	f1ba 0f00 	cmp.w	sl, #0
 800fe94:	db3b      	blt.n	800ff0e <_dtoa_r+0x23e>
 800fe96:	9b04      	ldr	r3, [sp, #16]
 800fe98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fe9c:	4453      	add	r3, sl
 800fe9e:	9304      	str	r3, [sp, #16]
 800fea0:	2300      	movs	r3, #0
 800fea2:	9306      	str	r3, [sp, #24]
 800fea4:	9b05      	ldr	r3, [sp, #20]
 800fea6:	2b09      	cmp	r3, #9
 800fea8:	d869      	bhi.n	800ff7e <_dtoa_r+0x2ae>
 800feaa:	2b05      	cmp	r3, #5
 800feac:	bfc4      	itt	gt
 800feae:	3b04      	subgt	r3, #4
 800feb0:	9305      	strgt	r3, [sp, #20]
 800feb2:	9b05      	ldr	r3, [sp, #20]
 800feb4:	f1a3 0302 	sub.w	r3, r3, #2
 800feb8:	bfcc      	ite	gt
 800feba:	2500      	movgt	r5, #0
 800febc:	2501      	movle	r5, #1
 800febe:	2b03      	cmp	r3, #3
 800fec0:	d869      	bhi.n	800ff96 <_dtoa_r+0x2c6>
 800fec2:	e8df f003 	tbb	[pc, r3]
 800fec6:	4e2c      	.short	0x4e2c
 800fec8:	5a4c      	.short	0x5a4c
 800feca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fece:	441d      	add	r5, r3
 800fed0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fed4:	2b20      	cmp	r3, #32
 800fed6:	bfc1      	itttt	gt
 800fed8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fedc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fee0:	fa09 f303 	lslgt.w	r3, r9, r3
 800fee4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fee8:	bfda      	itte	le
 800feea:	f1c3 0320 	rsble	r3, r3, #32
 800feee:	fa06 f003 	lslle.w	r0, r6, r3
 800fef2:	4318      	orrgt	r0, r3
 800fef4:	f7f0 fb06 	bl	8000504 <__aeabi_ui2d>
 800fef8:	2301      	movs	r3, #1
 800fefa:	4606      	mov	r6, r0
 800fefc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ff00:	3d01      	subs	r5, #1
 800ff02:	9310      	str	r3, [sp, #64]	; 0x40
 800ff04:	e771      	b.n	800fdea <_dtoa_r+0x11a>
 800ff06:	2301      	movs	r3, #1
 800ff08:	e7b6      	b.n	800fe78 <_dtoa_r+0x1a8>
 800ff0a:	900e      	str	r0, [sp, #56]	; 0x38
 800ff0c:	e7b5      	b.n	800fe7a <_dtoa_r+0x1aa>
 800ff0e:	f1ca 0300 	rsb	r3, sl, #0
 800ff12:	9306      	str	r3, [sp, #24]
 800ff14:	2300      	movs	r3, #0
 800ff16:	eba8 080a 	sub.w	r8, r8, sl
 800ff1a:	930d      	str	r3, [sp, #52]	; 0x34
 800ff1c:	e7c2      	b.n	800fea4 <_dtoa_r+0x1d4>
 800ff1e:	2300      	movs	r3, #0
 800ff20:	9308      	str	r3, [sp, #32]
 800ff22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	dc39      	bgt.n	800ff9c <_dtoa_r+0x2cc>
 800ff28:	f04f 0901 	mov.w	r9, #1
 800ff2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff30:	464b      	mov	r3, r9
 800ff32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ff36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ff38:	2200      	movs	r2, #0
 800ff3a:	6042      	str	r2, [r0, #4]
 800ff3c:	2204      	movs	r2, #4
 800ff3e:	f102 0614 	add.w	r6, r2, #20
 800ff42:	429e      	cmp	r6, r3
 800ff44:	6841      	ldr	r1, [r0, #4]
 800ff46:	d92f      	bls.n	800ffa8 <_dtoa_r+0x2d8>
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f000 fd91 	bl	8010a70 <_Balloc>
 800ff4e:	9000      	str	r0, [sp, #0]
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d14b      	bne.n	800ffec <_dtoa_r+0x31c>
 800ff54:	4b24      	ldr	r3, [pc, #144]	; (800ffe8 <_dtoa_r+0x318>)
 800ff56:	4602      	mov	r2, r0
 800ff58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ff5c:	e6d1      	b.n	800fd02 <_dtoa_r+0x32>
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e7de      	b.n	800ff20 <_dtoa_r+0x250>
 800ff62:	2300      	movs	r3, #0
 800ff64:	9308      	str	r3, [sp, #32]
 800ff66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff68:	eb0a 0903 	add.w	r9, sl, r3
 800ff6c:	f109 0301 	add.w	r3, r9, #1
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	9301      	str	r3, [sp, #4]
 800ff74:	bfb8      	it	lt
 800ff76:	2301      	movlt	r3, #1
 800ff78:	e7dd      	b.n	800ff36 <_dtoa_r+0x266>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e7f2      	b.n	800ff64 <_dtoa_r+0x294>
 800ff7e:	2501      	movs	r5, #1
 800ff80:	2300      	movs	r3, #0
 800ff82:	9305      	str	r3, [sp, #20]
 800ff84:	9508      	str	r5, [sp, #32]
 800ff86:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff90:	2312      	movs	r3, #18
 800ff92:	9209      	str	r2, [sp, #36]	; 0x24
 800ff94:	e7cf      	b.n	800ff36 <_dtoa_r+0x266>
 800ff96:	2301      	movs	r3, #1
 800ff98:	9308      	str	r3, [sp, #32]
 800ff9a:	e7f4      	b.n	800ff86 <_dtoa_r+0x2b6>
 800ff9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ffa0:	f8cd 9004 	str.w	r9, [sp, #4]
 800ffa4:	464b      	mov	r3, r9
 800ffa6:	e7c6      	b.n	800ff36 <_dtoa_r+0x266>
 800ffa8:	3101      	adds	r1, #1
 800ffaa:	6041      	str	r1, [r0, #4]
 800ffac:	0052      	lsls	r2, r2, #1
 800ffae:	e7c6      	b.n	800ff3e <_dtoa_r+0x26e>
 800ffb0:	636f4361 	.word	0x636f4361
 800ffb4:	3fd287a7 	.word	0x3fd287a7
 800ffb8:	8b60c8b3 	.word	0x8b60c8b3
 800ffbc:	3fc68a28 	.word	0x3fc68a28
 800ffc0:	509f79fb 	.word	0x509f79fb
 800ffc4:	3fd34413 	.word	0x3fd34413
 800ffc8:	08011f82 	.word	0x08011f82
 800ffcc:	08011f99 	.word	0x08011f99
 800ffd0:	7ff00000 	.word	0x7ff00000
 800ffd4:	08011f7e 	.word	0x08011f7e
 800ffd8:	08011f75 	.word	0x08011f75
 800ffdc:	08011f2d 	.word	0x08011f2d
 800ffe0:	3ff80000 	.word	0x3ff80000
 800ffe4:	08012098 	.word	0x08012098
 800ffe8:	08011ff8 	.word	0x08011ff8
 800ffec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffee:	9a00      	ldr	r2, [sp, #0]
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	9b01      	ldr	r3, [sp, #4]
 800fff4:	2b0e      	cmp	r3, #14
 800fff6:	f200 80ad 	bhi.w	8010154 <_dtoa_r+0x484>
 800fffa:	2d00      	cmp	r5, #0
 800fffc:	f000 80aa 	beq.w	8010154 <_dtoa_r+0x484>
 8010000:	f1ba 0f00 	cmp.w	sl, #0
 8010004:	dd36      	ble.n	8010074 <_dtoa_r+0x3a4>
 8010006:	4ac3      	ldr	r2, [pc, #780]	; (8010314 <_dtoa_r+0x644>)
 8010008:	f00a 030f 	and.w	r3, sl, #15
 801000c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010010:	ed93 7b00 	vldr	d7, [r3]
 8010014:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010018:	ea4f 172a 	mov.w	r7, sl, asr #4
 801001c:	eeb0 8a47 	vmov.f32	s16, s14
 8010020:	eef0 8a67 	vmov.f32	s17, s15
 8010024:	d016      	beq.n	8010054 <_dtoa_r+0x384>
 8010026:	4bbc      	ldr	r3, [pc, #752]	; (8010318 <_dtoa_r+0x648>)
 8010028:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801002c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010030:	f7f0 fc0c 	bl	800084c <__aeabi_ddiv>
 8010034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010038:	f007 070f 	and.w	r7, r7, #15
 801003c:	2503      	movs	r5, #3
 801003e:	4eb6      	ldr	r6, [pc, #728]	; (8010318 <_dtoa_r+0x648>)
 8010040:	b957      	cbnz	r7, 8010058 <_dtoa_r+0x388>
 8010042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010046:	ec53 2b18 	vmov	r2, r3, d8
 801004a:	f7f0 fbff 	bl	800084c <__aeabi_ddiv>
 801004e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010052:	e029      	b.n	80100a8 <_dtoa_r+0x3d8>
 8010054:	2502      	movs	r5, #2
 8010056:	e7f2      	b.n	801003e <_dtoa_r+0x36e>
 8010058:	07f9      	lsls	r1, r7, #31
 801005a:	d508      	bpl.n	801006e <_dtoa_r+0x39e>
 801005c:	ec51 0b18 	vmov	r0, r1, d8
 8010060:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010064:	f7f0 fac8 	bl	80005f8 <__aeabi_dmul>
 8010068:	ec41 0b18 	vmov	d8, r0, r1
 801006c:	3501      	adds	r5, #1
 801006e:	107f      	asrs	r7, r7, #1
 8010070:	3608      	adds	r6, #8
 8010072:	e7e5      	b.n	8010040 <_dtoa_r+0x370>
 8010074:	f000 80a6 	beq.w	80101c4 <_dtoa_r+0x4f4>
 8010078:	f1ca 0600 	rsb	r6, sl, #0
 801007c:	4ba5      	ldr	r3, [pc, #660]	; (8010314 <_dtoa_r+0x644>)
 801007e:	4fa6      	ldr	r7, [pc, #664]	; (8010318 <_dtoa_r+0x648>)
 8010080:	f006 020f 	and.w	r2, r6, #15
 8010084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010090:	f7f0 fab2 	bl	80005f8 <__aeabi_dmul>
 8010094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010098:	1136      	asrs	r6, r6, #4
 801009a:	2300      	movs	r3, #0
 801009c:	2502      	movs	r5, #2
 801009e:	2e00      	cmp	r6, #0
 80100a0:	f040 8085 	bne.w	80101ae <_dtoa_r+0x4de>
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d1d2      	bne.n	801004e <_dtoa_r+0x37e>
 80100a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 808c 	beq.w	80101c8 <_dtoa_r+0x4f8>
 80100b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80100b4:	4b99      	ldr	r3, [pc, #612]	; (801031c <_dtoa_r+0x64c>)
 80100b6:	2200      	movs	r2, #0
 80100b8:	4630      	mov	r0, r6
 80100ba:	4639      	mov	r1, r7
 80100bc:	f7f0 fd0e 	bl	8000adc <__aeabi_dcmplt>
 80100c0:	2800      	cmp	r0, #0
 80100c2:	f000 8081 	beq.w	80101c8 <_dtoa_r+0x4f8>
 80100c6:	9b01      	ldr	r3, [sp, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d07d      	beq.n	80101c8 <_dtoa_r+0x4f8>
 80100cc:	f1b9 0f00 	cmp.w	r9, #0
 80100d0:	dd3c      	ble.n	801014c <_dtoa_r+0x47c>
 80100d2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80100d6:	9307      	str	r3, [sp, #28]
 80100d8:	2200      	movs	r2, #0
 80100da:	4b91      	ldr	r3, [pc, #580]	; (8010320 <_dtoa_r+0x650>)
 80100dc:	4630      	mov	r0, r6
 80100de:	4639      	mov	r1, r7
 80100e0:	f7f0 fa8a 	bl	80005f8 <__aeabi_dmul>
 80100e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100e8:	3501      	adds	r5, #1
 80100ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80100ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80100f2:	4628      	mov	r0, r5
 80100f4:	f7f0 fa16 	bl	8000524 <__aeabi_i2d>
 80100f8:	4632      	mov	r2, r6
 80100fa:	463b      	mov	r3, r7
 80100fc:	f7f0 fa7c 	bl	80005f8 <__aeabi_dmul>
 8010100:	4b88      	ldr	r3, [pc, #544]	; (8010324 <_dtoa_r+0x654>)
 8010102:	2200      	movs	r2, #0
 8010104:	f7f0 f8c2 	bl	800028c <__adddf3>
 8010108:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801010c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010110:	9303      	str	r3, [sp, #12]
 8010112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010114:	2b00      	cmp	r3, #0
 8010116:	d15c      	bne.n	80101d2 <_dtoa_r+0x502>
 8010118:	4b83      	ldr	r3, [pc, #524]	; (8010328 <_dtoa_r+0x658>)
 801011a:	2200      	movs	r2, #0
 801011c:	4630      	mov	r0, r6
 801011e:	4639      	mov	r1, r7
 8010120:	f7f0 f8b2 	bl	8000288 <__aeabi_dsub>
 8010124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010128:	4606      	mov	r6, r0
 801012a:	460f      	mov	r7, r1
 801012c:	f7f0 fcf4 	bl	8000b18 <__aeabi_dcmpgt>
 8010130:	2800      	cmp	r0, #0
 8010132:	f040 8296 	bne.w	8010662 <_dtoa_r+0x992>
 8010136:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801013a:	4630      	mov	r0, r6
 801013c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010140:	4639      	mov	r1, r7
 8010142:	f7f0 fccb 	bl	8000adc <__aeabi_dcmplt>
 8010146:	2800      	cmp	r0, #0
 8010148:	f040 8288 	bne.w	801065c <_dtoa_r+0x98c>
 801014c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010150:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010154:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010156:	2b00      	cmp	r3, #0
 8010158:	f2c0 8158 	blt.w	801040c <_dtoa_r+0x73c>
 801015c:	f1ba 0f0e 	cmp.w	sl, #14
 8010160:	f300 8154 	bgt.w	801040c <_dtoa_r+0x73c>
 8010164:	4b6b      	ldr	r3, [pc, #428]	; (8010314 <_dtoa_r+0x644>)
 8010166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801016a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801016e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010170:	2b00      	cmp	r3, #0
 8010172:	f280 80e3 	bge.w	801033c <_dtoa_r+0x66c>
 8010176:	9b01      	ldr	r3, [sp, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	f300 80df 	bgt.w	801033c <_dtoa_r+0x66c>
 801017e:	f040 826d 	bne.w	801065c <_dtoa_r+0x98c>
 8010182:	4b69      	ldr	r3, [pc, #420]	; (8010328 <_dtoa_r+0x658>)
 8010184:	2200      	movs	r2, #0
 8010186:	4640      	mov	r0, r8
 8010188:	4649      	mov	r1, r9
 801018a:	f7f0 fa35 	bl	80005f8 <__aeabi_dmul>
 801018e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010192:	f7f0 fcb7 	bl	8000b04 <__aeabi_dcmpge>
 8010196:	9e01      	ldr	r6, [sp, #4]
 8010198:	4637      	mov	r7, r6
 801019a:	2800      	cmp	r0, #0
 801019c:	f040 8243 	bne.w	8010626 <_dtoa_r+0x956>
 80101a0:	9d00      	ldr	r5, [sp, #0]
 80101a2:	2331      	movs	r3, #49	; 0x31
 80101a4:	f805 3b01 	strb.w	r3, [r5], #1
 80101a8:	f10a 0a01 	add.w	sl, sl, #1
 80101ac:	e23f      	b.n	801062e <_dtoa_r+0x95e>
 80101ae:	07f2      	lsls	r2, r6, #31
 80101b0:	d505      	bpl.n	80101be <_dtoa_r+0x4ee>
 80101b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101b6:	f7f0 fa1f 	bl	80005f8 <__aeabi_dmul>
 80101ba:	3501      	adds	r5, #1
 80101bc:	2301      	movs	r3, #1
 80101be:	1076      	asrs	r6, r6, #1
 80101c0:	3708      	adds	r7, #8
 80101c2:	e76c      	b.n	801009e <_dtoa_r+0x3ce>
 80101c4:	2502      	movs	r5, #2
 80101c6:	e76f      	b.n	80100a8 <_dtoa_r+0x3d8>
 80101c8:	9b01      	ldr	r3, [sp, #4]
 80101ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80101ce:	930c      	str	r3, [sp, #48]	; 0x30
 80101d0:	e78d      	b.n	80100ee <_dtoa_r+0x41e>
 80101d2:	9900      	ldr	r1, [sp, #0]
 80101d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80101d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101d8:	4b4e      	ldr	r3, [pc, #312]	; (8010314 <_dtoa_r+0x644>)
 80101da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101de:	4401      	add	r1, r0
 80101e0:	9102      	str	r1, [sp, #8]
 80101e2:	9908      	ldr	r1, [sp, #32]
 80101e4:	eeb0 8a47 	vmov.f32	s16, s14
 80101e8:	eef0 8a67 	vmov.f32	s17, s15
 80101ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101f4:	2900      	cmp	r1, #0
 80101f6:	d045      	beq.n	8010284 <_dtoa_r+0x5b4>
 80101f8:	494c      	ldr	r1, [pc, #304]	; (801032c <_dtoa_r+0x65c>)
 80101fa:	2000      	movs	r0, #0
 80101fc:	f7f0 fb26 	bl	800084c <__aeabi_ddiv>
 8010200:	ec53 2b18 	vmov	r2, r3, d8
 8010204:	f7f0 f840 	bl	8000288 <__aeabi_dsub>
 8010208:	9d00      	ldr	r5, [sp, #0]
 801020a:	ec41 0b18 	vmov	d8, r0, r1
 801020e:	4639      	mov	r1, r7
 8010210:	4630      	mov	r0, r6
 8010212:	f7f0 fca1 	bl	8000b58 <__aeabi_d2iz>
 8010216:	900c      	str	r0, [sp, #48]	; 0x30
 8010218:	f7f0 f984 	bl	8000524 <__aeabi_i2d>
 801021c:	4602      	mov	r2, r0
 801021e:	460b      	mov	r3, r1
 8010220:	4630      	mov	r0, r6
 8010222:	4639      	mov	r1, r7
 8010224:	f7f0 f830 	bl	8000288 <__aeabi_dsub>
 8010228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801022a:	3330      	adds	r3, #48	; 0x30
 801022c:	f805 3b01 	strb.w	r3, [r5], #1
 8010230:	ec53 2b18 	vmov	r2, r3, d8
 8010234:	4606      	mov	r6, r0
 8010236:	460f      	mov	r7, r1
 8010238:	f7f0 fc50 	bl	8000adc <__aeabi_dcmplt>
 801023c:	2800      	cmp	r0, #0
 801023e:	d165      	bne.n	801030c <_dtoa_r+0x63c>
 8010240:	4632      	mov	r2, r6
 8010242:	463b      	mov	r3, r7
 8010244:	4935      	ldr	r1, [pc, #212]	; (801031c <_dtoa_r+0x64c>)
 8010246:	2000      	movs	r0, #0
 8010248:	f7f0 f81e 	bl	8000288 <__aeabi_dsub>
 801024c:	ec53 2b18 	vmov	r2, r3, d8
 8010250:	f7f0 fc44 	bl	8000adc <__aeabi_dcmplt>
 8010254:	2800      	cmp	r0, #0
 8010256:	f040 80b9 	bne.w	80103cc <_dtoa_r+0x6fc>
 801025a:	9b02      	ldr	r3, [sp, #8]
 801025c:	429d      	cmp	r5, r3
 801025e:	f43f af75 	beq.w	801014c <_dtoa_r+0x47c>
 8010262:	4b2f      	ldr	r3, [pc, #188]	; (8010320 <_dtoa_r+0x650>)
 8010264:	ec51 0b18 	vmov	r0, r1, d8
 8010268:	2200      	movs	r2, #0
 801026a:	f7f0 f9c5 	bl	80005f8 <__aeabi_dmul>
 801026e:	4b2c      	ldr	r3, [pc, #176]	; (8010320 <_dtoa_r+0x650>)
 8010270:	ec41 0b18 	vmov	d8, r0, r1
 8010274:	2200      	movs	r2, #0
 8010276:	4630      	mov	r0, r6
 8010278:	4639      	mov	r1, r7
 801027a:	f7f0 f9bd 	bl	80005f8 <__aeabi_dmul>
 801027e:	4606      	mov	r6, r0
 8010280:	460f      	mov	r7, r1
 8010282:	e7c4      	b.n	801020e <_dtoa_r+0x53e>
 8010284:	ec51 0b17 	vmov	r0, r1, d7
 8010288:	f7f0 f9b6 	bl	80005f8 <__aeabi_dmul>
 801028c:	9b02      	ldr	r3, [sp, #8]
 801028e:	9d00      	ldr	r5, [sp, #0]
 8010290:	930c      	str	r3, [sp, #48]	; 0x30
 8010292:	ec41 0b18 	vmov	d8, r0, r1
 8010296:	4639      	mov	r1, r7
 8010298:	4630      	mov	r0, r6
 801029a:	f7f0 fc5d 	bl	8000b58 <__aeabi_d2iz>
 801029e:	9011      	str	r0, [sp, #68]	; 0x44
 80102a0:	f7f0 f940 	bl	8000524 <__aeabi_i2d>
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	4630      	mov	r0, r6
 80102aa:	4639      	mov	r1, r7
 80102ac:	f7ef ffec 	bl	8000288 <__aeabi_dsub>
 80102b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102b2:	3330      	adds	r3, #48	; 0x30
 80102b4:	f805 3b01 	strb.w	r3, [r5], #1
 80102b8:	9b02      	ldr	r3, [sp, #8]
 80102ba:	429d      	cmp	r5, r3
 80102bc:	4606      	mov	r6, r0
 80102be:	460f      	mov	r7, r1
 80102c0:	f04f 0200 	mov.w	r2, #0
 80102c4:	d134      	bne.n	8010330 <_dtoa_r+0x660>
 80102c6:	4b19      	ldr	r3, [pc, #100]	; (801032c <_dtoa_r+0x65c>)
 80102c8:	ec51 0b18 	vmov	r0, r1, d8
 80102cc:	f7ef ffde 	bl	800028c <__adddf3>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4630      	mov	r0, r6
 80102d6:	4639      	mov	r1, r7
 80102d8:	f7f0 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d175      	bne.n	80103cc <_dtoa_r+0x6fc>
 80102e0:	ec53 2b18 	vmov	r2, r3, d8
 80102e4:	4911      	ldr	r1, [pc, #68]	; (801032c <_dtoa_r+0x65c>)
 80102e6:	2000      	movs	r0, #0
 80102e8:	f7ef ffce 	bl	8000288 <__aeabi_dsub>
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	4630      	mov	r0, r6
 80102f2:	4639      	mov	r1, r7
 80102f4:	f7f0 fbf2 	bl	8000adc <__aeabi_dcmplt>
 80102f8:	2800      	cmp	r0, #0
 80102fa:	f43f af27 	beq.w	801014c <_dtoa_r+0x47c>
 80102fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010300:	1e6b      	subs	r3, r5, #1
 8010302:	930c      	str	r3, [sp, #48]	; 0x30
 8010304:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010308:	2b30      	cmp	r3, #48	; 0x30
 801030a:	d0f8      	beq.n	80102fe <_dtoa_r+0x62e>
 801030c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010310:	e04a      	b.n	80103a8 <_dtoa_r+0x6d8>
 8010312:	bf00      	nop
 8010314:	08012098 	.word	0x08012098
 8010318:	08012070 	.word	0x08012070
 801031c:	3ff00000 	.word	0x3ff00000
 8010320:	40240000 	.word	0x40240000
 8010324:	401c0000 	.word	0x401c0000
 8010328:	40140000 	.word	0x40140000
 801032c:	3fe00000 	.word	0x3fe00000
 8010330:	4baf      	ldr	r3, [pc, #700]	; (80105f0 <_dtoa_r+0x920>)
 8010332:	f7f0 f961 	bl	80005f8 <__aeabi_dmul>
 8010336:	4606      	mov	r6, r0
 8010338:	460f      	mov	r7, r1
 801033a:	e7ac      	b.n	8010296 <_dtoa_r+0x5c6>
 801033c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010340:	9d00      	ldr	r5, [sp, #0]
 8010342:	4642      	mov	r2, r8
 8010344:	464b      	mov	r3, r9
 8010346:	4630      	mov	r0, r6
 8010348:	4639      	mov	r1, r7
 801034a:	f7f0 fa7f 	bl	800084c <__aeabi_ddiv>
 801034e:	f7f0 fc03 	bl	8000b58 <__aeabi_d2iz>
 8010352:	9002      	str	r0, [sp, #8]
 8010354:	f7f0 f8e6 	bl	8000524 <__aeabi_i2d>
 8010358:	4642      	mov	r2, r8
 801035a:	464b      	mov	r3, r9
 801035c:	f7f0 f94c 	bl	80005f8 <__aeabi_dmul>
 8010360:	4602      	mov	r2, r0
 8010362:	460b      	mov	r3, r1
 8010364:	4630      	mov	r0, r6
 8010366:	4639      	mov	r1, r7
 8010368:	f7ef ff8e 	bl	8000288 <__aeabi_dsub>
 801036c:	9e02      	ldr	r6, [sp, #8]
 801036e:	9f01      	ldr	r7, [sp, #4]
 8010370:	3630      	adds	r6, #48	; 0x30
 8010372:	f805 6b01 	strb.w	r6, [r5], #1
 8010376:	9e00      	ldr	r6, [sp, #0]
 8010378:	1bae      	subs	r6, r5, r6
 801037a:	42b7      	cmp	r7, r6
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	d137      	bne.n	80103f2 <_dtoa_r+0x722>
 8010382:	f7ef ff83 	bl	800028c <__adddf3>
 8010386:	4642      	mov	r2, r8
 8010388:	464b      	mov	r3, r9
 801038a:	4606      	mov	r6, r0
 801038c:	460f      	mov	r7, r1
 801038e:	f7f0 fbc3 	bl	8000b18 <__aeabi_dcmpgt>
 8010392:	b9c8      	cbnz	r0, 80103c8 <_dtoa_r+0x6f8>
 8010394:	4642      	mov	r2, r8
 8010396:	464b      	mov	r3, r9
 8010398:	4630      	mov	r0, r6
 801039a:	4639      	mov	r1, r7
 801039c:	f7f0 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 80103a0:	b110      	cbz	r0, 80103a8 <_dtoa_r+0x6d8>
 80103a2:	9b02      	ldr	r3, [sp, #8]
 80103a4:	07d9      	lsls	r1, r3, #31
 80103a6:	d40f      	bmi.n	80103c8 <_dtoa_r+0x6f8>
 80103a8:	4620      	mov	r0, r4
 80103aa:	4659      	mov	r1, fp
 80103ac:	f000 fba0 	bl	8010af0 <_Bfree>
 80103b0:	2300      	movs	r3, #0
 80103b2:	702b      	strb	r3, [r5, #0]
 80103b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103b6:	f10a 0001 	add.w	r0, sl, #1
 80103ba:	6018      	str	r0, [r3, #0]
 80103bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f43f acd8 	beq.w	800fd74 <_dtoa_r+0xa4>
 80103c4:	601d      	str	r5, [r3, #0]
 80103c6:	e4d5      	b.n	800fd74 <_dtoa_r+0xa4>
 80103c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80103cc:	462b      	mov	r3, r5
 80103ce:	461d      	mov	r5, r3
 80103d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103d4:	2a39      	cmp	r2, #57	; 0x39
 80103d6:	d108      	bne.n	80103ea <_dtoa_r+0x71a>
 80103d8:	9a00      	ldr	r2, [sp, #0]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d1f7      	bne.n	80103ce <_dtoa_r+0x6fe>
 80103de:	9a07      	ldr	r2, [sp, #28]
 80103e0:	9900      	ldr	r1, [sp, #0]
 80103e2:	3201      	adds	r2, #1
 80103e4:	9207      	str	r2, [sp, #28]
 80103e6:	2230      	movs	r2, #48	; 0x30
 80103e8:	700a      	strb	r2, [r1, #0]
 80103ea:	781a      	ldrb	r2, [r3, #0]
 80103ec:	3201      	adds	r2, #1
 80103ee:	701a      	strb	r2, [r3, #0]
 80103f0:	e78c      	b.n	801030c <_dtoa_r+0x63c>
 80103f2:	4b7f      	ldr	r3, [pc, #508]	; (80105f0 <_dtoa_r+0x920>)
 80103f4:	2200      	movs	r2, #0
 80103f6:	f7f0 f8ff 	bl	80005f8 <__aeabi_dmul>
 80103fa:	2200      	movs	r2, #0
 80103fc:	2300      	movs	r3, #0
 80103fe:	4606      	mov	r6, r0
 8010400:	460f      	mov	r7, r1
 8010402:	f7f0 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8010406:	2800      	cmp	r0, #0
 8010408:	d09b      	beq.n	8010342 <_dtoa_r+0x672>
 801040a:	e7cd      	b.n	80103a8 <_dtoa_r+0x6d8>
 801040c:	9a08      	ldr	r2, [sp, #32]
 801040e:	2a00      	cmp	r2, #0
 8010410:	f000 80c4 	beq.w	801059c <_dtoa_r+0x8cc>
 8010414:	9a05      	ldr	r2, [sp, #20]
 8010416:	2a01      	cmp	r2, #1
 8010418:	f300 80a8 	bgt.w	801056c <_dtoa_r+0x89c>
 801041c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801041e:	2a00      	cmp	r2, #0
 8010420:	f000 80a0 	beq.w	8010564 <_dtoa_r+0x894>
 8010424:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010428:	9e06      	ldr	r6, [sp, #24]
 801042a:	4645      	mov	r5, r8
 801042c:	9a04      	ldr	r2, [sp, #16]
 801042e:	2101      	movs	r1, #1
 8010430:	441a      	add	r2, r3
 8010432:	4620      	mov	r0, r4
 8010434:	4498      	add	r8, r3
 8010436:	9204      	str	r2, [sp, #16]
 8010438:	f000 fc16 	bl	8010c68 <__i2b>
 801043c:	4607      	mov	r7, r0
 801043e:	2d00      	cmp	r5, #0
 8010440:	dd0b      	ble.n	801045a <_dtoa_r+0x78a>
 8010442:	9b04      	ldr	r3, [sp, #16]
 8010444:	2b00      	cmp	r3, #0
 8010446:	dd08      	ble.n	801045a <_dtoa_r+0x78a>
 8010448:	42ab      	cmp	r3, r5
 801044a:	9a04      	ldr	r2, [sp, #16]
 801044c:	bfa8      	it	ge
 801044e:	462b      	movge	r3, r5
 8010450:	eba8 0803 	sub.w	r8, r8, r3
 8010454:	1aed      	subs	r5, r5, r3
 8010456:	1ad3      	subs	r3, r2, r3
 8010458:	9304      	str	r3, [sp, #16]
 801045a:	9b06      	ldr	r3, [sp, #24]
 801045c:	b1fb      	cbz	r3, 801049e <_dtoa_r+0x7ce>
 801045e:	9b08      	ldr	r3, [sp, #32]
 8010460:	2b00      	cmp	r3, #0
 8010462:	f000 809f 	beq.w	80105a4 <_dtoa_r+0x8d4>
 8010466:	2e00      	cmp	r6, #0
 8010468:	dd11      	ble.n	801048e <_dtoa_r+0x7be>
 801046a:	4639      	mov	r1, r7
 801046c:	4632      	mov	r2, r6
 801046e:	4620      	mov	r0, r4
 8010470:	f000 fcb6 	bl	8010de0 <__pow5mult>
 8010474:	465a      	mov	r2, fp
 8010476:	4601      	mov	r1, r0
 8010478:	4607      	mov	r7, r0
 801047a:	4620      	mov	r0, r4
 801047c:	f000 fc0a 	bl	8010c94 <__multiply>
 8010480:	4659      	mov	r1, fp
 8010482:	9007      	str	r0, [sp, #28]
 8010484:	4620      	mov	r0, r4
 8010486:	f000 fb33 	bl	8010af0 <_Bfree>
 801048a:	9b07      	ldr	r3, [sp, #28]
 801048c:	469b      	mov	fp, r3
 801048e:	9b06      	ldr	r3, [sp, #24]
 8010490:	1b9a      	subs	r2, r3, r6
 8010492:	d004      	beq.n	801049e <_dtoa_r+0x7ce>
 8010494:	4659      	mov	r1, fp
 8010496:	4620      	mov	r0, r4
 8010498:	f000 fca2 	bl	8010de0 <__pow5mult>
 801049c:	4683      	mov	fp, r0
 801049e:	2101      	movs	r1, #1
 80104a0:	4620      	mov	r0, r4
 80104a2:	f000 fbe1 	bl	8010c68 <__i2b>
 80104a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	4606      	mov	r6, r0
 80104ac:	dd7c      	ble.n	80105a8 <_dtoa_r+0x8d8>
 80104ae:	461a      	mov	r2, r3
 80104b0:	4601      	mov	r1, r0
 80104b2:	4620      	mov	r0, r4
 80104b4:	f000 fc94 	bl	8010de0 <__pow5mult>
 80104b8:	9b05      	ldr	r3, [sp, #20]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	4606      	mov	r6, r0
 80104be:	dd76      	ble.n	80105ae <_dtoa_r+0x8de>
 80104c0:	2300      	movs	r3, #0
 80104c2:	9306      	str	r3, [sp, #24]
 80104c4:	6933      	ldr	r3, [r6, #16]
 80104c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80104ca:	6918      	ldr	r0, [r3, #16]
 80104cc:	f000 fb7c 	bl	8010bc8 <__hi0bits>
 80104d0:	f1c0 0020 	rsb	r0, r0, #32
 80104d4:	9b04      	ldr	r3, [sp, #16]
 80104d6:	4418      	add	r0, r3
 80104d8:	f010 001f 	ands.w	r0, r0, #31
 80104dc:	f000 8086 	beq.w	80105ec <_dtoa_r+0x91c>
 80104e0:	f1c0 0320 	rsb	r3, r0, #32
 80104e4:	2b04      	cmp	r3, #4
 80104e6:	dd7f      	ble.n	80105e8 <_dtoa_r+0x918>
 80104e8:	f1c0 001c 	rsb	r0, r0, #28
 80104ec:	9b04      	ldr	r3, [sp, #16]
 80104ee:	4403      	add	r3, r0
 80104f0:	4480      	add	r8, r0
 80104f2:	4405      	add	r5, r0
 80104f4:	9304      	str	r3, [sp, #16]
 80104f6:	f1b8 0f00 	cmp.w	r8, #0
 80104fa:	dd05      	ble.n	8010508 <_dtoa_r+0x838>
 80104fc:	4659      	mov	r1, fp
 80104fe:	4642      	mov	r2, r8
 8010500:	4620      	mov	r0, r4
 8010502:	f000 fcc7 	bl	8010e94 <__lshift>
 8010506:	4683      	mov	fp, r0
 8010508:	9b04      	ldr	r3, [sp, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	dd05      	ble.n	801051a <_dtoa_r+0x84a>
 801050e:	4631      	mov	r1, r6
 8010510:	461a      	mov	r2, r3
 8010512:	4620      	mov	r0, r4
 8010514:	f000 fcbe 	bl	8010e94 <__lshift>
 8010518:	4606      	mov	r6, r0
 801051a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801051c:	2b00      	cmp	r3, #0
 801051e:	d069      	beq.n	80105f4 <_dtoa_r+0x924>
 8010520:	4631      	mov	r1, r6
 8010522:	4658      	mov	r0, fp
 8010524:	f000 fd22 	bl	8010f6c <__mcmp>
 8010528:	2800      	cmp	r0, #0
 801052a:	da63      	bge.n	80105f4 <_dtoa_r+0x924>
 801052c:	2300      	movs	r3, #0
 801052e:	4659      	mov	r1, fp
 8010530:	220a      	movs	r2, #10
 8010532:	4620      	mov	r0, r4
 8010534:	f000 fafe 	bl	8010b34 <__multadd>
 8010538:	9b08      	ldr	r3, [sp, #32]
 801053a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801053e:	4683      	mov	fp, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	f000 818f 	beq.w	8010864 <_dtoa_r+0xb94>
 8010546:	4639      	mov	r1, r7
 8010548:	2300      	movs	r3, #0
 801054a:	220a      	movs	r2, #10
 801054c:	4620      	mov	r0, r4
 801054e:	f000 faf1 	bl	8010b34 <__multadd>
 8010552:	f1b9 0f00 	cmp.w	r9, #0
 8010556:	4607      	mov	r7, r0
 8010558:	f300 808e 	bgt.w	8010678 <_dtoa_r+0x9a8>
 801055c:	9b05      	ldr	r3, [sp, #20]
 801055e:	2b02      	cmp	r3, #2
 8010560:	dc50      	bgt.n	8010604 <_dtoa_r+0x934>
 8010562:	e089      	b.n	8010678 <_dtoa_r+0x9a8>
 8010564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801056a:	e75d      	b.n	8010428 <_dtoa_r+0x758>
 801056c:	9b01      	ldr	r3, [sp, #4]
 801056e:	1e5e      	subs	r6, r3, #1
 8010570:	9b06      	ldr	r3, [sp, #24]
 8010572:	42b3      	cmp	r3, r6
 8010574:	bfbf      	itttt	lt
 8010576:	9b06      	ldrlt	r3, [sp, #24]
 8010578:	9606      	strlt	r6, [sp, #24]
 801057a:	1af2      	sublt	r2, r6, r3
 801057c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801057e:	bfb6      	itet	lt
 8010580:	189b      	addlt	r3, r3, r2
 8010582:	1b9e      	subge	r6, r3, r6
 8010584:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010586:	9b01      	ldr	r3, [sp, #4]
 8010588:	bfb8      	it	lt
 801058a:	2600      	movlt	r6, #0
 801058c:	2b00      	cmp	r3, #0
 801058e:	bfb5      	itete	lt
 8010590:	eba8 0503 	sublt.w	r5, r8, r3
 8010594:	9b01      	ldrge	r3, [sp, #4]
 8010596:	2300      	movlt	r3, #0
 8010598:	4645      	movge	r5, r8
 801059a:	e747      	b.n	801042c <_dtoa_r+0x75c>
 801059c:	9e06      	ldr	r6, [sp, #24]
 801059e:	9f08      	ldr	r7, [sp, #32]
 80105a0:	4645      	mov	r5, r8
 80105a2:	e74c      	b.n	801043e <_dtoa_r+0x76e>
 80105a4:	9a06      	ldr	r2, [sp, #24]
 80105a6:	e775      	b.n	8010494 <_dtoa_r+0x7c4>
 80105a8:	9b05      	ldr	r3, [sp, #20]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	dc18      	bgt.n	80105e0 <_dtoa_r+0x910>
 80105ae:	9b02      	ldr	r3, [sp, #8]
 80105b0:	b9b3      	cbnz	r3, 80105e0 <_dtoa_r+0x910>
 80105b2:	9b03      	ldr	r3, [sp, #12]
 80105b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105b8:	b9a3      	cbnz	r3, 80105e4 <_dtoa_r+0x914>
 80105ba:	9b03      	ldr	r3, [sp, #12]
 80105bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80105c0:	0d1b      	lsrs	r3, r3, #20
 80105c2:	051b      	lsls	r3, r3, #20
 80105c4:	b12b      	cbz	r3, 80105d2 <_dtoa_r+0x902>
 80105c6:	9b04      	ldr	r3, [sp, #16]
 80105c8:	3301      	adds	r3, #1
 80105ca:	9304      	str	r3, [sp, #16]
 80105cc:	f108 0801 	add.w	r8, r8, #1
 80105d0:	2301      	movs	r3, #1
 80105d2:	9306      	str	r3, [sp, #24]
 80105d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f47f af74 	bne.w	80104c4 <_dtoa_r+0x7f4>
 80105dc:	2001      	movs	r0, #1
 80105de:	e779      	b.n	80104d4 <_dtoa_r+0x804>
 80105e0:	2300      	movs	r3, #0
 80105e2:	e7f6      	b.n	80105d2 <_dtoa_r+0x902>
 80105e4:	9b02      	ldr	r3, [sp, #8]
 80105e6:	e7f4      	b.n	80105d2 <_dtoa_r+0x902>
 80105e8:	d085      	beq.n	80104f6 <_dtoa_r+0x826>
 80105ea:	4618      	mov	r0, r3
 80105ec:	301c      	adds	r0, #28
 80105ee:	e77d      	b.n	80104ec <_dtoa_r+0x81c>
 80105f0:	40240000 	.word	0x40240000
 80105f4:	9b01      	ldr	r3, [sp, #4]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	dc38      	bgt.n	801066c <_dtoa_r+0x99c>
 80105fa:	9b05      	ldr	r3, [sp, #20]
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	dd35      	ble.n	801066c <_dtoa_r+0x99c>
 8010600:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010604:	f1b9 0f00 	cmp.w	r9, #0
 8010608:	d10d      	bne.n	8010626 <_dtoa_r+0x956>
 801060a:	4631      	mov	r1, r6
 801060c:	464b      	mov	r3, r9
 801060e:	2205      	movs	r2, #5
 8010610:	4620      	mov	r0, r4
 8010612:	f000 fa8f 	bl	8010b34 <__multadd>
 8010616:	4601      	mov	r1, r0
 8010618:	4606      	mov	r6, r0
 801061a:	4658      	mov	r0, fp
 801061c:	f000 fca6 	bl	8010f6c <__mcmp>
 8010620:	2800      	cmp	r0, #0
 8010622:	f73f adbd 	bgt.w	80101a0 <_dtoa_r+0x4d0>
 8010626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010628:	9d00      	ldr	r5, [sp, #0]
 801062a:	ea6f 0a03 	mvn.w	sl, r3
 801062e:	f04f 0800 	mov.w	r8, #0
 8010632:	4631      	mov	r1, r6
 8010634:	4620      	mov	r0, r4
 8010636:	f000 fa5b 	bl	8010af0 <_Bfree>
 801063a:	2f00      	cmp	r7, #0
 801063c:	f43f aeb4 	beq.w	80103a8 <_dtoa_r+0x6d8>
 8010640:	f1b8 0f00 	cmp.w	r8, #0
 8010644:	d005      	beq.n	8010652 <_dtoa_r+0x982>
 8010646:	45b8      	cmp	r8, r7
 8010648:	d003      	beq.n	8010652 <_dtoa_r+0x982>
 801064a:	4641      	mov	r1, r8
 801064c:	4620      	mov	r0, r4
 801064e:	f000 fa4f 	bl	8010af0 <_Bfree>
 8010652:	4639      	mov	r1, r7
 8010654:	4620      	mov	r0, r4
 8010656:	f000 fa4b 	bl	8010af0 <_Bfree>
 801065a:	e6a5      	b.n	80103a8 <_dtoa_r+0x6d8>
 801065c:	2600      	movs	r6, #0
 801065e:	4637      	mov	r7, r6
 8010660:	e7e1      	b.n	8010626 <_dtoa_r+0x956>
 8010662:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010664:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010668:	4637      	mov	r7, r6
 801066a:	e599      	b.n	80101a0 <_dtoa_r+0x4d0>
 801066c:	9b08      	ldr	r3, [sp, #32]
 801066e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	f000 80fd 	beq.w	8010872 <_dtoa_r+0xba2>
 8010678:	2d00      	cmp	r5, #0
 801067a:	dd05      	ble.n	8010688 <_dtoa_r+0x9b8>
 801067c:	4639      	mov	r1, r7
 801067e:	462a      	mov	r2, r5
 8010680:	4620      	mov	r0, r4
 8010682:	f000 fc07 	bl	8010e94 <__lshift>
 8010686:	4607      	mov	r7, r0
 8010688:	9b06      	ldr	r3, [sp, #24]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d05c      	beq.n	8010748 <_dtoa_r+0xa78>
 801068e:	6879      	ldr	r1, [r7, #4]
 8010690:	4620      	mov	r0, r4
 8010692:	f000 f9ed 	bl	8010a70 <_Balloc>
 8010696:	4605      	mov	r5, r0
 8010698:	b928      	cbnz	r0, 80106a6 <_dtoa_r+0x9d6>
 801069a:	4b80      	ldr	r3, [pc, #512]	; (801089c <_dtoa_r+0xbcc>)
 801069c:	4602      	mov	r2, r0
 801069e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80106a2:	f7ff bb2e 	b.w	800fd02 <_dtoa_r+0x32>
 80106a6:	693a      	ldr	r2, [r7, #16]
 80106a8:	3202      	adds	r2, #2
 80106aa:	0092      	lsls	r2, r2, #2
 80106ac:	f107 010c 	add.w	r1, r7, #12
 80106b0:	300c      	adds	r0, #12
 80106b2:	f7fe fbfd 	bl	800eeb0 <memcpy>
 80106b6:	2201      	movs	r2, #1
 80106b8:	4629      	mov	r1, r5
 80106ba:	4620      	mov	r0, r4
 80106bc:	f000 fbea 	bl	8010e94 <__lshift>
 80106c0:	9b00      	ldr	r3, [sp, #0]
 80106c2:	3301      	adds	r3, #1
 80106c4:	9301      	str	r3, [sp, #4]
 80106c6:	9b00      	ldr	r3, [sp, #0]
 80106c8:	444b      	add	r3, r9
 80106ca:	9307      	str	r3, [sp, #28]
 80106cc:	9b02      	ldr	r3, [sp, #8]
 80106ce:	f003 0301 	and.w	r3, r3, #1
 80106d2:	46b8      	mov	r8, r7
 80106d4:	9306      	str	r3, [sp, #24]
 80106d6:	4607      	mov	r7, r0
 80106d8:	9b01      	ldr	r3, [sp, #4]
 80106da:	4631      	mov	r1, r6
 80106dc:	3b01      	subs	r3, #1
 80106de:	4658      	mov	r0, fp
 80106e0:	9302      	str	r3, [sp, #8]
 80106e2:	f7ff fa67 	bl	800fbb4 <quorem>
 80106e6:	4603      	mov	r3, r0
 80106e8:	3330      	adds	r3, #48	; 0x30
 80106ea:	9004      	str	r0, [sp, #16]
 80106ec:	4641      	mov	r1, r8
 80106ee:	4658      	mov	r0, fp
 80106f0:	9308      	str	r3, [sp, #32]
 80106f2:	f000 fc3b 	bl	8010f6c <__mcmp>
 80106f6:	463a      	mov	r2, r7
 80106f8:	4681      	mov	r9, r0
 80106fa:	4631      	mov	r1, r6
 80106fc:	4620      	mov	r0, r4
 80106fe:	f000 fc51 	bl	8010fa4 <__mdiff>
 8010702:	68c2      	ldr	r2, [r0, #12]
 8010704:	9b08      	ldr	r3, [sp, #32]
 8010706:	4605      	mov	r5, r0
 8010708:	bb02      	cbnz	r2, 801074c <_dtoa_r+0xa7c>
 801070a:	4601      	mov	r1, r0
 801070c:	4658      	mov	r0, fp
 801070e:	f000 fc2d 	bl	8010f6c <__mcmp>
 8010712:	9b08      	ldr	r3, [sp, #32]
 8010714:	4602      	mov	r2, r0
 8010716:	4629      	mov	r1, r5
 8010718:	4620      	mov	r0, r4
 801071a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801071e:	f000 f9e7 	bl	8010af0 <_Bfree>
 8010722:	9b05      	ldr	r3, [sp, #20]
 8010724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010726:	9d01      	ldr	r5, [sp, #4]
 8010728:	ea43 0102 	orr.w	r1, r3, r2
 801072c:	9b06      	ldr	r3, [sp, #24]
 801072e:	430b      	orrs	r3, r1
 8010730:	9b08      	ldr	r3, [sp, #32]
 8010732:	d10d      	bne.n	8010750 <_dtoa_r+0xa80>
 8010734:	2b39      	cmp	r3, #57	; 0x39
 8010736:	d029      	beq.n	801078c <_dtoa_r+0xabc>
 8010738:	f1b9 0f00 	cmp.w	r9, #0
 801073c:	dd01      	ble.n	8010742 <_dtoa_r+0xa72>
 801073e:	9b04      	ldr	r3, [sp, #16]
 8010740:	3331      	adds	r3, #49	; 0x31
 8010742:	9a02      	ldr	r2, [sp, #8]
 8010744:	7013      	strb	r3, [r2, #0]
 8010746:	e774      	b.n	8010632 <_dtoa_r+0x962>
 8010748:	4638      	mov	r0, r7
 801074a:	e7b9      	b.n	80106c0 <_dtoa_r+0x9f0>
 801074c:	2201      	movs	r2, #1
 801074e:	e7e2      	b.n	8010716 <_dtoa_r+0xa46>
 8010750:	f1b9 0f00 	cmp.w	r9, #0
 8010754:	db06      	blt.n	8010764 <_dtoa_r+0xa94>
 8010756:	9905      	ldr	r1, [sp, #20]
 8010758:	ea41 0909 	orr.w	r9, r1, r9
 801075c:	9906      	ldr	r1, [sp, #24]
 801075e:	ea59 0101 	orrs.w	r1, r9, r1
 8010762:	d120      	bne.n	80107a6 <_dtoa_r+0xad6>
 8010764:	2a00      	cmp	r2, #0
 8010766:	ddec      	ble.n	8010742 <_dtoa_r+0xa72>
 8010768:	4659      	mov	r1, fp
 801076a:	2201      	movs	r2, #1
 801076c:	4620      	mov	r0, r4
 801076e:	9301      	str	r3, [sp, #4]
 8010770:	f000 fb90 	bl	8010e94 <__lshift>
 8010774:	4631      	mov	r1, r6
 8010776:	4683      	mov	fp, r0
 8010778:	f000 fbf8 	bl	8010f6c <__mcmp>
 801077c:	2800      	cmp	r0, #0
 801077e:	9b01      	ldr	r3, [sp, #4]
 8010780:	dc02      	bgt.n	8010788 <_dtoa_r+0xab8>
 8010782:	d1de      	bne.n	8010742 <_dtoa_r+0xa72>
 8010784:	07da      	lsls	r2, r3, #31
 8010786:	d5dc      	bpl.n	8010742 <_dtoa_r+0xa72>
 8010788:	2b39      	cmp	r3, #57	; 0x39
 801078a:	d1d8      	bne.n	801073e <_dtoa_r+0xa6e>
 801078c:	9a02      	ldr	r2, [sp, #8]
 801078e:	2339      	movs	r3, #57	; 0x39
 8010790:	7013      	strb	r3, [r2, #0]
 8010792:	462b      	mov	r3, r5
 8010794:	461d      	mov	r5, r3
 8010796:	3b01      	subs	r3, #1
 8010798:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801079c:	2a39      	cmp	r2, #57	; 0x39
 801079e:	d050      	beq.n	8010842 <_dtoa_r+0xb72>
 80107a0:	3201      	adds	r2, #1
 80107a2:	701a      	strb	r2, [r3, #0]
 80107a4:	e745      	b.n	8010632 <_dtoa_r+0x962>
 80107a6:	2a00      	cmp	r2, #0
 80107a8:	dd03      	ble.n	80107b2 <_dtoa_r+0xae2>
 80107aa:	2b39      	cmp	r3, #57	; 0x39
 80107ac:	d0ee      	beq.n	801078c <_dtoa_r+0xabc>
 80107ae:	3301      	adds	r3, #1
 80107b0:	e7c7      	b.n	8010742 <_dtoa_r+0xa72>
 80107b2:	9a01      	ldr	r2, [sp, #4]
 80107b4:	9907      	ldr	r1, [sp, #28]
 80107b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80107ba:	428a      	cmp	r2, r1
 80107bc:	d02a      	beq.n	8010814 <_dtoa_r+0xb44>
 80107be:	4659      	mov	r1, fp
 80107c0:	2300      	movs	r3, #0
 80107c2:	220a      	movs	r2, #10
 80107c4:	4620      	mov	r0, r4
 80107c6:	f000 f9b5 	bl	8010b34 <__multadd>
 80107ca:	45b8      	cmp	r8, r7
 80107cc:	4683      	mov	fp, r0
 80107ce:	f04f 0300 	mov.w	r3, #0
 80107d2:	f04f 020a 	mov.w	r2, #10
 80107d6:	4641      	mov	r1, r8
 80107d8:	4620      	mov	r0, r4
 80107da:	d107      	bne.n	80107ec <_dtoa_r+0xb1c>
 80107dc:	f000 f9aa 	bl	8010b34 <__multadd>
 80107e0:	4680      	mov	r8, r0
 80107e2:	4607      	mov	r7, r0
 80107e4:	9b01      	ldr	r3, [sp, #4]
 80107e6:	3301      	adds	r3, #1
 80107e8:	9301      	str	r3, [sp, #4]
 80107ea:	e775      	b.n	80106d8 <_dtoa_r+0xa08>
 80107ec:	f000 f9a2 	bl	8010b34 <__multadd>
 80107f0:	4639      	mov	r1, r7
 80107f2:	4680      	mov	r8, r0
 80107f4:	2300      	movs	r3, #0
 80107f6:	220a      	movs	r2, #10
 80107f8:	4620      	mov	r0, r4
 80107fa:	f000 f99b 	bl	8010b34 <__multadd>
 80107fe:	4607      	mov	r7, r0
 8010800:	e7f0      	b.n	80107e4 <_dtoa_r+0xb14>
 8010802:	f1b9 0f00 	cmp.w	r9, #0
 8010806:	9a00      	ldr	r2, [sp, #0]
 8010808:	bfcc      	ite	gt
 801080a:	464d      	movgt	r5, r9
 801080c:	2501      	movle	r5, #1
 801080e:	4415      	add	r5, r2
 8010810:	f04f 0800 	mov.w	r8, #0
 8010814:	4659      	mov	r1, fp
 8010816:	2201      	movs	r2, #1
 8010818:	4620      	mov	r0, r4
 801081a:	9301      	str	r3, [sp, #4]
 801081c:	f000 fb3a 	bl	8010e94 <__lshift>
 8010820:	4631      	mov	r1, r6
 8010822:	4683      	mov	fp, r0
 8010824:	f000 fba2 	bl	8010f6c <__mcmp>
 8010828:	2800      	cmp	r0, #0
 801082a:	dcb2      	bgt.n	8010792 <_dtoa_r+0xac2>
 801082c:	d102      	bne.n	8010834 <_dtoa_r+0xb64>
 801082e:	9b01      	ldr	r3, [sp, #4]
 8010830:	07db      	lsls	r3, r3, #31
 8010832:	d4ae      	bmi.n	8010792 <_dtoa_r+0xac2>
 8010834:	462b      	mov	r3, r5
 8010836:	461d      	mov	r5, r3
 8010838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801083c:	2a30      	cmp	r2, #48	; 0x30
 801083e:	d0fa      	beq.n	8010836 <_dtoa_r+0xb66>
 8010840:	e6f7      	b.n	8010632 <_dtoa_r+0x962>
 8010842:	9a00      	ldr	r2, [sp, #0]
 8010844:	429a      	cmp	r2, r3
 8010846:	d1a5      	bne.n	8010794 <_dtoa_r+0xac4>
 8010848:	f10a 0a01 	add.w	sl, sl, #1
 801084c:	2331      	movs	r3, #49	; 0x31
 801084e:	e779      	b.n	8010744 <_dtoa_r+0xa74>
 8010850:	4b13      	ldr	r3, [pc, #76]	; (80108a0 <_dtoa_r+0xbd0>)
 8010852:	f7ff baaf 	b.w	800fdb4 <_dtoa_r+0xe4>
 8010856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010858:	2b00      	cmp	r3, #0
 801085a:	f47f aa86 	bne.w	800fd6a <_dtoa_r+0x9a>
 801085e:	4b11      	ldr	r3, [pc, #68]	; (80108a4 <_dtoa_r+0xbd4>)
 8010860:	f7ff baa8 	b.w	800fdb4 <_dtoa_r+0xe4>
 8010864:	f1b9 0f00 	cmp.w	r9, #0
 8010868:	dc03      	bgt.n	8010872 <_dtoa_r+0xba2>
 801086a:	9b05      	ldr	r3, [sp, #20]
 801086c:	2b02      	cmp	r3, #2
 801086e:	f73f aec9 	bgt.w	8010604 <_dtoa_r+0x934>
 8010872:	9d00      	ldr	r5, [sp, #0]
 8010874:	4631      	mov	r1, r6
 8010876:	4658      	mov	r0, fp
 8010878:	f7ff f99c 	bl	800fbb4 <quorem>
 801087c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010880:	f805 3b01 	strb.w	r3, [r5], #1
 8010884:	9a00      	ldr	r2, [sp, #0]
 8010886:	1aaa      	subs	r2, r5, r2
 8010888:	4591      	cmp	r9, r2
 801088a:	ddba      	ble.n	8010802 <_dtoa_r+0xb32>
 801088c:	4659      	mov	r1, fp
 801088e:	2300      	movs	r3, #0
 8010890:	220a      	movs	r2, #10
 8010892:	4620      	mov	r0, r4
 8010894:	f000 f94e 	bl	8010b34 <__multadd>
 8010898:	4683      	mov	fp, r0
 801089a:	e7eb      	b.n	8010874 <_dtoa_r+0xba4>
 801089c:	08011ff8 	.word	0x08011ff8
 80108a0:	08011f2c 	.word	0x08011f2c
 80108a4:	08011f75 	.word	0x08011f75

080108a8 <__sflush_r>:
 80108a8:	898a      	ldrh	r2, [r1, #12]
 80108aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ae:	4605      	mov	r5, r0
 80108b0:	0710      	lsls	r0, r2, #28
 80108b2:	460c      	mov	r4, r1
 80108b4:	d458      	bmi.n	8010968 <__sflush_r+0xc0>
 80108b6:	684b      	ldr	r3, [r1, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	dc05      	bgt.n	80108c8 <__sflush_r+0x20>
 80108bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108be:	2b00      	cmp	r3, #0
 80108c0:	dc02      	bgt.n	80108c8 <__sflush_r+0x20>
 80108c2:	2000      	movs	r0, #0
 80108c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108ca:	2e00      	cmp	r6, #0
 80108cc:	d0f9      	beq.n	80108c2 <__sflush_r+0x1a>
 80108ce:	2300      	movs	r3, #0
 80108d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108d4:	682f      	ldr	r7, [r5, #0]
 80108d6:	602b      	str	r3, [r5, #0]
 80108d8:	d032      	beq.n	8010940 <__sflush_r+0x98>
 80108da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	075a      	lsls	r2, r3, #29
 80108e0:	d505      	bpl.n	80108ee <__sflush_r+0x46>
 80108e2:	6863      	ldr	r3, [r4, #4]
 80108e4:	1ac0      	subs	r0, r0, r3
 80108e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108e8:	b10b      	cbz	r3, 80108ee <__sflush_r+0x46>
 80108ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108ec:	1ac0      	subs	r0, r0, r3
 80108ee:	2300      	movs	r3, #0
 80108f0:	4602      	mov	r2, r0
 80108f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f4:	6a21      	ldr	r1, [r4, #32]
 80108f6:	4628      	mov	r0, r5
 80108f8:	47b0      	blx	r6
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	d106      	bne.n	801090e <__sflush_r+0x66>
 8010900:	6829      	ldr	r1, [r5, #0]
 8010902:	291d      	cmp	r1, #29
 8010904:	d82c      	bhi.n	8010960 <__sflush_r+0xb8>
 8010906:	4a2a      	ldr	r2, [pc, #168]	; (80109b0 <__sflush_r+0x108>)
 8010908:	40ca      	lsrs	r2, r1
 801090a:	07d6      	lsls	r6, r2, #31
 801090c:	d528      	bpl.n	8010960 <__sflush_r+0xb8>
 801090e:	2200      	movs	r2, #0
 8010910:	6062      	str	r2, [r4, #4]
 8010912:	04d9      	lsls	r1, r3, #19
 8010914:	6922      	ldr	r2, [r4, #16]
 8010916:	6022      	str	r2, [r4, #0]
 8010918:	d504      	bpl.n	8010924 <__sflush_r+0x7c>
 801091a:	1c42      	adds	r2, r0, #1
 801091c:	d101      	bne.n	8010922 <__sflush_r+0x7a>
 801091e:	682b      	ldr	r3, [r5, #0]
 8010920:	b903      	cbnz	r3, 8010924 <__sflush_r+0x7c>
 8010922:	6560      	str	r0, [r4, #84]	; 0x54
 8010924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010926:	602f      	str	r7, [r5, #0]
 8010928:	2900      	cmp	r1, #0
 801092a:	d0ca      	beq.n	80108c2 <__sflush_r+0x1a>
 801092c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010930:	4299      	cmp	r1, r3
 8010932:	d002      	beq.n	801093a <__sflush_r+0x92>
 8010934:	4628      	mov	r0, r5
 8010936:	f7fe fad1 	bl	800eedc <_free_r>
 801093a:	2000      	movs	r0, #0
 801093c:	6360      	str	r0, [r4, #52]	; 0x34
 801093e:	e7c1      	b.n	80108c4 <__sflush_r+0x1c>
 8010940:	6a21      	ldr	r1, [r4, #32]
 8010942:	2301      	movs	r3, #1
 8010944:	4628      	mov	r0, r5
 8010946:	47b0      	blx	r6
 8010948:	1c41      	adds	r1, r0, #1
 801094a:	d1c7      	bne.n	80108dc <__sflush_r+0x34>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d0c4      	beq.n	80108dc <__sflush_r+0x34>
 8010952:	2b1d      	cmp	r3, #29
 8010954:	d001      	beq.n	801095a <__sflush_r+0xb2>
 8010956:	2b16      	cmp	r3, #22
 8010958:	d101      	bne.n	801095e <__sflush_r+0xb6>
 801095a:	602f      	str	r7, [r5, #0]
 801095c:	e7b1      	b.n	80108c2 <__sflush_r+0x1a>
 801095e:	89a3      	ldrh	r3, [r4, #12]
 8010960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010964:	81a3      	strh	r3, [r4, #12]
 8010966:	e7ad      	b.n	80108c4 <__sflush_r+0x1c>
 8010968:	690f      	ldr	r7, [r1, #16]
 801096a:	2f00      	cmp	r7, #0
 801096c:	d0a9      	beq.n	80108c2 <__sflush_r+0x1a>
 801096e:	0793      	lsls	r3, r2, #30
 8010970:	680e      	ldr	r6, [r1, #0]
 8010972:	bf08      	it	eq
 8010974:	694b      	ldreq	r3, [r1, #20]
 8010976:	600f      	str	r7, [r1, #0]
 8010978:	bf18      	it	ne
 801097a:	2300      	movne	r3, #0
 801097c:	eba6 0807 	sub.w	r8, r6, r7
 8010980:	608b      	str	r3, [r1, #8]
 8010982:	f1b8 0f00 	cmp.w	r8, #0
 8010986:	dd9c      	ble.n	80108c2 <__sflush_r+0x1a>
 8010988:	6a21      	ldr	r1, [r4, #32]
 801098a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801098c:	4643      	mov	r3, r8
 801098e:	463a      	mov	r2, r7
 8010990:	4628      	mov	r0, r5
 8010992:	47b0      	blx	r6
 8010994:	2800      	cmp	r0, #0
 8010996:	dc06      	bgt.n	80109a6 <__sflush_r+0xfe>
 8010998:	89a3      	ldrh	r3, [r4, #12]
 801099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801099e:	81a3      	strh	r3, [r4, #12]
 80109a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109a4:	e78e      	b.n	80108c4 <__sflush_r+0x1c>
 80109a6:	4407      	add	r7, r0
 80109a8:	eba8 0800 	sub.w	r8, r8, r0
 80109ac:	e7e9      	b.n	8010982 <__sflush_r+0xda>
 80109ae:	bf00      	nop
 80109b0:	20400001 	.word	0x20400001

080109b4 <_fflush_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	690b      	ldr	r3, [r1, #16]
 80109b8:	4605      	mov	r5, r0
 80109ba:	460c      	mov	r4, r1
 80109bc:	b913      	cbnz	r3, 80109c4 <_fflush_r+0x10>
 80109be:	2500      	movs	r5, #0
 80109c0:	4628      	mov	r0, r5
 80109c2:	bd38      	pop	{r3, r4, r5, pc}
 80109c4:	b118      	cbz	r0, 80109ce <_fflush_r+0x1a>
 80109c6:	6983      	ldr	r3, [r0, #24]
 80109c8:	b90b      	cbnz	r3, 80109ce <_fflush_r+0x1a>
 80109ca:	f7fe f981 	bl	800ecd0 <__sinit>
 80109ce:	4b14      	ldr	r3, [pc, #80]	; (8010a20 <_fflush_r+0x6c>)
 80109d0:	429c      	cmp	r4, r3
 80109d2:	d11b      	bne.n	8010a0c <_fflush_r+0x58>
 80109d4:	686c      	ldr	r4, [r5, #4]
 80109d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d0ef      	beq.n	80109be <_fflush_r+0xa>
 80109de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109e0:	07d0      	lsls	r0, r2, #31
 80109e2:	d404      	bmi.n	80109ee <_fflush_r+0x3a>
 80109e4:	0599      	lsls	r1, r3, #22
 80109e6:	d402      	bmi.n	80109ee <_fflush_r+0x3a>
 80109e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ea:	f7fe fa4e 	bl	800ee8a <__retarget_lock_acquire_recursive>
 80109ee:	4628      	mov	r0, r5
 80109f0:	4621      	mov	r1, r4
 80109f2:	f7ff ff59 	bl	80108a8 <__sflush_r>
 80109f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109f8:	07da      	lsls	r2, r3, #31
 80109fa:	4605      	mov	r5, r0
 80109fc:	d4e0      	bmi.n	80109c0 <_fflush_r+0xc>
 80109fe:	89a3      	ldrh	r3, [r4, #12]
 8010a00:	059b      	lsls	r3, r3, #22
 8010a02:	d4dd      	bmi.n	80109c0 <_fflush_r+0xc>
 8010a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a06:	f7fe fa41 	bl	800ee8c <__retarget_lock_release_recursive>
 8010a0a:	e7d9      	b.n	80109c0 <_fflush_r+0xc>
 8010a0c:	4b05      	ldr	r3, [pc, #20]	; (8010a24 <_fflush_r+0x70>)
 8010a0e:	429c      	cmp	r4, r3
 8010a10:	d101      	bne.n	8010a16 <_fflush_r+0x62>
 8010a12:	68ac      	ldr	r4, [r5, #8]
 8010a14:	e7df      	b.n	80109d6 <_fflush_r+0x22>
 8010a16:	4b04      	ldr	r3, [pc, #16]	; (8010a28 <_fflush_r+0x74>)
 8010a18:	429c      	cmp	r4, r3
 8010a1a:	bf08      	it	eq
 8010a1c:	68ec      	ldreq	r4, [r5, #12]
 8010a1e:	e7da      	b.n	80109d6 <_fflush_r+0x22>
 8010a20:	08011ed8 	.word	0x08011ed8
 8010a24:	08011ef8 	.word	0x08011ef8
 8010a28:	08011eb8 	.word	0x08011eb8

08010a2c <_localeconv_r>:
 8010a2c:	4800      	ldr	r0, [pc, #0]	; (8010a30 <_localeconv_r+0x4>)
 8010a2e:	4770      	bx	lr
 8010a30:	200002d8 	.word	0x200002d8

08010a34 <_lseek_r>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	4d07      	ldr	r5, [pc, #28]	; (8010a54 <_lseek_r+0x20>)
 8010a38:	4604      	mov	r4, r0
 8010a3a:	4608      	mov	r0, r1
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	2200      	movs	r2, #0
 8010a40:	602a      	str	r2, [r5, #0]
 8010a42:	461a      	mov	r2, r3
 8010a44:	f7f2 ffd2 	bl	80039ec <_lseek>
 8010a48:	1c43      	adds	r3, r0, #1
 8010a4a:	d102      	bne.n	8010a52 <_lseek_r+0x1e>
 8010a4c:	682b      	ldr	r3, [r5, #0]
 8010a4e:	b103      	cbz	r3, 8010a52 <_lseek_r+0x1e>
 8010a50:	6023      	str	r3, [r4, #0]
 8010a52:	bd38      	pop	{r3, r4, r5, pc}
 8010a54:	2000df60 	.word	0x2000df60

08010a58 <__malloc_lock>:
 8010a58:	4801      	ldr	r0, [pc, #4]	; (8010a60 <__malloc_lock+0x8>)
 8010a5a:	f7fe ba16 	b.w	800ee8a <__retarget_lock_acquire_recursive>
 8010a5e:	bf00      	nop
 8010a60:	2000df58 	.word	0x2000df58

08010a64 <__malloc_unlock>:
 8010a64:	4801      	ldr	r0, [pc, #4]	; (8010a6c <__malloc_unlock+0x8>)
 8010a66:	f7fe ba11 	b.w	800ee8c <__retarget_lock_release_recursive>
 8010a6a:	bf00      	nop
 8010a6c:	2000df58 	.word	0x2000df58

08010a70 <_Balloc>:
 8010a70:	b570      	push	{r4, r5, r6, lr}
 8010a72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a74:	4604      	mov	r4, r0
 8010a76:	460d      	mov	r5, r1
 8010a78:	b976      	cbnz	r6, 8010a98 <_Balloc+0x28>
 8010a7a:	2010      	movs	r0, #16
 8010a7c:	f7fe fa08 	bl	800ee90 <malloc>
 8010a80:	4602      	mov	r2, r0
 8010a82:	6260      	str	r0, [r4, #36]	; 0x24
 8010a84:	b920      	cbnz	r0, 8010a90 <_Balloc+0x20>
 8010a86:	4b18      	ldr	r3, [pc, #96]	; (8010ae8 <_Balloc+0x78>)
 8010a88:	4818      	ldr	r0, [pc, #96]	; (8010aec <_Balloc+0x7c>)
 8010a8a:	2166      	movs	r1, #102	; 0x66
 8010a8c:	f000 fcea 	bl	8011464 <__assert_func>
 8010a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a94:	6006      	str	r6, [r0, #0]
 8010a96:	60c6      	str	r6, [r0, #12]
 8010a98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a9a:	68f3      	ldr	r3, [r6, #12]
 8010a9c:	b183      	cbz	r3, 8010ac0 <_Balloc+0x50>
 8010a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010aa6:	b9b8      	cbnz	r0, 8010ad8 <_Balloc+0x68>
 8010aa8:	2101      	movs	r1, #1
 8010aaa:	fa01 f605 	lsl.w	r6, r1, r5
 8010aae:	1d72      	adds	r2, r6, #5
 8010ab0:	0092      	lsls	r2, r2, #2
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f000 fb5a 	bl	801116c <_calloc_r>
 8010ab8:	b160      	cbz	r0, 8010ad4 <_Balloc+0x64>
 8010aba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010abe:	e00e      	b.n	8010ade <_Balloc+0x6e>
 8010ac0:	2221      	movs	r2, #33	; 0x21
 8010ac2:	2104      	movs	r1, #4
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f000 fb51 	bl	801116c <_calloc_r>
 8010aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010acc:	60f0      	str	r0, [r6, #12]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d1e4      	bne.n	8010a9e <_Balloc+0x2e>
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	bd70      	pop	{r4, r5, r6, pc}
 8010ad8:	6802      	ldr	r2, [r0, #0]
 8010ada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ade:	2300      	movs	r3, #0
 8010ae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ae4:	e7f7      	b.n	8010ad6 <_Balloc+0x66>
 8010ae6:	bf00      	nop
 8010ae8:	08011f82 	.word	0x08011f82
 8010aec:	08012009 	.word	0x08012009

08010af0 <_Bfree>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010af4:	4605      	mov	r5, r0
 8010af6:	460c      	mov	r4, r1
 8010af8:	b976      	cbnz	r6, 8010b18 <_Bfree+0x28>
 8010afa:	2010      	movs	r0, #16
 8010afc:	f7fe f9c8 	bl	800ee90 <malloc>
 8010b00:	4602      	mov	r2, r0
 8010b02:	6268      	str	r0, [r5, #36]	; 0x24
 8010b04:	b920      	cbnz	r0, 8010b10 <_Bfree+0x20>
 8010b06:	4b09      	ldr	r3, [pc, #36]	; (8010b2c <_Bfree+0x3c>)
 8010b08:	4809      	ldr	r0, [pc, #36]	; (8010b30 <_Bfree+0x40>)
 8010b0a:	218a      	movs	r1, #138	; 0x8a
 8010b0c:	f000 fcaa 	bl	8011464 <__assert_func>
 8010b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b14:	6006      	str	r6, [r0, #0]
 8010b16:	60c6      	str	r6, [r0, #12]
 8010b18:	b13c      	cbz	r4, 8010b2a <_Bfree+0x3a>
 8010b1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b1c:	6862      	ldr	r2, [r4, #4]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b24:	6021      	str	r1, [r4, #0]
 8010b26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}
 8010b2c:	08011f82 	.word	0x08011f82
 8010b30:	08012009 	.word	0x08012009

08010b34 <__multadd>:
 8010b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b38:	690e      	ldr	r6, [r1, #16]
 8010b3a:	4607      	mov	r7, r0
 8010b3c:	4698      	mov	r8, r3
 8010b3e:	460c      	mov	r4, r1
 8010b40:	f101 0014 	add.w	r0, r1, #20
 8010b44:	2300      	movs	r3, #0
 8010b46:	6805      	ldr	r5, [r0, #0]
 8010b48:	b2a9      	uxth	r1, r5
 8010b4a:	fb02 8101 	mla	r1, r2, r1, r8
 8010b4e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010b52:	0c2d      	lsrs	r5, r5, #16
 8010b54:	fb02 c505 	mla	r5, r2, r5, ip
 8010b58:	b289      	uxth	r1, r1
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010b60:	429e      	cmp	r6, r3
 8010b62:	f840 1b04 	str.w	r1, [r0], #4
 8010b66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010b6a:	dcec      	bgt.n	8010b46 <__multadd+0x12>
 8010b6c:	f1b8 0f00 	cmp.w	r8, #0
 8010b70:	d022      	beq.n	8010bb8 <__multadd+0x84>
 8010b72:	68a3      	ldr	r3, [r4, #8]
 8010b74:	42b3      	cmp	r3, r6
 8010b76:	dc19      	bgt.n	8010bac <__multadd+0x78>
 8010b78:	6861      	ldr	r1, [r4, #4]
 8010b7a:	4638      	mov	r0, r7
 8010b7c:	3101      	adds	r1, #1
 8010b7e:	f7ff ff77 	bl	8010a70 <_Balloc>
 8010b82:	4605      	mov	r5, r0
 8010b84:	b928      	cbnz	r0, 8010b92 <__multadd+0x5e>
 8010b86:	4602      	mov	r2, r0
 8010b88:	4b0d      	ldr	r3, [pc, #52]	; (8010bc0 <__multadd+0x8c>)
 8010b8a:	480e      	ldr	r0, [pc, #56]	; (8010bc4 <__multadd+0x90>)
 8010b8c:	21b5      	movs	r1, #181	; 0xb5
 8010b8e:	f000 fc69 	bl	8011464 <__assert_func>
 8010b92:	6922      	ldr	r2, [r4, #16]
 8010b94:	3202      	adds	r2, #2
 8010b96:	f104 010c 	add.w	r1, r4, #12
 8010b9a:	0092      	lsls	r2, r2, #2
 8010b9c:	300c      	adds	r0, #12
 8010b9e:	f7fe f987 	bl	800eeb0 <memcpy>
 8010ba2:	4621      	mov	r1, r4
 8010ba4:	4638      	mov	r0, r7
 8010ba6:	f7ff ffa3 	bl	8010af0 <_Bfree>
 8010baa:	462c      	mov	r4, r5
 8010bac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010bb0:	3601      	adds	r6, #1
 8010bb2:	f8c3 8014 	str.w	r8, [r3, #20]
 8010bb6:	6126      	str	r6, [r4, #16]
 8010bb8:	4620      	mov	r0, r4
 8010bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bbe:	bf00      	nop
 8010bc0:	08011ff8 	.word	0x08011ff8
 8010bc4:	08012009 	.word	0x08012009

08010bc8 <__hi0bits>:
 8010bc8:	0c03      	lsrs	r3, r0, #16
 8010bca:	041b      	lsls	r3, r3, #16
 8010bcc:	b9d3      	cbnz	r3, 8010c04 <__hi0bits+0x3c>
 8010bce:	0400      	lsls	r0, r0, #16
 8010bd0:	2310      	movs	r3, #16
 8010bd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010bd6:	bf04      	itt	eq
 8010bd8:	0200      	lsleq	r0, r0, #8
 8010bda:	3308      	addeq	r3, #8
 8010bdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010be0:	bf04      	itt	eq
 8010be2:	0100      	lsleq	r0, r0, #4
 8010be4:	3304      	addeq	r3, #4
 8010be6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010bea:	bf04      	itt	eq
 8010bec:	0080      	lsleq	r0, r0, #2
 8010bee:	3302      	addeq	r3, #2
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	db05      	blt.n	8010c00 <__hi0bits+0x38>
 8010bf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010bf8:	f103 0301 	add.w	r3, r3, #1
 8010bfc:	bf08      	it	eq
 8010bfe:	2320      	moveq	r3, #32
 8010c00:	4618      	mov	r0, r3
 8010c02:	4770      	bx	lr
 8010c04:	2300      	movs	r3, #0
 8010c06:	e7e4      	b.n	8010bd2 <__hi0bits+0xa>

08010c08 <__lo0bits>:
 8010c08:	6803      	ldr	r3, [r0, #0]
 8010c0a:	f013 0207 	ands.w	r2, r3, #7
 8010c0e:	4601      	mov	r1, r0
 8010c10:	d00b      	beq.n	8010c2a <__lo0bits+0x22>
 8010c12:	07da      	lsls	r2, r3, #31
 8010c14:	d424      	bmi.n	8010c60 <__lo0bits+0x58>
 8010c16:	0798      	lsls	r0, r3, #30
 8010c18:	bf49      	itett	mi
 8010c1a:	085b      	lsrmi	r3, r3, #1
 8010c1c:	089b      	lsrpl	r3, r3, #2
 8010c1e:	2001      	movmi	r0, #1
 8010c20:	600b      	strmi	r3, [r1, #0]
 8010c22:	bf5c      	itt	pl
 8010c24:	600b      	strpl	r3, [r1, #0]
 8010c26:	2002      	movpl	r0, #2
 8010c28:	4770      	bx	lr
 8010c2a:	b298      	uxth	r0, r3
 8010c2c:	b9b0      	cbnz	r0, 8010c5c <__lo0bits+0x54>
 8010c2e:	0c1b      	lsrs	r3, r3, #16
 8010c30:	2010      	movs	r0, #16
 8010c32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010c36:	bf04      	itt	eq
 8010c38:	0a1b      	lsreq	r3, r3, #8
 8010c3a:	3008      	addeq	r0, #8
 8010c3c:	071a      	lsls	r2, r3, #28
 8010c3e:	bf04      	itt	eq
 8010c40:	091b      	lsreq	r3, r3, #4
 8010c42:	3004      	addeq	r0, #4
 8010c44:	079a      	lsls	r2, r3, #30
 8010c46:	bf04      	itt	eq
 8010c48:	089b      	lsreq	r3, r3, #2
 8010c4a:	3002      	addeq	r0, #2
 8010c4c:	07da      	lsls	r2, r3, #31
 8010c4e:	d403      	bmi.n	8010c58 <__lo0bits+0x50>
 8010c50:	085b      	lsrs	r3, r3, #1
 8010c52:	f100 0001 	add.w	r0, r0, #1
 8010c56:	d005      	beq.n	8010c64 <__lo0bits+0x5c>
 8010c58:	600b      	str	r3, [r1, #0]
 8010c5a:	4770      	bx	lr
 8010c5c:	4610      	mov	r0, r2
 8010c5e:	e7e8      	b.n	8010c32 <__lo0bits+0x2a>
 8010c60:	2000      	movs	r0, #0
 8010c62:	4770      	bx	lr
 8010c64:	2020      	movs	r0, #32
 8010c66:	4770      	bx	lr

08010c68 <__i2b>:
 8010c68:	b510      	push	{r4, lr}
 8010c6a:	460c      	mov	r4, r1
 8010c6c:	2101      	movs	r1, #1
 8010c6e:	f7ff feff 	bl	8010a70 <_Balloc>
 8010c72:	4602      	mov	r2, r0
 8010c74:	b928      	cbnz	r0, 8010c82 <__i2b+0x1a>
 8010c76:	4b05      	ldr	r3, [pc, #20]	; (8010c8c <__i2b+0x24>)
 8010c78:	4805      	ldr	r0, [pc, #20]	; (8010c90 <__i2b+0x28>)
 8010c7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c7e:	f000 fbf1 	bl	8011464 <__assert_func>
 8010c82:	2301      	movs	r3, #1
 8010c84:	6144      	str	r4, [r0, #20]
 8010c86:	6103      	str	r3, [r0, #16]
 8010c88:	bd10      	pop	{r4, pc}
 8010c8a:	bf00      	nop
 8010c8c:	08011ff8 	.word	0x08011ff8
 8010c90:	08012009 	.word	0x08012009

08010c94 <__multiply>:
 8010c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	4614      	mov	r4, r2
 8010c9a:	690a      	ldr	r2, [r1, #16]
 8010c9c:	6923      	ldr	r3, [r4, #16]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	bfb8      	it	lt
 8010ca2:	460b      	movlt	r3, r1
 8010ca4:	460d      	mov	r5, r1
 8010ca6:	bfbc      	itt	lt
 8010ca8:	4625      	movlt	r5, r4
 8010caa:	461c      	movlt	r4, r3
 8010cac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010cb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010cb4:	68ab      	ldr	r3, [r5, #8]
 8010cb6:	6869      	ldr	r1, [r5, #4]
 8010cb8:	eb0a 0709 	add.w	r7, sl, r9
 8010cbc:	42bb      	cmp	r3, r7
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	bfb8      	it	lt
 8010cc2:	3101      	addlt	r1, #1
 8010cc4:	f7ff fed4 	bl	8010a70 <_Balloc>
 8010cc8:	b930      	cbnz	r0, 8010cd8 <__multiply+0x44>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	4b42      	ldr	r3, [pc, #264]	; (8010dd8 <__multiply+0x144>)
 8010cce:	4843      	ldr	r0, [pc, #268]	; (8010ddc <__multiply+0x148>)
 8010cd0:	f240 115d 	movw	r1, #349	; 0x15d
 8010cd4:	f000 fbc6 	bl	8011464 <__assert_func>
 8010cd8:	f100 0614 	add.w	r6, r0, #20
 8010cdc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010ce0:	4633      	mov	r3, r6
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	4543      	cmp	r3, r8
 8010ce6:	d31e      	bcc.n	8010d26 <__multiply+0x92>
 8010ce8:	f105 0c14 	add.w	ip, r5, #20
 8010cec:	f104 0314 	add.w	r3, r4, #20
 8010cf0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010cf4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010cf8:	9202      	str	r2, [sp, #8]
 8010cfa:	ebac 0205 	sub.w	r2, ip, r5
 8010cfe:	3a15      	subs	r2, #21
 8010d00:	f022 0203 	bic.w	r2, r2, #3
 8010d04:	3204      	adds	r2, #4
 8010d06:	f105 0115 	add.w	r1, r5, #21
 8010d0a:	458c      	cmp	ip, r1
 8010d0c:	bf38      	it	cc
 8010d0e:	2204      	movcc	r2, #4
 8010d10:	9201      	str	r2, [sp, #4]
 8010d12:	9a02      	ldr	r2, [sp, #8]
 8010d14:	9303      	str	r3, [sp, #12]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d808      	bhi.n	8010d2c <__multiply+0x98>
 8010d1a:	2f00      	cmp	r7, #0
 8010d1c:	dc55      	bgt.n	8010dca <__multiply+0x136>
 8010d1e:	6107      	str	r7, [r0, #16]
 8010d20:	b005      	add	sp, #20
 8010d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d26:	f843 2b04 	str.w	r2, [r3], #4
 8010d2a:	e7db      	b.n	8010ce4 <__multiply+0x50>
 8010d2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d30:	f1ba 0f00 	cmp.w	sl, #0
 8010d34:	d020      	beq.n	8010d78 <__multiply+0xe4>
 8010d36:	f105 0e14 	add.w	lr, r5, #20
 8010d3a:	46b1      	mov	r9, r6
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010d42:	f8d9 b000 	ldr.w	fp, [r9]
 8010d46:	b2a1      	uxth	r1, r4
 8010d48:	fa1f fb8b 	uxth.w	fp, fp
 8010d4c:	fb0a b101 	mla	r1, sl, r1, fp
 8010d50:	4411      	add	r1, r2
 8010d52:	f8d9 2000 	ldr.w	r2, [r9]
 8010d56:	0c24      	lsrs	r4, r4, #16
 8010d58:	0c12      	lsrs	r2, r2, #16
 8010d5a:	fb0a 2404 	mla	r4, sl, r4, r2
 8010d5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010d62:	b289      	uxth	r1, r1
 8010d64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010d68:	45f4      	cmp	ip, lr
 8010d6a:	f849 1b04 	str.w	r1, [r9], #4
 8010d6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010d72:	d8e4      	bhi.n	8010d3e <__multiply+0xaa>
 8010d74:	9901      	ldr	r1, [sp, #4]
 8010d76:	5072      	str	r2, [r6, r1]
 8010d78:	9a03      	ldr	r2, [sp, #12]
 8010d7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d7e:	3304      	adds	r3, #4
 8010d80:	f1b9 0f00 	cmp.w	r9, #0
 8010d84:	d01f      	beq.n	8010dc6 <__multiply+0x132>
 8010d86:	6834      	ldr	r4, [r6, #0]
 8010d88:	f105 0114 	add.w	r1, r5, #20
 8010d8c:	46b6      	mov	lr, r6
 8010d8e:	f04f 0a00 	mov.w	sl, #0
 8010d92:	880a      	ldrh	r2, [r1, #0]
 8010d94:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010d98:	fb09 b202 	mla	r2, r9, r2, fp
 8010d9c:	4492      	add	sl, r2
 8010d9e:	b2a4      	uxth	r4, r4
 8010da0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010da4:	f84e 4b04 	str.w	r4, [lr], #4
 8010da8:	f851 4b04 	ldr.w	r4, [r1], #4
 8010dac:	f8be 2000 	ldrh.w	r2, [lr]
 8010db0:	0c24      	lsrs	r4, r4, #16
 8010db2:	fb09 2404 	mla	r4, r9, r4, r2
 8010db6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010dba:	458c      	cmp	ip, r1
 8010dbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010dc0:	d8e7      	bhi.n	8010d92 <__multiply+0xfe>
 8010dc2:	9a01      	ldr	r2, [sp, #4]
 8010dc4:	50b4      	str	r4, [r6, r2]
 8010dc6:	3604      	adds	r6, #4
 8010dc8:	e7a3      	b.n	8010d12 <__multiply+0x7e>
 8010dca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1a5      	bne.n	8010d1e <__multiply+0x8a>
 8010dd2:	3f01      	subs	r7, #1
 8010dd4:	e7a1      	b.n	8010d1a <__multiply+0x86>
 8010dd6:	bf00      	nop
 8010dd8:	08011ff8 	.word	0x08011ff8
 8010ddc:	08012009 	.word	0x08012009

08010de0 <__pow5mult>:
 8010de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010de4:	4615      	mov	r5, r2
 8010de6:	f012 0203 	ands.w	r2, r2, #3
 8010dea:	4606      	mov	r6, r0
 8010dec:	460f      	mov	r7, r1
 8010dee:	d007      	beq.n	8010e00 <__pow5mult+0x20>
 8010df0:	4c25      	ldr	r4, [pc, #148]	; (8010e88 <__pow5mult+0xa8>)
 8010df2:	3a01      	subs	r2, #1
 8010df4:	2300      	movs	r3, #0
 8010df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010dfa:	f7ff fe9b 	bl	8010b34 <__multadd>
 8010dfe:	4607      	mov	r7, r0
 8010e00:	10ad      	asrs	r5, r5, #2
 8010e02:	d03d      	beq.n	8010e80 <__pow5mult+0xa0>
 8010e04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e06:	b97c      	cbnz	r4, 8010e28 <__pow5mult+0x48>
 8010e08:	2010      	movs	r0, #16
 8010e0a:	f7fe f841 	bl	800ee90 <malloc>
 8010e0e:	4602      	mov	r2, r0
 8010e10:	6270      	str	r0, [r6, #36]	; 0x24
 8010e12:	b928      	cbnz	r0, 8010e20 <__pow5mult+0x40>
 8010e14:	4b1d      	ldr	r3, [pc, #116]	; (8010e8c <__pow5mult+0xac>)
 8010e16:	481e      	ldr	r0, [pc, #120]	; (8010e90 <__pow5mult+0xb0>)
 8010e18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e1c:	f000 fb22 	bl	8011464 <__assert_func>
 8010e20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e24:	6004      	str	r4, [r0, #0]
 8010e26:	60c4      	str	r4, [r0, #12]
 8010e28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e30:	b94c      	cbnz	r4, 8010e46 <__pow5mult+0x66>
 8010e32:	f240 2171 	movw	r1, #625	; 0x271
 8010e36:	4630      	mov	r0, r6
 8010e38:	f7ff ff16 	bl	8010c68 <__i2b>
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e42:	4604      	mov	r4, r0
 8010e44:	6003      	str	r3, [r0, #0]
 8010e46:	f04f 0900 	mov.w	r9, #0
 8010e4a:	07eb      	lsls	r3, r5, #31
 8010e4c:	d50a      	bpl.n	8010e64 <__pow5mult+0x84>
 8010e4e:	4639      	mov	r1, r7
 8010e50:	4622      	mov	r2, r4
 8010e52:	4630      	mov	r0, r6
 8010e54:	f7ff ff1e 	bl	8010c94 <__multiply>
 8010e58:	4639      	mov	r1, r7
 8010e5a:	4680      	mov	r8, r0
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f7ff fe47 	bl	8010af0 <_Bfree>
 8010e62:	4647      	mov	r7, r8
 8010e64:	106d      	asrs	r5, r5, #1
 8010e66:	d00b      	beq.n	8010e80 <__pow5mult+0xa0>
 8010e68:	6820      	ldr	r0, [r4, #0]
 8010e6a:	b938      	cbnz	r0, 8010e7c <__pow5mult+0x9c>
 8010e6c:	4622      	mov	r2, r4
 8010e6e:	4621      	mov	r1, r4
 8010e70:	4630      	mov	r0, r6
 8010e72:	f7ff ff0f 	bl	8010c94 <__multiply>
 8010e76:	6020      	str	r0, [r4, #0]
 8010e78:	f8c0 9000 	str.w	r9, [r0]
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	e7e4      	b.n	8010e4a <__pow5mult+0x6a>
 8010e80:	4638      	mov	r0, r7
 8010e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e86:	bf00      	nop
 8010e88:	08012160 	.word	0x08012160
 8010e8c:	08011f82 	.word	0x08011f82
 8010e90:	08012009 	.word	0x08012009

08010e94 <__lshift>:
 8010e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e98:	460c      	mov	r4, r1
 8010e9a:	6849      	ldr	r1, [r1, #4]
 8010e9c:	6923      	ldr	r3, [r4, #16]
 8010e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ea2:	68a3      	ldr	r3, [r4, #8]
 8010ea4:	4607      	mov	r7, r0
 8010ea6:	4691      	mov	r9, r2
 8010ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010eac:	f108 0601 	add.w	r6, r8, #1
 8010eb0:	42b3      	cmp	r3, r6
 8010eb2:	db0b      	blt.n	8010ecc <__lshift+0x38>
 8010eb4:	4638      	mov	r0, r7
 8010eb6:	f7ff fddb 	bl	8010a70 <_Balloc>
 8010eba:	4605      	mov	r5, r0
 8010ebc:	b948      	cbnz	r0, 8010ed2 <__lshift+0x3e>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	4b28      	ldr	r3, [pc, #160]	; (8010f64 <__lshift+0xd0>)
 8010ec2:	4829      	ldr	r0, [pc, #164]	; (8010f68 <__lshift+0xd4>)
 8010ec4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010ec8:	f000 facc 	bl	8011464 <__assert_func>
 8010ecc:	3101      	adds	r1, #1
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	e7ee      	b.n	8010eb0 <__lshift+0x1c>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f100 0114 	add.w	r1, r0, #20
 8010ed8:	f100 0210 	add.w	r2, r0, #16
 8010edc:	4618      	mov	r0, r3
 8010ede:	4553      	cmp	r3, sl
 8010ee0:	db33      	blt.n	8010f4a <__lshift+0xb6>
 8010ee2:	6920      	ldr	r0, [r4, #16]
 8010ee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ee8:	f104 0314 	add.w	r3, r4, #20
 8010eec:	f019 091f 	ands.w	r9, r9, #31
 8010ef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ef4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ef8:	d02b      	beq.n	8010f52 <__lshift+0xbe>
 8010efa:	f1c9 0e20 	rsb	lr, r9, #32
 8010efe:	468a      	mov	sl, r1
 8010f00:	2200      	movs	r2, #0
 8010f02:	6818      	ldr	r0, [r3, #0]
 8010f04:	fa00 f009 	lsl.w	r0, r0, r9
 8010f08:	4302      	orrs	r2, r0
 8010f0a:	f84a 2b04 	str.w	r2, [sl], #4
 8010f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f12:	459c      	cmp	ip, r3
 8010f14:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f18:	d8f3      	bhi.n	8010f02 <__lshift+0x6e>
 8010f1a:	ebac 0304 	sub.w	r3, ip, r4
 8010f1e:	3b15      	subs	r3, #21
 8010f20:	f023 0303 	bic.w	r3, r3, #3
 8010f24:	3304      	adds	r3, #4
 8010f26:	f104 0015 	add.w	r0, r4, #21
 8010f2a:	4584      	cmp	ip, r0
 8010f2c:	bf38      	it	cc
 8010f2e:	2304      	movcc	r3, #4
 8010f30:	50ca      	str	r2, [r1, r3]
 8010f32:	b10a      	cbz	r2, 8010f38 <__lshift+0xa4>
 8010f34:	f108 0602 	add.w	r6, r8, #2
 8010f38:	3e01      	subs	r6, #1
 8010f3a:	4638      	mov	r0, r7
 8010f3c:	612e      	str	r6, [r5, #16]
 8010f3e:	4621      	mov	r1, r4
 8010f40:	f7ff fdd6 	bl	8010af0 <_Bfree>
 8010f44:	4628      	mov	r0, r5
 8010f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f4e:	3301      	adds	r3, #1
 8010f50:	e7c5      	b.n	8010ede <__lshift+0x4a>
 8010f52:	3904      	subs	r1, #4
 8010f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f5c:	459c      	cmp	ip, r3
 8010f5e:	d8f9      	bhi.n	8010f54 <__lshift+0xc0>
 8010f60:	e7ea      	b.n	8010f38 <__lshift+0xa4>
 8010f62:	bf00      	nop
 8010f64:	08011ff8 	.word	0x08011ff8
 8010f68:	08012009 	.word	0x08012009

08010f6c <__mcmp>:
 8010f6c:	b530      	push	{r4, r5, lr}
 8010f6e:	6902      	ldr	r2, [r0, #16]
 8010f70:	690c      	ldr	r4, [r1, #16]
 8010f72:	1b12      	subs	r2, r2, r4
 8010f74:	d10e      	bne.n	8010f94 <__mcmp+0x28>
 8010f76:	f100 0314 	add.w	r3, r0, #20
 8010f7a:	3114      	adds	r1, #20
 8010f7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f8c:	42a5      	cmp	r5, r4
 8010f8e:	d003      	beq.n	8010f98 <__mcmp+0x2c>
 8010f90:	d305      	bcc.n	8010f9e <__mcmp+0x32>
 8010f92:	2201      	movs	r2, #1
 8010f94:	4610      	mov	r0, r2
 8010f96:	bd30      	pop	{r4, r5, pc}
 8010f98:	4283      	cmp	r3, r0
 8010f9a:	d3f3      	bcc.n	8010f84 <__mcmp+0x18>
 8010f9c:	e7fa      	b.n	8010f94 <__mcmp+0x28>
 8010f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010fa2:	e7f7      	b.n	8010f94 <__mcmp+0x28>

08010fa4 <__mdiff>:
 8010fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa8:	460c      	mov	r4, r1
 8010faa:	4606      	mov	r6, r0
 8010fac:	4611      	mov	r1, r2
 8010fae:	4620      	mov	r0, r4
 8010fb0:	4617      	mov	r7, r2
 8010fb2:	f7ff ffdb 	bl	8010f6c <__mcmp>
 8010fb6:	1e05      	subs	r5, r0, #0
 8010fb8:	d110      	bne.n	8010fdc <__mdiff+0x38>
 8010fba:	4629      	mov	r1, r5
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f7ff fd57 	bl	8010a70 <_Balloc>
 8010fc2:	b930      	cbnz	r0, 8010fd2 <__mdiff+0x2e>
 8010fc4:	4b39      	ldr	r3, [pc, #228]	; (80110ac <__mdiff+0x108>)
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	f240 2132 	movw	r1, #562	; 0x232
 8010fcc:	4838      	ldr	r0, [pc, #224]	; (80110b0 <__mdiff+0x10c>)
 8010fce:	f000 fa49 	bl	8011464 <__assert_func>
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fdc:	bfa4      	itt	ge
 8010fde:	463b      	movge	r3, r7
 8010fe0:	4627      	movge	r7, r4
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	6879      	ldr	r1, [r7, #4]
 8010fe6:	bfa6      	itte	ge
 8010fe8:	461c      	movge	r4, r3
 8010fea:	2500      	movge	r5, #0
 8010fec:	2501      	movlt	r5, #1
 8010fee:	f7ff fd3f 	bl	8010a70 <_Balloc>
 8010ff2:	b920      	cbnz	r0, 8010ffe <__mdiff+0x5a>
 8010ff4:	4b2d      	ldr	r3, [pc, #180]	; (80110ac <__mdiff+0x108>)
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ffc:	e7e6      	b.n	8010fcc <__mdiff+0x28>
 8010ffe:	693e      	ldr	r6, [r7, #16]
 8011000:	60c5      	str	r5, [r0, #12]
 8011002:	6925      	ldr	r5, [r4, #16]
 8011004:	f107 0114 	add.w	r1, r7, #20
 8011008:	f104 0914 	add.w	r9, r4, #20
 801100c:	f100 0e14 	add.w	lr, r0, #20
 8011010:	f107 0210 	add.w	r2, r7, #16
 8011014:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011018:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801101c:	46f2      	mov	sl, lr
 801101e:	2700      	movs	r7, #0
 8011020:	f859 3b04 	ldr.w	r3, [r9], #4
 8011024:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011028:	fa1f f883 	uxth.w	r8, r3
 801102c:	fa17 f78b 	uxtah	r7, r7, fp
 8011030:	0c1b      	lsrs	r3, r3, #16
 8011032:	eba7 0808 	sub.w	r8, r7, r8
 8011036:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801103a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801103e:	fa1f f888 	uxth.w	r8, r8
 8011042:	141f      	asrs	r7, r3, #16
 8011044:	454d      	cmp	r5, r9
 8011046:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801104a:	f84a 3b04 	str.w	r3, [sl], #4
 801104e:	d8e7      	bhi.n	8011020 <__mdiff+0x7c>
 8011050:	1b2b      	subs	r3, r5, r4
 8011052:	3b15      	subs	r3, #21
 8011054:	f023 0303 	bic.w	r3, r3, #3
 8011058:	3304      	adds	r3, #4
 801105a:	3415      	adds	r4, #21
 801105c:	42a5      	cmp	r5, r4
 801105e:	bf38      	it	cc
 8011060:	2304      	movcc	r3, #4
 8011062:	4419      	add	r1, r3
 8011064:	4473      	add	r3, lr
 8011066:	469e      	mov	lr, r3
 8011068:	460d      	mov	r5, r1
 801106a:	4565      	cmp	r5, ip
 801106c:	d30e      	bcc.n	801108c <__mdiff+0xe8>
 801106e:	f10c 0203 	add.w	r2, ip, #3
 8011072:	1a52      	subs	r2, r2, r1
 8011074:	f022 0203 	bic.w	r2, r2, #3
 8011078:	3903      	subs	r1, #3
 801107a:	458c      	cmp	ip, r1
 801107c:	bf38      	it	cc
 801107e:	2200      	movcc	r2, #0
 8011080:	441a      	add	r2, r3
 8011082:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011086:	b17b      	cbz	r3, 80110a8 <__mdiff+0x104>
 8011088:	6106      	str	r6, [r0, #16]
 801108a:	e7a5      	b.n	8010fd8 <__mdiff+0x34>
 801108c:	f855 8b04 	ldr.w	r8, [r5], #4
 8011090:	fa17 f488 	uxtah	r4, r7, r8
 8011094:	1422      	asrs	r2, r4, #16
 8011096:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801109a:	b2a4      	uxth	r4, r4
 801109c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80110a0:	f84e 4b04 	str.w	r4, [lr], #4
 80110a4:	1417      	asrs	r7, r2, #16
 80110a6:	e7e0      	b.n	801106a <__mdiff+0xc6>
 80110a8:	3e01      	subs	r6, #1
 80110aa:	e7ea      	b.n	8011082 <__mdiff+0xde>
 80110ac:	08011ff8 	.word	0x08011ff8
 80110b0:	08012009 	.word	0x08012009

080110b4 <__d2b>:
 80110b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110b8:	4689      	mov	r9, r1
 80110ba:	2101      	movs	r1, #1
 80110bc:	ec57 6b10 	vmov	r6, r7, d0
 80110c0:	4690      	mov	r8, r2
 80110c2:	f7ff fcd5 	bl	8010a70 <_Balloc>
 80110c6:	4604      	mov	r4, r0
 80110c8:	b930      	cbnz	r0, 80110d8 <__d2b+0x24>
 80110ca:	4602      	mov	r2, r0
 80110cc:	4b25      	ldr	r3, [pc, #148]	; (8011164 <__d2b+0xb0>)
 80110ce:	4826      	ldr	r0, [pc, #152]	; (8011168 <__d2b+0xb4>)
 80110d0:	f240 310a 	movw	r1, #778	; 0x30a
 80110d4:	f000 f9c6 	bl	8011464 <__assert_func>
 80110d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110e0:	bb35      	cbnz	r5, 8011130 <__d2b+0x7c>
 80110e2:	2e00      	cmp	r6, #0
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	d028      	beq.n	801113a <__d2b+0x86>
 80110e8:	4668      	mov	r0, sp
 80110ea:	9600      	str	r6, [sp, #0]
 80110ec:	f7ff fd8c 	bl	8010c08 <__lo0bits>
 80110f0:	9900      	ldr	r1, [sp, #0]
 80110f2:	b300      	cbz	r0, 8011136 <__d2b+0x82>
 80110f4:	9a01      	ldr	r2, [sp, #4]
 80110f6:	f1c0 0320 	rsb	r3, r0, #32
 80110fa:	fa02 f303 	lsl.w	r3, r2, r3
 80110fe:	430b      	orrs	r3, r1
 8011100:	40c2      	lsrs	r2, r0
 8011102:	6163      	str	r3, [r4, #20]
 8011104:	9201      	str	r2, [sp, #4]
 8011106:	9b01      	ldr	r3, [sp, #4]
 8011108:	61a3      	str	r3, [r4, #24]
 801110a:	2b00      	cmp	r3, #0
 801110c:	bf14      	ite	ne
 801110e:	2202      	movne	r2, #2
 8011110:	2201      	moveq	r2, #1
 8011112:	6122      	str	r2, [r4, #16]
 8011114:	b1d5      	cbz	r5, 801114c <__d2b+0x98>
 8011116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801111a:	4405      	add	r5, r0
 801111c:	f8c9 5000 	str.w	r5, [r9]
 8011120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011124:	f8c8 0000 	str.w	r0, [r8]
 8011128:	4620      	mov	r0, r4
 801112a:	b003      	add	sp, #12
 801112c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011134:	e7d5      	b.n	80110e2 <__d2b+0x2e>
 8011136:	6161      	str	r1, [r4, #20]
 8011138:	e7e5      	b.n	8011106 <__d2b+0x52>
 801113a:	a801      	add	r0, sp, #4
 801113c:	f7ff fd64 	bl	8010c08 <__lo0bits>
 8011140:	9b01      	ldr	r3, [sp, #4]
 8011142:	6163      	str	r3, [r4, #20]
 8011144:	2201      	movs	r2, #1
 8011146:	6122      	str	r2, [r4, #16]
 8011148:	3020      	adds	r0, #32
 801114a:	e7e3      	b.n	8011114 <__d2b+0x60>
 801114c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011154:	f8c9 0000 	str.w	r0, [r9]
 8011158:	6918      	ldr	r0, [r3, #16]
 801115a:	f7ff fd35 	bl	8010bc8 <__hi0bits>
 801115e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011162:	e7df      	b.n	8011124 <__d2b+0x70>
 8011164:	08011ff8 	.word	0x08011ff8
 8011168:	08012009 	.word	0x08012009

0801116c <_calloc_r>:
 801116c:	b513      	push	{r0, r1, r4, lr}
 801116e:	434a      	muls	r2, r1
 8011170:	4611      	mov	r1, r2
 8011172:	9201      	str	r2, [sp, #4]
 8011174:	f7fd ff02 	bl	800ef7c <_malloc_r>
 8011178:	4604      	mov	r4, r0
 801117a:	b118      	cbz	r0, 8011184 <_calloc_r+0x18>
 801117c:	9a01      	ldr	r2, [sp, #4]
 801117e:	2100      	movs	r1, #0
 8011180:	f7fd fea4 	bl	800eecc <memset>
 8011184:	4620      	mov	r0, r4
 8011186:	b002      	add	sp, #8
 8011188:	bd10      	pop	{r4, pc}

0801118a <__ssputs_r>:
 801118a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801118e:	688e      	ldr	r6, [r1, #8]
 8011190:	429e      	cmp	r6, r3
 8011192:	4682      	mov	sl, r0
 8011194:	460c      	mov	r4, r1
 8011196:	4690      	mov	r8, r2
 8011198:	461f      	mov	r7, r3
 801119a:	d838      	bhi.n	801120e <__ssputs_r+0x84>
 801119c:	898a      	ldrh	r2, [r1, #12]
 801119e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80111a2:	d032      	beq.n	801120a <__ssputs_r+0x80>
 80111a4:	6825      	ldr	r5, [r4, #0]
 80111a6:	6909      	ldr	r1, [r1, #16]
 80111a8:	eba5 0901 	sub.w	r9, r5, r1
 80111ac:	6965      	ldr	r5, [r4, #20]
 80111ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111b6:	3301      	adds	r3, #1
 80111b8:	444b      	add	r3, r9
 80111ba:	106d      	asrs	r5, r5, #1
 80111bc:	429d      	cmp	r5, r3
 80111be:	bf38      	it	cc
 80111c0:	461d      	movcc	r5, r3
 80111c2:	0553      	lsls	r3, r2, #21
 80111c4:	d531      	bpl.n	801122a <__ssputs_r+0xa0>
 80111c6:	4629      	mov	r1, r5
 80111c8:	f7fd fed8 	bl	800ef7c <_malloc_r>
 80111cc:	4606      	mov	r6, r0
 80111ce:	b950      	cbnz	r0, 80111e6 <__ssputs_r+0x5c>
 80111d0:	230c      	movs	r3, #12
 80111d2:	f8ca 3000 	str.w	r3, [sl]
 80111d6:	89a3      	ldrh	r3, [r4, #12]
 80111d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111dc:	81a3      	strh	r3, [r4, #12]
 80111de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111e6:	6921      	ldr	r1, [r4, #16]
 80111e8:	464a      	mov	r2, r9
 80111ea:	f7fd fe61 	bl	800eeb0 <memcpy>
 80111ee:	89a3      	ldrh	r3, [r4, #12]
 80111f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80111f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111f8:	81a3      	strh	r3, [r4, #12]
 80111fa:	6126      	str	r6, [r4, #16]
 80111fc:	6165      	str	r5, [r4, #20]
 80111fe:	444e      	add	r6, r9
 8011200:	eba5 0509 	sub.w	r5, r5, r9
 8011204:	6026      	str	r6, [r4, #0]
 8011206:	60a5      	str	r5, [r4, #8]
 8011208:	463e      	mov	r6, r7
 801120a:	42be      	cmp	r6, r7
 801120c:	d900      	bls.n	8011210 <__ssputs_r+0x86>
 801120e:	463e      	mov	r6, r7
 8011210:	4632      	mov	r2, r6
 8011212:	6820      	ldr	r0, [r4, #0]
 8011214:	4641      	mov	r1, r8
 8011216:	f000 f967 	bl	80114e8 <memmove>
 801121a:	68a3      	ldr	r3, [r4, #8]
 801121c:	6822      	ldr	r2, [r4, #0]
 801121e:	1b9b      	subs	r3, r3, r6
 8011220:	4432      	add	r2, r6
 8011222:	60a3      	str	r3, [r4, #8]
 8011224:	6022      	str	r2, [r4, #0]
 8011226:	2000      	movs	r0, #0
 8011228:	e7db      	b.n	80111e2 <__ssputs_r+0x58>
 801122a:	462a      	mov	r2, r5
 801122c:	f000 f976 	bl	801151c <_realloc_r>
 8011230:	4606      	mov	r6, r0
 8011232:	2800      	cmp	r0, #0
 8011234:	d1e1      	bne.n	80111fa <__ssputs_r+0x70>
 8011236:	6921      	ldr	r1, [r4, #16]
 8011238:	4650      	mov	r0, sl
 801123a:	f7fd fe4f 	bl	800eedc <_free_r>
 801123e:	e7c7      	b.n	80111d0 <__ssputs_r+0x46>

08011240 <_svfiprintf_r>:
 8011240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011244:	4698      	mov	r8, r3
 8011246:	898b      	ldrh	r3, [r1, #12]
 8011248:	061b      	lsls	r3, r3, #24
 801124a:	b09d      	sub	sp, #116	; 0x74
 801124c:	4607      	mov	r7, r0
 801124e:	460d      	mov	r5, r1
 8011250:	4614      	mov	r4, r2
 8011252:	d50e      	bpl.n	8011272 <_svfiprintf_r+0x32>
 8011254:	690b      	ldr	r3, [r1, #16]
 8011256:	b963      	cbnz	r3, 8011272 <_svfiprintf_r+0x32>
 8011258:	2140      	movs	r1, #64	; 0x40
 801125a:	f7fd fe8f 	bl	800ef7c <_malloc_r>
 801125e:	6028      	str	r0, [r5, #0]
 8011260:	6128      	str	r0, [r5, #16]
 8011262:	b920      	cbnz	r0, 801126e <_svfiprintf_r+0x2e>
 8011264:	230c      	movs	r3, #12
 8011266:	603b      	str	r3, [r7, #0]
 8011268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801126c:	e0d1      	b.n	8011412 <_svfiprintf_r+0x1d2>
 801126e:	2340      	movs	r3, #64	; 0x40
 8011270:	616b      	str	r3, [r5, #20]
 8011272:	2300      	movs	r3, #0
 8011274:	9309      	str	r3, [sp, #36]	; 0x24
 8011276:	2320      	movs	r3, #32
 8011278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801127c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011280:	2330      	movs	r3, #48	; 0x30
 8011282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801142c <_svfiprintf_r+0x1ec>
 8011286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801128a:	f04f 0901 	mov.w	r9, #1
 801128e:	4623      	mov	r3, r4
 8011290:	469a      	mov	sl, r3
 8011292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011296:	b10a      	cbz	r2, 801129c <_svfiprintf_r+0x5c>
 8011298:	2a25      	cmp	r2, #37	; 0x25
 801129a:	d1f9      	bne.n	8011290 <_svfiprintf_r+0x50>
 801129c:	ebba 0b04 	subs.w	fp, sl, r4
 80112a0:	d00b      	beq.n	80112ba <_svfiprintf_r+0x7a>
 80112a2:	465b      	mov	r3, fp
 80112a4:	4622      	mov	r2, r4
 80112a6:	4629      	mov	r1, r5
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7ff ff6e 	bl	801118a <__ssputs_r>
 80112ae:	3001      	adds	r0, #1
 80112b0:	f000 80aa 	beq.w	8011408 <_svfiprintf_r+0x1c8>
 80112b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112b6:	445a      	add	r2, fp
 80112b8:	9209      	str	r2, [sp, #36]	; 0x24
 80112ba:	f89a 3000 	ldrb.w	r3, [sl]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f000 80a2 	beq.w	8011408 <_svfiprintf_r+0x1c8>
 80112c4:	2300      	movs	r3, #0
 80112c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112ce:	f10a 0a01 	add.w	sl, sl, #1
 80112d2:	9304      	str	r3, [sp, #16]
 80112d4:	9307      	str	r3, [sp, #28]
 80112d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112da:	931a      	str	r3, [sp, #104]	; 0x68
 80112dc:	4654      	mov	r4, sl
 80112de:	2205      	movs	r2, #5
 80112e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112e4:	4851      	ldr	r0, [pc, #324]	; (801142c <_svfiprintf_r+0x1ec>)
 80112e6:	f7ee ff7b 	bl	80001e0 <memchr>
 80112ea:	9a04      	ldr	r2, [sp, #16]
 80112ec:	b9d8      	cbnz	r0, 8011326 <_svfiprintf_r+0xe6>
 80112ee:	06d0      	lsls	r0, r2, #27
 80112f0:	bf44      	itt	mi
 80112f2:	2320      	movmi	r3, #32
 80112f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112f8:	0711      	lsls	r1, r2, #28
 80112fa:	bf44      	itt	mi
 80112fc:	232b      	movmi	r3, #43	; 0x2b
 80112fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011302:	f89a 3000 	ldrb.w	r3, [sl]
 8011306:	2b2a      	cmp	r3, #42	; 0x2a
 8011308:	d015      	beq.n	8011336 <_svfiprintf_r+0xf6>
 801130a:	9a07      	ldr	r2, [sp, #28]
 801130c:	4654      	mov	r4, sl
 801130e:	2000      	movs	r0, #0
 8011310:	f04f 0c0a 	mov.w	ip, #10
 8011314:	4621      	mov	r1, r4
 8011316:	f811 3b01 	ldrb.w	r3, [r1], #1
 801131a:	3b30      	subs	r3, #48	; 0x30
 801131c:	2b09      	cmp	r3, #9
 801131e:	d94e      	bls.n	80113be <_svfiprintf_r+0x17e>
 8011320:	b1b0      	cbz	r0, 8011350 <_svfiprintf_r+0x110>
 8011322:	9207      	str	r2, [sp, #28]
 8011324:	e014      	b.n	8011350 <_svfiprintf_r+0x110>
 8011326:	eba0 0308 	sub.w	r3, r0, r8
 801132a:	fa09 f303 	lsl.w	r3, r9, r3
 801132e:	4313      	orrs	r3, r2
 8011330:	9304      	str	r3, [sp, #16]
 8011332:	46a2      	mov	sl, r4
 8011334:	e7d2      	b.n	80112dc <_svfiprintf_r+0x9c>
 8011336:	9b03      	ldr	r3, [sp, #12]
 8011338:	1d19      	adds	r1, r3, #4
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	9103      	str	r1, [sp, #12]
 801133e:	2b00      	cmp	r3, #0
 8011340:	bfbb      	ittet	lt
 8011342:	425b      	neglt	r3, r3
 8011344:	f042 0202 	orrlt.w	r2, r2, #2
 8011348:	9307      	strge	r3, [sp, #28]
 801134a:	9307      	strlt	r3, [sp, #28]
 801134c:	bfb8      	it	lt
 801134e:	9204      	strlt	r2, [sp, #16]
 8011350:	7823      	ldrb	r3, [r4, #0]
 8011352:	2b2e      	cmp	r3, #46	; 0x2e
 8011354:	d10c      	bne.n	8011370 <_svfiprintf_r+0x130>
 8011356:	7863      	ldrb	r3, [r4, #1]
 8011358:	2b2a      	cmp	r3, #42	; 0x2a
 801135a:	d135      	bne.n	80113c8 <_svfiprintf_r+0x188>
 801135c:	9b03      	ldr	r3, [sp, #12]
 801135e:	1d1a      	adds	r2, r3, #4
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	9203      	str	r2, [sp, #12]
 8011364:	2b00      	cmp	r3, #0
 8011366:	bfb8      	it	lt
 8011368:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801136c:	3402      	adds	r4, #2
 801136e:	9305      	str	r3, [sp, #20]
 8011370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801143c <_svfiprintf_r+0x1fc>
 8011374:	7821      	ldrb	r1, [r4, #0]
 8011376:	2203      	movs	r2, #3
 8011378:	4650      	mov	r0, sl
 801137a:	f7ee ff31 	bl	80001e0 <memchr>
 801137e:	b140      	cbz	r0, 8011392 <_svfiprintf_r+0x152>
 8011380:	2340      	movs	r3, #64	; 0x40
 8011382:	eba0 000a 	sub.w	r0, r0, sl
 8011386:	fa03 f000 	lsl.w	r0, r3, r0
 801138a:	9b04      	ldr	r3, [sp, #16]
 801138c:	4303      	orrs	r3, r0
 801138e:	3401      	adds	r4, #1
 8011390:	9304      	str	r3, [sp, #16]
 8011392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011396:	4826      	ldr	r0, [pc, #152]	; (8011430 <_svfiprintf_r+0x1f0>)
 8011398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801139c:	2206      	movs	r2, #6
 801139e:	f7ee ff1f 	bl	80001e0 <memchr>
 80113a2:	2800      	cmp	r0, #0
 80113a4:	d038      	beq.n	8011418 <_svfiprintf_r+0x1d8>
 80113a6:	4b23      	ldr	r3, [pc, #140]	; (8011434 <_svfiprintf_r+0x1f4>)
 80113a8:	bb1b      	cbnz	r3, 80113f2 <_svfiprintf_r+0x1b2>
 80113aa:	9b03      	ldr	r3, [sp, #12]
 80113ac:	3307      	adds	r3, #7
 80113ae:	f023 0307 	bic.w	r3, r3, #7
 80113b2:	3308      	adds	r3, #8
 80113b4:	9303      	str	r3, [sp, #12]
 80113b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113b8:	4433      	add	r3, r6
 80113ba:	9309      	str	r3, [sp, #36]	; 0x24
 80113bc:	e767      	b.n	801128e <_svfiprintf_r+0x4e>
 80113be:	fb0c 3202 	mla	r2, ip, r2, r3
 80113c2:	460c      	mov	r4, r1
 80113c4:	2001      	movs	r0, #1
 80113c6:	e7a5      	b.n	8011314 <_svfiprintf_r+0xd4>
 80113c8:	2300      	movs	r3, #0
 80113ca:	3401      	adds	r4, #1
 80113cc:	9305      	str	r3, [sp, #20]
 80113ce:	4619      	mov	r1, r3
 80113d0:	f04f 0c0a 	mov.w	ip, #10
 80113d4:	4620      	mov	r0, r4
 80113d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113da:	3a30      	subs	r2, #48	; 0x30
 80113dc:	2a09      	cmp	r2, #9
 80113de:	d903      	bls.n	80113e8 <_svfiprintf_r+0x1a8>
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d0c5      	beq.n	8011370 <_svfiprintf_r+0x130>
 80113e4:	9105      	str	r1, [sp, #20]
 80113e6:	e7c3      	b.n	8011370 <_svfiprintf_r+0x130>
 80113e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80113ec:	4604      	mov	r4, r0
 80113ee:	2301      	movs	r3, #1
 80113f0:	e7f0      	b.n	80113d4 <_svfiprintf_r+0x194>
 80113f2:	ab03      	add	r3, sp, #12
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	462a      	mov	r2, r5
 80113f8:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <_svfiprintf_r+0x1f8>)
 80113fa:	a904      	add	r1, sp, #16
 80113fc:	4638      	mov	r0, r7
 80113fe:	f7fd feb7 	bl	800f170 <_printf_float>
 8011402:	1c42      	adds	r2, r0, #1
 8011404:	4606      	mov	r6, r0
 8011406:	d1d6      	bne.n	80113b6 <_svfiprintf_r+0x176>
 8011408:	89ab      	ldrh	r3, [r5, #12]
 801140a:	065b      	lsls	r3, r3, #25
 801140c:	f53f af2c 	bmi.w	8011268 <_svfiprintf_r+0x28>
 8011410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011412:	b01d      	add	sp, #116	; 0x74
 8011414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011418:	ab03      	add	r3, sp, #12
 801141a:	9300      	str	r3, [sp, #0]
 801141c:	462a      	mov	r2, r5
 801141e:	4b06      	ldr	r3, [pc, #24]	; (8011438 <_svfiprintf_r+0x1f8>)
 8011420:	a904      	add	r1, sp, #16
 8011422:	4638      	mov	r0, r7
 8011424:	f7fe f948 	bl	800f6b8 <_printf_i>
 8011428:	e7eb      	b.n	8011402 <_svfiprintf_r+0x1c2>
 801142a:	bf00      	nop
 801142c:	0801216c 	.word	0x0801216c
 8011430:	08012176 	.word	0x08012176
 8011434:	0800f171 	.word	0x0800f171
 8011438:	0801118b 	.word	0x0801118b
 801143c:	08012172 	.word	0x08012172

08011440 <_read_r>:
 8011440:	b538      	push	{r3, r4, r5, lr}
 8011442:	4d07      	ldr	r5, [pc, #28]	; (8011460 <_read_r+0x20>)
 8011444:	4604      	mov	r4, r0
 8011446:	4608      	mov	r0, r1
 8011448:	4611      	mov	r1, r2
 801144a:	2200      	movs	r2, #0
 801144c:	602a      	str	r2, [r5, #0]
 801144e:	461a      	mov	r2, r3
 8011450:	f7f2 fa6c 	bl	800392c <_read>
 8011454:	1c43      	adds	r3, r0, #1
 8011456:	d102      	bne.n	801145e <_read_r+0x1e>
 8011458:	682b      	ldr	r3, [r5, #0]
 801145a:	b103      	cbz	r3, 801145e <_read_r+0x1e>
 801145c:	6023      	str	r3, [r4, #0]
 801145e:	bd38      	pop	{r3, r4, r5, pc}
 8011460:	2000df60 	.word	0x2000df60

08011464 <__assert_func>:
 8011464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011466:	4614      	mov	r4, r2
 8011468:	461a      	mov	r2, r3
 801146a:	4b09      	ldr	r3, [pc, #36]	; (8011490 <__assert_func+0x2c>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4605      	mov	r5, r0
 8011470:	68d8      	ldr	r0, [r3, #12]
 8011472:	b14c      	cbz	r4, 8011488 <__assert_func+0x24>
 8011474:	4b07      	ldr	r3, [pc, #28]	; (8011494 <__assert_func+0x30>)
 8011476:	9100      	str	r1, [sp, #0]
 8011478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801147c:	4906      	ldr	r1, [pc, #24]	; (8011498 <__assert_func+0x34>)
 801147e:	462b      	mov	r3, r5
 8011480:	f000 f80e 	bl	80114a0 <fiprintf>
 8011484:	f000 fa98 	bl	80119b8 <abort>
 8011488:	4b04      	ldr	r3, [pc, #16]	; (801149c <__assert_func+0x38>)
 801148a:	461c      	mov	r4, r3
 801148c:	e7f3      	b.n	8011476 <__assert_func+0x12>
 801148e:	bf00      	nop
 8011490:	20000184 	.word	0x20000184
 8011494:	0801217d 	.word	0x0801217d
 8011498:	0801218a 	.word	0x0801218a
 801149c:	080121b8 	.word	0x080121b8

080114a0 <fiprintf>:
 80114a0:	b40e      	push	{r1, r2, r3}
 80114a2:	b503      	push	{r0, r1, lr}
 80114a4:	4601      	mov	r1, r0
 80114a6:	ab03      	add	r3, sp, #12
 80114a8:	4805      	ldr	r0, [pc, #20]	; (80114c0 <fiprintf+0x20>)
 80114aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80114ae:	6800      	ldr	r0, [r0, #0]
 80114b0:	9301      	str	r3, [sp, #4]
 80114b2:	f000 f883 	bl	80115bc <_vfiprintf_r>
 80114b6:	b002      	add	sp, #8
 80114b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114bc:	b003      	add	sp, #12
 80114be:	4770      	bx	lr
 80114c0:	20000184 	.word	0x20000184

080114c4 <__ascii_mbtowc>:
 80114c4:	b082      	sub	sp, #8
 80114c6:	b901      	cbnz	r1, 80114ca <__ascii_mbtowc+0x6>
 80114c8:	a901      	add	r1, sp, #4
 80114ca:	b142      	cbz	r2, 80114de <__ascii_mbtowc+0x1a>
 80114cc:	b14b      	cbz	r3, 80114e2 <__ascii_mbtowc+0x1e>
 80114ce:	7813      	ldrb	r3, [r2, #0]
 80114d0:	600b      	str	r3, [r1, #0]
 80114d2:	7812      	ldrb	r2, [r2, #0]
 80114d4:	1e10      	subs	r0, r2, #0
 80114d6:	bf18      	it	ne
 80114d8:	2001      	movne	r0, #1
 80114da:	b002      	add	sp, #8
 80114dc:	4770      	bx	lr
 80114de:	4610      	mov	r0, r2
 80114e0:	e7fb      	b.n	80114da <__ascii_mbtowc+0x16>
 80114e2:	f06f 0001 	mvn.w	r0, #1
 80114e6:	e7f8      	b.n	80114da <__ascii_mbtowc+0x16>

080114e8 <memmove>:
 80114e8:	4288      	cmp	r0, r1
 80114ea:	b510      	push	{r4, lr}
 80114ec:	eb01 0402 	add.w	r4, r1, r2
 80114f0:	d902      	bls.n	80114f8 <memmove+0x10>
 80114f2:	4284      	cmp	r4, r0
 80114f4:	4623      	mov	r3, r4
 80114f6:	d807      	bhi.n	8011508 <memmove+0x20>
 80114f8:	1e43      	subs	r3, r0, #1
 80114fa:	42a1      	cmp	r1, r4
 80114fc:	d008      	beq.n	8011510 <memmove+0x28>
 80114fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011506:	e7f8      	b.n	80114fa <memmove+0x12>
 8011508:	4402      	add	r2, r0
 801150a:	4601      	mov	r1, r0
 801150c:	428a      	cmp	r2, r1
 801150e:	d100      	bne.n	8011512 <memmove+0x2a>
 8011510:	bd10      	pop	{r4, pc}
 8011512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801151a:	e7f7      	b.n	801150c <memmove+0x24>

0801151c <_realloc_r>:
 801151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151e:	4607      	mov	r7, r0
 8011520:	4614      	mov	r4, r2
 8011522:	460e      	mov	r6, r1
 8011524:	b921      	cbnz	r1, 8011530 <_realloc_r+0x14>
 8011526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801152a:	4611      	mov	r1, r2
 801152c:	f7fd bd26 	b.w	800ef7c <_malloc_r>
 8011530:	b922      	cbnz	r2, 801153c <_realloc_r+0x20>
 8011532:	f7fd fcd3 	bl	800eedc <_free_r>
 8011536:	4625      	mov	r5, r4
 8011538:	4628      	mov	r0, r5
 801153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801153c:	f000 faa8 	bl	8011a90 <_malloc_usable_size_r>
 8011540:	42a0      	cmp	r0, r4
 8011542:	d20f      	bcs.n	8011564 <_realloc_r+0x48>
 8011544:	4621      	mov	r1, r4
 8011546:	4638      	mov	r0, r7
 8011548:	f7fd fd18 	bl	800ef7c <_malloc_r>
 801154c:	4605      	mov	r5, r0
 801154e:	2800      	cmp	r0, #0
 8011550:	d0f2      	beq.n	8011538 <_realloc_r+0x1c>
 8011552:	4631      	mov	r1, r6
 8011554:	4622      	mov	r2, r4
 8011556:	f7fd fcab 	bl	800eeb0 <memcpy>
 801155a:	4631      	mov	r1, r6
 801155c:	4638      	mov	r0, r7
 801155e:	f7fd fcbd 	bl	800eedc <_free_r>
 8011562:	e7e9      	b.n	8011538 <_realloc_r+0x1c>
 8011564:	4635      	mov	r5, r6
 8011566:	e7e7      	b.n	8011538 <_realloc_r+0x1c>

08011568 <__sfputc_r>:
 8011568:	6893      	ldr	r3, [r2, #8]
 801156a:	3b01      	subs	r3, #1
 801156c:	2b00      	cmp	r3, #0
 801156e:	b410      	push	{r4}
 8011570:	6093      	str	r3, [r2, #8]
 8011572:	da08      	bge.n	8011586 <__sfputc_r+0x1e>
 8011574:	6994      	ldr	r4, [r2, #24]
 8011576:	42a3      	cmp	r3, r4
 8011578:	db01      	blt.n	801157e <__sfputc_r+0x16>
 801157a:	290a      	cmp	r1, #10
 801157c:	d103      	bne.n	8011586 <__sfputc_r+0x1e>
 801157e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011582:	f000 b94b 	b.w	801181c <__swbuf_r>
 8011586:	6813      	ldr	r3, [r2, #0]
 8011588:	1c58      	adds	r0, r3, #1
 801158a:	6010      	str	r0, [r2, #0]
 801158c:	7019      	strb	r1, [r3, #0]
 801158e:	4608      	mov	r0, r1
 8011590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011594:	4770      	bx	lr

08011596 <__sfputs_r>:
 8011596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011598:	4606      	mov	r6, r0
 801159a:	460f      	mov	r7, r1
 801159c:	4614      	mov	r4, r2
 801159e:	18d5      	adds	r5, r2, r3
 80115a0:	42ac      	cmp	r4, r5
 80115a2:	d101      	bne.n	80115a8 <__sfputs_r+0x12>
 80115a4:	2000      	movs	r0, #0
 80115a6:	e007      	b.n	80115b8 <__sfputs_r+0x22>
 80115a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115ac:	463a      	mov	r2, r7
 80115ae:	4630      	mov	r0, r6
 80115b0:	f7ff ffda 	bl	8011568 <__sfputc_r>
 80115b4:	1c43      	adds	r3, r0, #1
 80115b6:	d1f3      	bne.n	80115a0 <__sfputs_r+0xa>
 80115b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115bc <_vfiprintf_r>:
 80115bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	460d      	mov	r5, r1
 80115c2:	b09d      	sub	sp, #116	; 0x74
 80115c4:	4614      	mov	r4, r2
 80115c6:	4698      	mov	r8, r3
 80115c8:	4606      	mov	r6, r0
 80115ca:	b118      	cbz	r0, 80115d4 <_vfiprintf_r+0x18>
 80115cc:	6983      	ldr	r3, [r0, #24]
 80115ce:	b90b      	cbnz	r3, 80115d4 <_vfiprintf_r+0x18>
 80115d0:	f7fd fb7e 	bl	800ecd0 <__sinit>
 80115d4:	4b89      	ldr	r3, [pc, #548]	; (80117fc <_vfiprintf_r+0x240>)
 80115d6:	429d      	cmp	r5, r3
 80115d8:	d11b      	bne.n	8011612 <_vfiprintf_r+0x56>
 80115da:	6875      	ldr	r5, [r6, #4]
 80115dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115de:	07d9      	lsls	r1, r3, #31
 80115e0:	d405      	bmi.n	80115ee <_vfiprintf_r+0x32>
 80115e2:	89ab      	ldrh	r3, [r5, #12]
 80115e4:	059a      	lsls	r2, r3, #22
 80115e6:	d402      	bmi.n	80115ee <_vfiprintf_r+0x32>
 80115e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115ea:	f7fd fc4e 	bl	800ee8a <__retarget_lock_acquire_recursive>
 80115ee:	89ab      	ldrh	r3, [r5, #12]
 80115f0:	071b      	lsls	r3, r3, #28
 80115f2:	d501      	bpl.n	80115f8 <_vfiprintf_r+0x3c>
 80115f4:	692b      	ldr	r3, [r5, #16]
 80115f6:	b9eb      	cbnz	r3, 8011634 <_vfiprintf_r+0x78>
 80115f8:	4629      	mov	r1, r5
 80115fa:	4630      	mov	r0, r6
 80115fc:	f000 f96e 	bl	80118dc <__swsetup_r>
 8011600:	b1c0      	cbz	r0, 8011634 <_vfiprintf_r+0x78>
 8011602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011604:	07dc      	lsls	r4, r3, #31
 8011606:	d50e      	bpl.n	8011626 <_vfiprintf_r+0x6a>
 8011608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801160c:	b01d      	add	sp, #116	; 0x74
 801160e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011612:	4b7b      	ldr	r3, [pc, #492]	; (8011800 <_vfiprintf_r+0x244>)
 8011614:	429d      	cmp	r5, r3
 8011616:	d101      	bne.n	801161c <_vfiprintf_r+0x60>
 8011618:	68b5      	ldr	r5, [r6, #8]
 801161a:	e7df      	b.n	80115dc <_vfiprintf_r+0x20>
 801161c:	4b79      	ldr	r3, [pc, #484]	; (8011804 <_vfiprintf_r+0x248>)
 801161e:	429d      	cmp	r5, r3
 8011620:	bf08      	it	eq
 8011622:	68f5      	ldreq	r5, [r6, #12]
 8011624:	e7da      	b.n	80115dc <_vfiprintf_r+0x20>
 8011626:	89ab      	ldrh	r3, [r5, #12]
 8011628:	0598      	lsls	r0, r3, #22
 801162a:	d4ed      	bmi.n	8011608 <_vfiprintf_r+0x4c>
 801162c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801162e:	f7fd fc2d 	bl	800ee8c <__retarget_lock_release_recursive>
 8011632:	e7e9      	b.n	8011608 <_vfiprintf_r+0x4c>
 8011634:	2300      	movs	r3, #0
 8011636:	9309      	str	r3, [sp, #36]	; 0x24
 8011638:	2320      	movs	r3, #32
 801163a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801163e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011642:	2330      	movs	r3, #48	; 0x30
 8011644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011808 <_vfiprintf_r+0x24c>
 8011648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801164c:	f04f 0901 	mov.w	r9, #1
 8011650:	4623      	mov	r3, r4
 8011652:	469a      	mov	sl, r3
 8011654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011658:	b10a      	cbz	r2, 801165e <_vfiprintf_r+0xa2>
 801165a:	2a25      	cmp	r2, #37	; 0x25
 801165c:	d1f9      	bne.n	8011652 <_vfiprintf_r+0x96>
 801165e:	ebba 0b04 	subs.w	fp, sl, r4
 8011662:	d00b      	beq.n	801167c <_vfiprintf_r+0xc0>
 8011664:	465b      	mov	r3, fp
 8011666:	4622      	mov	r2, r4
 8011668:	4629      	mov	r1, r5
 801166a:	4630      	mov	r0, r6
 801166c:	f7ff ff93 	bl	8011596 <__sfputs_r>
 8011670:	3001      	adds	r0, #1
 8011672:	f000 80aa 	beq.w	80117ca <_vfiprintf_r+0x20e>
 8011676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011678:	445a      	add	r2, fp
 801167a:	9209      	str	r2, [sp, #36]	; 0x24
 801167c:	f89a 3000 	ldrb.w	r3, [sl]
 8011680:	2b00      	cmp	r3, #0
 8011682:	f000 80a2 	beq.w	80117ca <_vfiprintf_r+0x20e>
 8011686:	2300      	movs	r3, #0
 8011688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801168c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011690:	f10a 0a01 	add.w	sl, sl, #1
 8011694:	9304      	str	r3, [sp, #16]
 8011696:	9307      	str	r3, [sp, #28]
 8011698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801169c:	931a      	str	r3, [sp, #104]	; 0x68
 801169e:	4654      	mov	r4, sl
 80116a0:	2205      	movs	r2, #5
 80116a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116a6:	4858      	ldr	r0, [pc, #352]	; (8011808 <_vfiprintf_r+0x24c>)
 80116a8:	f7ee fd9a 	bl	80001e0 <memchr>
 80116ac:	9a04      	ldr	r2, [sp, #16]
 80116ae:	b9d8      	cbnz	r0, 80116e8 <_vfiprintf_r+0x12c>
 80116b0:	06d1      	lsls	r1, r2, #27
 80116b2:	bf44      	itt	mi
 80116b4:	2320      	movmi	r3, #32
 80116b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116ba:	0713      	lsls	r3, r2, #28
 80116bc:	bf44      	itt	mi
 80116be:	232b      	movmi	r3, #43	; 0x2b
 80116c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116c4:	f89a 3000 	ldrb.w	r3, [sl]
 80116c8:	2b2a      	cmp	r3, #42	; 0x2a
 80116ca:	d015      	beq.n	80116f8 <_vfiprintf_r+0x13c>
 80116cc:	9a07      	ldr	r2, [sp, #28]
 80116ce:	4654      	mov	r4, sl
 80116d0:	2000      	movs	r0, #0
 80116d2:	f04f 0c0a 	mov.w	ip, #10
 80116d6:	4621      	mov	r1, r4
 80116d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116dc:	3b30      	subs	r3, #48	; 0x30
 80116de:	2b09      	cmp	r3, #9
 80116e0:	d94e      	bls.n	8011780 <_vfiprintf_r+0x1c4>
 80116e2:	b1b0      	cbz	r0, 8011712 <_vfiprintf_r+0x156>
 80116e4:	9207      	str	r2, [sp, #28]
 80116e6:	e014      	b.n	8011712 <_vfiprintf_r+0x156>
 80116e8:	eba0 0308 	sub.w	r3, r0, r8
 80116ec:	fa09 f303 	lsl.w	r3, r9, r3
 80116f0:	4313      	orrs	r3, r2
 80116f2:	9304      	str	r3, [sp, #16]
 80116f4:	46a2      	mov	sl, r4
 80116f6:	e7d2      	b.n	801169e <_vfiprintf_r+0xe2>
 80116f8:	9b03      	ldr	r3, [sp, #12]
 80116fa:	1d19      	adds	r1, r3, #4
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	9103      	str	r1, [sp, #12]
 8011700:	2b00      	cmp	r3, #0
 8011702:	bfbb      	ittet	lt
 8011704:	425b      	neglt	r3, r3
 8011706:	f042 0202 	orrlt.w	r2, r2, #2
 801170a:	9307      	strge	r3, [sp, #28]
 801170c:	9307      	strlt	r3, [sp, #28]
 801170e:	bfb8      	it	lt
 8011710:	9204      	strlt	r2, [sp, #16]
 8011712:	7823      	ldrb	r3, [r4, #0]
 8011714:	2b2e      	cmp	r3, #46	; 0x2e
 8011716:	d10c      	bne.n	8011732 <_vfiprintf_r+0x176>
 8011718:	7863      	ldrb	r3, [r4, #1]
 801171a:	2b2a      	cmp	r3, #42	; 0x2a
 801171c:	d135      	bne.n	801178a <_vfiprintf_r+0x1ce>
 801171e:	9b03      	ldr	r3, [sp, #12]
 8011720:	1d1a      	adds	r2, r3, #4
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	9203      	str	r2, [sp, #12]
 8011726:	2b00      	cmp	r3, #0
 8011728:	bfb8      	it	lt
 801172a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801172e:	3402      	adds	r4, #2
 8011730:	9305      	str	r3, [sp, #20]
 8011732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011818 <_vfiprintf_r+0x25c>
 8011736:	7821      	ldrb	r1, [r4, #0]
 8011738:	2203      	movs	r2, #3
 801173a:	4650      	mov	r0, sl
 801173c:	f7ee fd50 	bl	80001e0 <memchr>
 8011740:	b140      	cbz	r0, 8011754 <_vfiprintf_r+0x198>
 8011742:	2340      	movs	r3, #64	; 0x40
 8011744:	eba0 000a 	sub.w	r0, r0, sl
 8011748:	fa03 f000 	lsl.w	r0, r3, r0
 801174c:	9b04      	ldr	r3, [sp, #16]
 801174e:	4303      	orrs	r3, r0
 8011750:	3401      	adds	r4, #1
 8011752:	9304      	str	r3, [sp, #16]
 8011754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011758:	482c      	ldr	r0, [pc, #176]	; (801180c <_vfiprintf_r+0x250>)
 801175a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801175e:	2206      	movs	r2, #6
 8011760:	f7ee fd3e 	bl	80001e0 <memchr>
 8011764:	2800      	cmp	r0, #0
 8011766:	d03f      	beq.n	80117e8 <_vfiprintf_r+0x22c>
 8011768:	4b29      	ldr	r3, [pc, #164]	; (8011810 <_vfiprintf_r+0x254>)
 801176a:	bb1b      	cbnz	r3, 80117b4 <_vfiprintf_r+0x1f8>
 801176c:	9b03      	ldr	r3, [sp, #12]
 801176e:	3307      	adds	r3, #7
 8011770:	f023 0307 	bic.w	r3, r3, #7
 8011774:	3308      	adds	r3, #8
 8011776:	9303      	str	r3, [sp, #12]
 8011778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801177a:	443b      	add	r3, r7
 801177c:	9309      	str	r3, [sp, #36]	; 0x24
 801177e:	e767      	b.n	8011650 <_vfiprintf_r+0x94>
 8011780:	fb0c 3202 	mla	r2, ip, r2, r3
 8011784:	460c      	mov	r4, r1
 8011786:	2001      	movs	r0, #1
 8011788:	e7a5      	b.n	80116d6 <_vfiprintf_r+0x11a>
 801178a:	2300      	movs	r3, #0
 801178c:	3401      	adds	r4, #1
 801178e:	9305      	str	r3, [sp, #20]
 8011790:	4619      	mov	r1, r3
 8011792:	f04f 0c0a 	mov.w	ip, #10
 8011796:	4620      	mov	r0, r4
 8011798:	f810 2b01 	ldrb.w	r2, [r0], #1
 801179c:	3a30      	subs	r2, #48	; 0x30
 801179e:	2a09      	cmp	r2, #9
 80117a0:	d903      	bls.n	80117aa <_vfiprintf_r+0x1ee>
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d0c5      	beq.n	8011732 <_vfiprintf_r+0x176>
 80117a6:	9105      	str	r1, [sp, #20]
 80117a8:	e7c3      	b.n	8011732 <_vfiprintf_r+0x176>
 80117aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80117ae:	4604      	mov	r4, r0
 80117b0:	2301      	movs	r3, #1
 80117b2:	e7f0      	b.n	8011796 <_vfiprintf_r+0x1da>
 80117b4:	ab03      	add	r3, sp, #12
 80117b6:	9300      	str	r3, [sp, #0]
 80117b8:	462a      	mov	r2, r5
 80117ba:	4b16      	ldr	r3, [pc, #88]	; (8011814 <_vfiprintf_r+0x258>)
 80117bc:	a904      	add	r1, sp, #16
 80117be:	4630      	mov	r0, r6
 80117c0:	f7fd fcd6 	bl	800f170 <_printf_float>
 80117c4:	4607      	mov	r7, r0
 80117c6:	1c78      	adds	r0, r7, #1
 80117c8:	d1d6      	bne.n	8011778 <_vfiprintf_r+0x1bc>
 80117ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117cc:	07d9      	lsls	r1, r3, #31
 80117ce:	d405      	bmi.n	80117dc <_vfiprintf_r+0x220>
 80117d0:	89ab      	ldrh	r3, [r5, #12]
 80117d2:	059a      	lsls	r2, r3, #22
 80117d4:	d402      	bmi.n	80117dc <_vfiprintf_r+0x220>
 80117d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117d8:	f7fd fb58 	bl	800ee8c <__retarget_lock_release_recursive>
 80117dc:	89ab      	ldrh	r3, [r5, #12]
 80117de:	065b      	lsls	r3, r3, #25
 80117e0:	f53f af12 	bmi.w	8011608 <_vfiprintf_r+0x4c>
 80117e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117e6:	e711      	b.n	801160c <_vfiprintf_r+0x50>
 80117e8:	ab03      	add	r3, sp, #12
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	462a      	mov	r2, r5
 80117ee:	4b09      	ldr	r3, [pc, #36]	; (8011814 <_vfiprintf_r+0x258>)
 80117f0:	a904      	add	r1, sp, #16
 80117f2:	4630      	mov	r0, r6
 80117f4:	f7fd ff60 	bl	800f6b8 <_printf_i>
 80117f8:	e7e4      	b.n	80117c4 <_vfiprintf_r+0x208>
 80117fa:	bf00      	nop
 80117fc:	08011ed8 	.word	0x08011ed8
 8011800:	08011ef8 	.word	0x08011ef8
 8011804:	08011eb8 	.word	0x08011eb8
 8011808:	0801216c 	.word	0x0801216c
 801180c:	08012176 	.word	0x08012176
 8011810:	0800f171 	.word	0x0800f171
 8011814:	08011597 	.word	0x08011597
 8011818:	08012172 	.word	0x08012172

0801181c <__swbuf_r>:
 801181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181e:	460e      	mov	r6, r1
 8011820:	4614      	mov	r4, r2
 8011822:	4605      	mov	r5, r0
 8011824:	b118      	cbz	r0, 801182e <__swbuf_r+0x12>
 8011826:	6983      	ldr	r3, [r0, #24]
 8011828:	b90b      	cbnz	r3, 801182e <__swbuf_r+0x12>
 801182a:	f7fd fa51 	bl	800ecd0 <__sinit>
 801182e:	4b21      	ldr	r3, [pc, #132]	; (80118b4 <__swbuf_r+0x98>)
 8011830:	429c      	cmp	r4, r3
 8011832:	d12b      	bne.n	801188c <__swbuf_r+0x70>
 8011834:	686c      	ldr	r4, [r5, #4]
 8011836:	69a3      	ldr	r3, [r4, #24]
 8011838:	60a3      	str	r3, [r4, #8]
 801183a:	89a3      	ldrh	r3, [r4, #12]
 801183c:	071a      	lsls	r2, r3, #28
 801183e:	d52f      	bpl.n	80118a0 <__swbuf_r+0x84>
 8011840:	6923      	ldr	r3, [r4, #16]
 8011842:	b36b      	cbz	r3, 80118a0 <__swbuf_r+0x84>
 8011844:	6923      	ldr	r3, [r4, #16]
 8011846:	6820      	ldr	r0, [r4, #0]
 8011848:	1ac0      	subs	r0, r0, r3
 801184a:	6963      	ldr	r3, [r4, #20]
 801184c:	b2f6      	uxtb	r6, r6
 801184e:	4283      	cmp	r3, r0
 8011850:	4637      	mov	r7, r6
 8011852:	dc04      	bgt.n	801185e <__swbuf_r+0x42>
 8011854:	4621      	mov	r1, r4
 8011856:	4628      	mov	r0, r5
 8011858:	f7ff f8ac 	bl	80109b4 <_fflush_r>
 801185c:	bb30      	cbnz	r0, 80118ac <__swbuf_r+0x90>
 801185e:	68a3      	ldr	r3, [r4, #8]
 8011860:	3b01      	subs	r3, #1
 8011862:	60a3      	str	r3, [r4, #8]
 8011864:	6823      	ldr	r3, [r4, #0]
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	6022      	str	r2, [r4, #0]
 801186a:	701e      	strb	r6, [r3, #0]
 801186c:	6963      	ldr	r3, [r4, #20]
 801186e:	3001      	adds	r0, #1
 8011870:	4283      	cmp	r3, r0
 8011872:	d004      	beq.n	801187e <__swbuf_r+0x62>
 8011874:	89a3      	ldrh	r3, [r4, #12]
 8011876:	07db      	lsls	r3, r3, #31
 8011878:	d506      	bpl.n	8011888 <__swbuf_r+0x6c>
 801187a:	2e0a      	cmp	r6, #10
 801187c:	d104      	bne.n	8011888 <__swbuf_r+0x6c>
 801187e:	4621      	mov	r1, r4
 8011880:	4628      	mov	r0, r5
 8011882:	f7ff f897 	bl	80109b4 <_fflush_r>
 8011886:	b988      	cbnz	r0, 80118ac <__swbuf_r+0x90>
 8011888:	4638      	mov	r0, r7
 801188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188c:	4b0a      	ldr	r3, [pc, #40]	; (80118b8 <__swbuf_r+0x9c>)
 801188e:	429c      	cmp	r4, r3
 8011890:	d101      	bne.n	8011896 <__swbuf_r+0x7a>
 8011892:	68ac      	ldr	r4, [r5, #8]
 8011894:	e7cf      	b.n	8011836 <__swbuf_r+0x1a>
 8011896:	4b09      	ldr	r3, [pc, #36]	; (80118bc <__swbuf_r+0xa0>)
 8011898:	429c      	cmp	r4, r3
 801189a:	bf08      	it	eq
 801189c:	68ec      	ldreq	r4, [r5, #12]
 801189e:	e7ca      	b.n	8011836 <__swbuf_r+0x1a>
 80118a0:	4621      	mov	r1, r4
 80118a2:	4628      	mov	r0, r5
 80118a4:	f000 f81a 	bl	80118dc <__swsetup_r>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d0cb      	beq.n	8011844 <__swbuf_r+0x28>
 80118ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80118b0:	e7ea      	b.n	8011888 <__swbuf_r+0x6c>
 80118b2:	bf00      	nop
 80118b4:	08011ed8 	.word	0x08011ed8
 80118b8:	08011ef8 	.word	0x08011ef8
 80118bc:	08011eb8 	.word	0x08011eb8

080118c0 <__ascii_wctomb>:
 80118c0:	b149      	cbz	r1, 80118d6 <__ascii_wctomb+0x16>
 80118c2:	2aff      	cmp	r2, #255	; 0xff
 80118c4:	bf85      	ittet	hi
 80118c6:	238a      	movhi	r3, #138	; 0x8a
 80118c8:	6003      	strhi	r3, [r0, #0]
 80118ca:	700a      	strbls	r2, [r1, #0]
 80118cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80118d0:	bf98      	it	ls
 80118d2:	2001      	movls	r0, #1
 80118d4:	4770      	bx	lr
 80118d6:	4608      	mov	r0, r1
 80118d8:	4770      	bx	lr
	...

080118dc <__swsetup_r>:
 80118dc:	4b32      	ldr	r3, [pc, #200]	; (80119a8 <__swsetup_r+0xcc>)
 80118de:	b570      	push	{r4, r5, r6, lr}
 80118e0:	681d      	ldr	r5, [r3, #0]
 80118e2:	4606      	mov	r6, r0
 80118e4:	460c      	mov	r4, r1
 80118e6:	b125      	cbz	r5, 80118f2 <__swsetup_r+0x16>
 80118e8:	69ab      	ldr	r3, [r5, #24]
 80118ea:	b913      	cbnz	r3, 80118f2 <__swsetup_r+0x16>
 80118ec:	4628      	mov	r0, r5
 80118ee:	f7fd f9ef 	bl	800ecd0 <__sinit>
 80118f2:	4b2e      	ldr	r3, [pc, #184]	; (80119ac <__swsetup_r+0xd0>)
 80118f4:	429c      	cmp	r4, r3
 80118f6:	d10f      	bne.n	8011918 <__swsetup_r+0x3c>
 80118f8:	686c      	ldr	r4, [r5, #4]
 80118fa:	89a3      	ldrh	r3, [r4, #12]
 80118fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011900:	0719      	lsls	r1, r3, #28
 8011902:	d42c      	bmi.n	801195e <__swsetup_r+0x82>
 8011904:	06dd      	lsls	r5, r3, #27
 8011906:	d411      	bmi.n	801192c <__swsetup_r+0x50>
 8011908:	2309      	movs	r3, #9
 801190a:	6033      	str	r3, [r6, #0]
 801190c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011910:	81a3      	strh	r3, [r4, #12]
 8011912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011916:	e03e      	b.n	8011996 <__swsetup_r+0xba>
 8011918:	4b25      	ldr	r3, [pc, #148]	; (80119b0 <__swsetup_r+0xd4>)
 801191a:	429c      	cmp	r4, r3
 801191c:	d101      	bne.n	8011922 <__swsetup_r+0x46>
 801191e:	68ac      	ldr	r4, [r5, #8]
 8011920:	e7eb      	b.n	80118fa <__swsetup_r+0x1e>
 8011922:	4b24      	ldr	r3, [pc, #144]	; (80119b4 <__swsetup_r+0xd8>)
 8011924:	429c      	cmp	r4, r3
 8011926:	bf08      	it	eq
 8011928:	68ec      	ldreq	r4, [r5, #12]
 801192a:	e7e6      	b.n	80118fa <__swsetup_r+0x1e>
 801192c:	0758      	lsls	r0, r3, #29
 801192e:	d512      	bpl.n	8011956 <__swsetup_r+0x7a>
 8011930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011932:	b141      	cbz	r1, 8011946 <__swsetup_r+0x6a>
 8011934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011938:	4299      	cmp	r1, r3
 801193a:	d002      	beq.n	8011942 <__swsetup_r+0x66>
 801193c:	4630      	mov	r0, r6
 801193e:	f7fd facd 	bl	800eedc <_free_r>
 8011942:	2300      	movs	r3, #0
 8011944:	6363      	str	r3, [r4, #52]	; 0x34
 8011946:	89a3      	ldrh	r3, [r4, #12]
 8011948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801194c:	81a3      	strh	r3, [r4, #12]
 801194e:	2300      	movs	r3, #0
 8011950:	6063      	str	r3, [r4, #4]
 8011952:	6923      	ldr	r3, [r4, #16]
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	f043 0308 	orr.w	r3, r3, #8
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	6923      	ldr	r3, [r4, #16]
 8011960:	b94b      	cbnz	r3, 8011976 <__swsetup_r+0x9a>
 8011962:	89a3      	ldrh	r3, [r4, #12]
 8011964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801196c:	d003      	beq.n	8011976 <__swsetup_r+0x9a>
 801196e:	4621      	mov	r1, r4
 8011970:	4630      	mov	r0, r6
 8011972:	f000 f84d 	bl	8011a10 <__smakebuf_r>
 8011976:	89a0      	ldrh	r0, [r4, #12]
 8011978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801197c:	f010 0301 	ands.w	r3, r0, #1
 8011980:	d00a      	beq.n	8011998 <__swsetup_r+0xbc>
 8011982:	2300      	movs	r3, #0
 8011984:	60a3      	str	r3, [r4, #8]
 8011986:	6963      	ldr	r3, [r4, #20]
 8011988:	425b      	negs	r3, r3
 801198a:	61a3      	str	r3, [r4, #24]
 801198c:	6923      	ldr	r3, [r4, #16]
 801198e:	b943      	cbnz	r3, 80119a2 <__swsetup_r+0xc6>
 8011990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011994:	d1ba      	bne.n	801190c <__swsetup_r+0x30>
 8011996:	bd70      	pop	{r4, r5, r6, pc}
 8011998:	0781      	lsls	r1, r0, #30
 801199a:	bf58      	it	pl
 801199c:	6963      	ldrpl	r3, [r4, #20]
 801199e:	60a3      	str	r3, [r4, #8]
 80119a0:	e7f4      	b.n	801198c <__swsetup_r+0xb0>
 80119a2:	2000      	movs	r0, #0
 80119a4:	e7f7      	b.n	8011996 <__swsetup_r+0xba>
 80119a6:	bf00      	nop
 80119a8:	20000184 	.word	0x20000184
 80119ac:	08011ed8 	.word	0x08011ed8
 80119b0:	08011ef8 	.word	0x08011ef8
 80119b4:	08011eb8 	.word	0x08011eb8

080119b8 <abort>:
 80119b8:	b508      	push	{r3, lr}
 80119ba:	2006      	movs	r0, #6
 80119bc:	f000 f898 	bl	8011af0 <raise>
 80119c0:	2001      	movs	r0, #1
 80119c2:	f7f1 ffa9 	bl	8003918 <_exit>

080119c6 <__swhatbuf_r>:
 80119c6:	b570      	push	{r4, r5, r6, lr}
 80119c8:	460e      	mov	r6, r1
 80119ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ce:	2900      	cmp	r1, #0
 80119d0:	b096      	sub	sp, #88	; 0x58
 80119d2:	4614      	mov	r4, r2
 80119d4:	461d      	mov	r5, r3
 80119d6:	da07      	bge.n	80119e8 <__swhatbuf_r+0x22>
 80119d8:	2300      	movs	r3, #0
 80119da:	602b      	str	r3, [r5, #0]
 80119dc:	89b3      	ldrh	r3, [r6, #12]
 80119de:	061a      	lsls	r2, r3, #24
 80119e0:	d410      	bmi.n	8011a04 <__swhatbuf_r+0x3e>
 80119e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119e6:	e00e      	b.n	8011a06 <__swhatbuf_r+0x40>
 80119e8:	466a      	mov	r2, sp
 80119ea:	f000 f89d 	bl	8011b28 <_fstat_r>
 80119ee:	2800      	cmp	r0, #0
 80119f0:	dbf2      	blt.n	80119d8 <__swhatbuf_r+0x12>
 80119f2:	9a01      	ldr	r2, [sp, #4]
 80119f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119fc:	425a      	negs	r2, r3
 80119fe:	415a      	adcs	r2, r3
 8011a00:	602a      	str	r2, [r5, #0]
 8011a02:	e7ee      	b.n	80119e2 <__swhatbuf_r+0x1c>
 8011a04:	2340      	movs	r3, #64	; 0x40
 8011a06:	2000      	movs	r0, #0
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	b016      	add	sp, #88	; 0x58
 8011a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011a10 <__smakebuf_r>:
 8011a10:	898b      	ldrh	r3, [r1, #12]
 8011a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a14:	079d      	lsls	r5, r3, #30
 8011a16:	4606      	mov	r6, r0
 8011a18:	460c      	mov	r4, r1
 8011a1a:	d507      	bpl.n	8011a2c <__smakebuf_r+0x1c>
 8011a1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a20:	6023      	str	r3, [r4, #0]
 8011a22:	6123      	str	r3, [r4, #16]
 8011a24:	2301      	movs	r3, #1
 8011a26:	6163      	str	r3, [r4, #20]
 8011a28:	b002      	add	sp, #8
 8011a2a:	bd70      	pop	{r4, r5, r6, pc}
 8011a2c:	ab01      	add	r3, sp, #4
 8011a2e:	466a      	mov	r2, sp
 8011a30:	f7ff ffc9 	bl	80119c6 <__swhatbuf_r>
 8011a34:	9900      	ldr	r1, [sp, #0]
 8011a36:	4605      	mov	r5, r0
 8011a38:	4630      	mov	r0, r6
 8011a3a:	f7fd fa9f 	bl	800ef7c <_malloc_r>
 8011a3e:	b948      	cbnz	r0, 8011a54 <__smakebuf_r+0x44>
 8011a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a44:	059a      	lsls	r2, r3, #22
 8011a46:	d4ef      	bmi.n	8011a28 <__smakebuf_r+0x18>
 8011a48:	f023 0303 	bic.w	r3, r3, #3
 8011a4c:	f043 0302 	orr.w	r3, r3, #2
 8011a50:	81a3      	strh	r3, [r4, #12]
 8011a52:	e7e3      	b.n	8011a1c <__smakebuf_r+0xc>
 8011a54:	4b0d      	ldr	r3, [pc, #52]	; (8011a8c <__smakebuf_r+0x7c>)
 8011a56:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a58:	89a3      	ldrh	r3, [r4, #12]
 8011a5a:	6020      	str	r0, [r4, #0]
 8011a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a60:	81a3      	strh	r3, [r4, #12]
 8011a62:	9b00      	ldr	r3, [sp, #0]
 8011a64:	6163      	str	r3, [r4, #20]
 8011a66:	9b01      	ldr	r3, [sp, #4]
 8011a68:	6120      	str	r0, [r4, #16]
 8011a6a:	b15b      	cbz	r3, 8011a84 <__smakebuf_r+0x74>
 8011a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a70:	4630      	mov	r0, r6
 8011a72:	f000 f86b 	bl	8011b4c <_isatty_r>
 8011a76:	b128      	cbz	r0, 8011a84 <__smakebuf_r+0x74>
 8011a78:	89a3      	ldrh	r3, [r4, #12]
 8011a7a:	f023 0303 	bic.w	r3, r3, #3
 8011a7e:	f043 0301 	orr.w	r3, r3, #1
 8011a82:	81a3      	strh	r3, [r4, #12]
 8011a84:	89a0      	ldrh	r0, [r4, #12]
 8011a86:	4305      	orrs	r5, r0
 8011a88:	81a5      	strh	r5, [r4, #12]
 8011a8a:	e7cd      	b.n	8011a28 <__smakebuf_r+0x18>
 8011a8c:	0800ec69 	.word	0x0800ec69

08011a90 <_malloc_usable_size_r>:
 8011a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a94:	1f18      	subs	r0, r3, #4
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	bfbc      	itt	lt
 8011a9a:	580b      	ldrlt	r3, [r1, r0]
 8011a9c:	18c0      	addlt	r0, r0, r3
 8011a9e:	4770      	bx	lr

08011aa0 <_raise_r>:
 8011aa0:	291f      	cmp	r1, #31
 8011aa2:	b538      	push	{r3, r4, r5, lr}
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	460d      	mov	r5, r1
 8011aa8:	d904      	bls.n	8011ab4 <_raise_r+0x14>
 8011aaa:	2316      	movs	r3, #22
 8011aac:	6003      	str	r3, [r0, #0]
 8011aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ab2:	bd38      	pop	{r3, r4, r5, pc}
 8011ab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ab6:	b112      	cbz	r2, 8011abe <_raise_r+0x1e>
 8011ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011abc:	b94b      	cbnz	r3, 8011ad2 <_raise_r+0x32>
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f000 f830 	bl	8011b24 <_getpid_r>
 8011ac4:	462a      	mov	r2, r5
 8011ac6:	4601      	mov	r1, r0
 8011ac8:	4620      	mov	r0, r4
 8011aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ace:	f000 b817 	b.w	8011b00 <_kill_r>
 8011ad2:	2b01      	cmp	r3, #1
 8011ad4:	d00a      	beq.n	8011aec <_raise_r+0x4c>
 8011ad6:	1c59      	adds	r1, r3, #1
 8011ad8:	d103      	bne.n	8011ae2 <_raise_r+0x42>
 8011ada:	2316      	movs	r3, #22
 8011adc:	6003      	str	r3, [r0, #0]
 8011ade:	2001      	movs	r0, #1
 8011ae0:	e7e7      	b.n	8011ab2 <_raise_r+0x12>
 8011ae2:	2400      	movs	r4, #0
 8011ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011ae8:	4628      	mov	r0, r5
 8011aea:	4798      	blx	r3
 8011aec:	2000      	movs	r0, #0
 8011aee:	e7e0      	b.n	8011ab2 <_raise_r+0x12>

08011af0 <raise>:
 8011af0:	4b02      	ldr	r3, [pc, #8]	; (8011afc <raise+0xc>)
 8011af2:	4601      	mov	r1, r0
 8011af4:	6818      	ldr	r0, [r3, #0]
 8011af6:	f7ff bfd3 	b.w	8011aa0 <_raise_r>
 8011afa:	bf00      	nop
 8011afc:	20000184 	.word	0x20000184

08011b00 <_kill_r>:
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	4d07      	ldr	r5, [pc, #28]	; (8011b20 <_kill_r+0x20>)
 8011b04:	2300      	movs	r3, #0
 8011b06:	4604      	mov	r4, r0
 8011b08:	4608      	mov	r0, r1
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	602b      	str	r3, [r5, #0]
 8011b0e:	f7f1 fef3 	bl	80038f8 <_kill>
 8011b12:	1c43      	adds	r3, r0, #1
 8011b14:	d102      	bne.n	8011b1c <_kill_r+0x1c>
 8011b16:	682b      	ldr	r3, [r5, #0]
 8011b18:	b103      	cbz	r3, 8011b1c <_kill_r+0x1c>
 8011b1a:	6023      	str	r3, [r4, #0]
 8011b1c:	bd38      	pop	{r3, r4, r5, pc}
 8011b1e:	bf00      	nop
 8011b20:	2000df60 	.word	0x2000df60

08011b24 <_getpid_r>:
 8011b24:	f7f1 bee0 	b.w	80038e8 <_getpid>

08011b28 <_fstat_r>:
 8011b28:	b538      	push	{r3, r4, r5, lr}
 8011b2a:	4d07      	ldr	r5, [pc, #28]	; (8011b48 <_fstat_r+0x20>)
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	4604      	mov	r4, r0
 8011b30:	4608      	mov	r0, r1
 8011b32:	4611      	mov	r1, r2
 8011b34:	602b      	str	r3, [r5, #0]
 8011b36:	f7f1 ff3e 	bl	80039b6 <_fstat>
 8011b3a:	1c43      	adds	r3, r0, #1
 8011b3c:	d102      	bne.n	8011b44 <_fstat_r+0x1c>
 8011b3e:	682b      	ldr	r3, [r5, #0]
 8011b40:	b103      	cbz	r3, 8011b44 <_fstat_r+0x1c>
 8011b42:	6023      	str	r3, [r4, #0]
 8011b44:	bd38      	pop	{r3, r4, r5, pc}
 8011b46:	bf00      	nop
 8011b48:	2000df60 	.word	0x2000df60

08011b4c <_isatty_r>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	4d06      	ldr	r5, [pc, #24]	; (8011b68 <_isatty_r+0x1c>)
 8011b50:	2300      	movs	r3, #0
 8011b52:	4604      	mov	r4, r0
 8011b54:	4608      	mov	r0, r1
 8011b56:	602b      	str	r3, [r5, #0]
 8011b58:	f7f1 ff3d 	bl	80039d6 <_isatty>
 8011b5c:	1c43      	adds	r3, r0, #1
 8011b5e:	d102      	bne.n	8011b66 <_isatty_r+0x1a>
 8011b60:	682b      	ldr	r3, [r5, #0]
 8011b62:	b103      	cbz	r3, 8011b66 <_isatty_r+0x1a>
 8011b64:	6023      	str	r3, [r4, #0]
 8011b66:	bd38      	pop	{r3, r4, r5, pc}
 8011b68:	2000df60 	.word	0x2000df60

08011b6c <_init>:
 8011b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b6e:	bf00      	nop
 8011b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b72:	bc08      	pop	{r3}
 8011b74:	469e      	mov	lr, r3
 8011b76:	4770      	bx	lr

08011b78 <_fini>:
 8011b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b7a:	bf00      	nop
 8011b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b7e:	bc08      	pop	{r3}
 8011b80:	469e      	mov	lr, r3
 8011b82:	4770      	bx	lr
